{
  "originalPath": "src\\components\\TradingAdvisorFixed.tsx",
  "timestamp": "2025-10-13T18:26:50.549Z",
  "hash": "a52a1048cbc9dd948f137c75005feba335ecc04cc8a7bb578e083cbbb6e00703",
  "size": 7024,
  "content": "import { supabase } from '@/lib/supabase';\r\nimport { AlertTriangle, Brain, Lightbulb, MessageSquare, TrendingUp } from 'lucide-react';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Badge } from './ui/badge';\r\nimport { Button } from './ui/button';\r\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card';\r\nimport { Textarea } from './ui/textarea';\r\n\r\ninterface MarketInsight {\r\n  type: 'bullish' | 'bearish' | 'neutral';\r\n  confidence: number;\r\n  message: string;\r\n  timestamp: string;\r\n}\r\n\r\ninterface TradingSignal {\r\n  action: 'buy' | 'sell' | 'hold';\r\n  asset: string;\r\n  price: number;\r\n  reasoning: string;\r\n  risk_level: 'low' | 'medium' | 'high';\r\n}\r\n\r\nconst TradingAdvisor: React.FC = () => {\r\n  const [insights, setInsights] = useState<MarketInsight[]>([]);\r\n  const [signals, setSignals] = useState<TradingSignal[]>([]);\r\n  const [query, setQuery] = useState('');\r\n  const [response, setResponse] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    loadLiveInsights();\r\n    loadLiveSignals();\r\n  }, []);\r\n\r\n  const loadLiveInsights = async () => {\r\n    try {\r\n      // Query Supabase for live market insights\r\n      const { data, error } = await supabase\r\n        .from('market_insights')\r\n        .select('*')\r\n        .order('timestamp', { ascending: false });\r\n      if (error) throw error;\r\n      setInsights(data || []);\r\n    } catch (error) {\r\n      console.error('Failed to load market insights:', error);\r\n      setInsights([]);\r\n    }\r\n  };\r\n\r\n  const loadLiveSignals = async () => {\r\n    try {\r\n      // Query Supabase for live trading signals\r\n      const { data, error } = await supabase\r\n        .from('trading_signals')\r\n        .select('*')\r\n        .order('created_at', { ascending: false });\r\n      if (error) throw error;\r\n      setSignals(data || []);\r\n    } catch (error) {\r\n      console.error('Failed to load trading signals:', error);\r\n      setSignals([]);\r\n    }\r\n  };\r\n\r\n  const handleAIQuery = async () => {\r\n    if (!query.trim()) return;\r\n    \r\n    setLoading(true);\r\n    try {\r\n      const { data, error } = await supabase.functions.invoke('ai-trading-advisor', {\r\n        body: { \r\n          query: query.trim(),\r\n          market_data: {\r\n            btc_price: '43287',\r\n            btc_dominance: '52'\r\n          }\r\n        }\r\n      });\r\n\r\n      if (error) throw error;\r\n      \r\n      setResponse(data.response);\r\n    } catch (error) {\r\n      console.error('AI Advisor Error:', error);\r\n      setResponse('Sorry, I encountered an error processing your request. Please try again.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const getInsightColor = (type: string) => {\r\n    switch (type) {\r\n      case 'bullish': return 'bg-green-100 text-green-800 border-green-200';\r\n      case 'bearish': return 'bg-red-100 text-red-800 border-red-200';\r\n      default: return 'bg-gray-100 text-gray-800 border-gray-200';\r\n    }\r\n  };\r\n\r\n  const getSignalColor = (action: string) => {\r\n    switch (action) {\r\n      case 'buy': return 'bg-green-600';\r\n      case 'sell': return 'bg-red-600';\r\n      default: return 'bg-yellow-600';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <div className=\"flex items-center gap-2\">\r\n        <Brain className=\"w-6 h-6 text-blue-600\" />\r\n        <h2 className=\"text-2xl font-bold\">AI Trading Advisor</h2>\r\n        <Badge variant=\"outline\" className=\"bg-blue-50 text-blue-700\">\r\n          Real-time Analysis\r\n        </Badge>\r\n      </div>\r\n\r\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <Lightbulb className=\"w-5 h-5\" />\r\n              Market Insights\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent className=\"space-y-4\">\r\n            {insights.map((insight, index) => (\r\n              <div key={index} className={`p-3 rounded-lg border ${getInsightColor(insight.type)}`}>\r\n                <div className=\"flex items-center justify-between mb-2\">\r\n                  <Badge variant=\"outline\" className=\"text-xs\">\r\n                    {insight.type.toUpperCase()}\r\n                  </Badge>\r\n                  <span className=\"text-xs opacity-70\">{insight.confidence}% confidence</span>\r\n                </div>\r\n                <p className=\"text-sm\">{insight.message}</p>\r\n                <p className=\"text-xs opacity-60 mt-1\">{insight.timestamp}</p>\r\n              </div>\r\n            ))}\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <TrendingUp className=\"w-5 h-5\" />\r\n              Trading Signals\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent className=\"space-y-4\">\r\n            {signals.map((signal, index) => (\r\n              <div key={index} className=\"p-3 border rounded-lg\">\r\n                <div className=\"flex items-center justify-between mb-2\">\r\n                  <div className=\"flex items-center gap-2\">\r\n                    <Badge className={`text-white ${getSignalColor(signal.action)}`}>\r\n                      {signal.action.toUpperCase()}\r\n                    </Badge>\r\n                    <span className=\"font-medium\">{signal.asset}</span>\r\n                  </div>\r\n                  <span className=\"text-lg font-bold\">${signal.price.toLocaleString()}</span>\r\n                </div>\r\n                <p className=\"text-sm text-gray-600 mb-2\">{signal.reasoning}</p>\r\n                <div className=\"flex items-center gap-2\">\r\n                  <AlertTriangle className=\"w-4 h-4 text-orange-500\" />\r\n                  <span className=\"text-xs\">Risk: {signal.risk_level}</span>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <MessageSquare className=\"w-5 h-5\" />\r\n            Ask Your AI Advisor\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent className=\"space-y-4\">\r\n          <Textarea\r\n            placeholder=\"Ask me about market conditions, trading strategies, risk management...\"\r\n            value={query}\r\n            onChange={(e) => setQuery(e.target.value)}\r\n            className=\"min-h-[100px]\"\r\n          />\r\n          <Button onClick={handleAIQuery} disabled={loading || !query.trim()}>\r\n            {loading ? 'Analyzing...' : 'Get AI Advice'}\r\n          </Button>\r\n          {response && (\r\n            <div className=\"p-4 bg-blue-50 border border-blue-200 rounded-lg\">\r\n              <div className=\"flex items-start gap-2\">\r\n                <Brain className=\"w-5 h-5 text-blue-600 mt-0.5\" />\r\n                <p className=\"text-sm\">{response}</p>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TradingAdvisor;"
}