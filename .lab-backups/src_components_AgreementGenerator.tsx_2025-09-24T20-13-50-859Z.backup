{
  "originalPath": "src\\components\\AgreementGenerator.tsx",
  "timestamp": "2025-09-24T20:13:50.859Z",
  "hash": "c8ba8c68de5482e247aef47a6b653fb735fcabd0c1d56f6b471ddb5e8fb55749",
  "size": 6445,
  "content": "import React, { useState } from 'react';\r\nimport { supabase } from '../lib/supabase';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport { FileText, Download, Send } from 'lucide-react';\r\n\r\ninterface ServiceItem {\r\n  name: string;\r\n  frequency: string;\r\n  rate: number;\r\n  difficulty: string;\r\n}\r\n\r\ninterface AgreementData {\r\n  clientName: string;\r\n  clientEmail: string;\r\n  clientPhone: string;\r\n  propertyAddress: string;\r\n  squareFootage: number;\r\n  services: ServiceItem[];\r\n  totalMonthlyRate: number;\r\n  startDate: string;\r\n  contractLength: string;\r\n}\r\n\r\ninterface AgreementGeneratorProps {\r\n  agreementData?: AgreementData;\r\n  onGenerateAgreement?: (agreement: string) => void;\r\n}\r\n\r\nexport default function AgreementGenerator({ \r\n  agreementData, \r\n  onGenerateAgreement \r\n}: AgreementGeneratorProps) {\r\n  const [isGenerating, setIsGenerating] = useState(false);\r\n  const [generatedAgreement, setGeneratedAgreement] = useState('');\r\n  const [clientInfo, setClientInfo] = useState({\r\n    name: agreementData?.clientName || '',\r\n    email: agreementData?.clientEmail || '',\r\n    phone: agreementData?.clientPhone || '',\r\n    startDate: agreementData?.startDate || '',\r\n    contractLength: agreementData?.contractLength || '12 months'\r\n  });\r\n\r\n  const generateAgreement = async () => {\r\n    setIsGenerating(true);\r\n    try {\r\n      // Compose a prompt for the AI assistant\r\n      const prompt = `Generate a professional janitorial services agreement using the following data:\\n\\nClient Name: ${clientInfo.name}\\nClient Email: ${clientInfo.email}\\nClient Phone: ${clientInfo.phone}\\nProperty Address: ${agreementData?.propertyAddress || ''}\\nSquare Footage: ${agreementData?.squareFootage || ''}\\nServices: ${(agreementData?.services || []).map(s => `${s.name} (${s.frequency}, $${s.rate}/month)`).join(', ')}\\nTotal Monthly Rate: $${agreementData?.totalMonthlyRate || ''}\\nStart Date: ${clientInfo.startDate}\\nContract Length: ${clientInfo.contractLength}`;\r\n\r\n      // Call the Supabase Edge Function for AI agreement generation\r\n      const { data, error } = await supabase.functions.invoke('ai-assistant-chat', {\r\n        body: {\r\n          message: prompt,\r\n          conversationMode: 'agreement',\r\n          industry: 'Janitorial',\r\n          personality: 'formal'\r\n        }\r\n      });\r\n      if (error) throw error;\r\n      const agreement = data?.response || 'Error: No agreement generated.';\r\n      setGeneratedAgreement(agreement);\r\n      onGenerateAgreement?.(agreement);\r\n    } catch (error) {\r\n      console.error('Error generating agreement:', error);\r\n      setGeneratedAgreement('Error generating agreement. Please try again.');\r\n    } finally {\r\n      setIsGenerating(false);\r\n    }\r\n  };\r\n\r\n  const downloadAgreement = () => {\r\n    const blob = new Blob([generatedAgreement], { type: 'text/plain' });\r\n    const url = URL.createObjectURL(blob);\r\n    const a = document.createElement('a');\r\n    a.href = url;\r\n    a.download = `janitorial-agreement-${clientInfo.name.replace(/\\s+/g, '-')}.txt`;\r\n    document.body.appendChild(a);\r\n    a.click();\r\n    document.body.removeChild(a);\r\n    URL.revokeObjectURL(url);\r\n  };\r\n\r\n  return (\r\n    <Card className=\"w-full max-w-4xl mx-auto\">\r\n      <CardHeader>\r\n        <CardTitle className=\"flex items-center gap-2\">\r\n          <FileText className=\"h-5 w-5\" />\r\n          Agreement Generator\r\n        </CardTitle>\r\n      </CardHeader>\r\n      <CardContent className=\"space-y-6\">\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n          <div>\r\n            <Label htmlFor=\"clientName\">Client Name</Label>\r\n            <Input\r\n              id=\"clientName\"\r\n              value={clientInfo.name}\r\n              onChange={(e) => setClientInfo({...clientInfo, name: e.target.value})}\r\n              placeholder=\"Enter client name\"\r\n            />\r\n          </div>\r\n          <div>\r\n            <Label htmlFor=\"clientEmail\">Client Email</Label>\r\n            <Input\r\n              id=\"clientEmail\"\r\n              type=\"email\"\r\n              value={clientInfo.email}\r\n              onChange={(e) => setClientInfo({...clientInfo, email: e.target.value})}\r\n              placeholder=\"client@email.com\"\r\n            />\r\n          </div>\r\n          <div>\r\n            <Label htmlFor=\"clientPhone\">Client Phone</Label>\r\n            <Input\r\n              id=\"clientPhone\"\r\n              value={clientInfo.phone}\r\n              onChange={(e) => setClientInfo({...clientInfo, phone: e.target.value})}\r\n              placeholder=\"(555) 123-4567\"\r\n            />\r\n          </div>\r\n          <div>\r\n            <Label htmlFor=\"startDate\">Start Date</Label>\r\n            <Input\r\n              id=\"startDate\"\r\n              type=\"date\"\r\n              value={clientInfo.startDate}\r\n              onChange={(e) => setClientInfo({...clientInfo, startDate: e.target.value})}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"flex gap-4\">\r\n          <Button \r\n            onClick={generateAgreement}\r\n            disabled={isGenerating || !clientInfo.name}\r\n            className=\"flex items-center gap-2\"\r\n          >\r\n            <FileText className=\"h-4 w-4\" />\r\n            {isGenerating ? 'Generating...' : 'Generate Agreement'}\r\n          </Button>\r\n          \r\n          {generatedAgreement && (\r\n            <>\r\n              <Button \r\n                onClick={downloadAgreement}\r\n                variant=\"outline\"\r\n                className=\"flex items-center gap-2\"\r\n              >\r\n                <Download className=\"h-4 w-4\" />\r\n                Download\r\n              </Button>\r\n              <Button \r\n                variant=\"outline\"\r\n                className=\"flex items-center gap-2\"\r\n              >\r\n                <Send className=\"h-4 w-4\" />\r\n                Email to Client\r\n              </Button>\r\n            </>\r\n          )}\r\n        </div>\r\n\r\n        {generatedAgreement && (\r\n          <div>\r\n            <Label>Generated Agreement Preview</Label>\r\n            <Textarea\r\n              value={generatedAgreement}\r\n              readOnly\r\n              className=\"min-h-[400px] font-mono text-sm\"\r\n            />\r\n          </div>\r\n        )}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}"
}