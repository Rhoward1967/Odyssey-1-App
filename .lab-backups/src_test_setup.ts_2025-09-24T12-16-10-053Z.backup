{
  "originalPath": "src\\test\\setup.ts",
  "timestamp": "2025-09-24T12:16:10.053Z",
  "hash": "a8ee65eabf046595e490fe3d42cb9b7ce98366f36436971253cb0b0c0d415ee8",
  "size": 2062,
  "content": "import '@testing-library/jest-dom';\r\nimport { vi } from 'vitest';\r\n\r\n// Mock Supabase client globally for all tests\r\nvi.mock('../lib/supabase', () => ({\r\n  supabase: {\r\n    from: vi.fn(() => ({\r\n      select: vi.fn(() => ({\r\n        order: vi.fn().mockResolvedValue({ data: [], error: null }),\r\n        limit: vi.fn().mockResolvedValue({ data: [], error: null }),\r\n        single: vi.fn().mockResolvedValue({ data: null, error: null }),\r\n        eq: vi.fn().mockReturnThis(),\r\n        gte: vi.fn().mockReturnThis(),\r\n        lte: vi.fn().mockReturnThis(),\r\n      })),\r\n      insert: vi.fn().mockResolvedValue({ data: [], error: null }),\r\n      update: vi.fn().mockResolvedValue({ data: [], error: null }),\r\n      delete: vi.fn().mockResolvedValue({ data: [], error: null })\r\n    })),\r\n    auth: {\r\n      getSession: vi.fn().mockResolvedValue({ data: { session: null }, error: null }),\r\n      getUser: vi.fn().mockResolvedValue({ data: { user: null }, error: null }),\r\n      signIn: vi.fn().mockResolvedValue({ data: null, error: null }),\r\n      signOut: vi.fn().mockResolvedValue({ error: null })\r\n    },\r\n    functions: {\r\n      invoke: vi.fn().mockResolvedValue({ data: null, error: null })\r\n    }\r\n  }\r\n}));\r\n\r\n// Mock IntersectionObserver for testing components that use it\r\nconst intersectionObserverMock = () => ({\r\n  observe: () => null,\r\n  unobserve: () => null,\r\n  disconnect: () => null,\r\n});\r\n\r\nwindow.IntersectionObserver = vi.fn().mockImplementation(intersectionObserverMock);\r\n\r\n// Mock ResizeObserver\r\nwindow.ResizeObserver = vi.fn().mockImplementation(() => ({\r\n  observe: vi.fn(),\r\n  unobserve: vi.fn(),\r\n  disconnect: vi.fn(),\r\n}));\r\n\r\n// Mock matchMedia\r\nObject.defineProperty(window, 'matchMedia', {\r\n  writable: true,\r\n  value: vi.fn().mockImplementation(query => ({\r\n    matches: false,\r\n    media: query,\r\n    onchange: null,\r\n    addListener: vi.fn(),\r\n    removeListener: vi.fn(),\r\n    addEventListener: vi.fn(),\r\n    removeEventListener: vi.fn(),\r\n    dispatchEvent: vi.fn(),\r\n  })),\r\n});\r\n\r\n// Mock scrollTo\r\nwindow.scrollTo = vi.fn();"
}