{
  "originalPath": "src\\components\\AIResearchAssistant.tsx",
  "timestamp": "2025-10-13T18:24:26.450Z",
  "hash": "97534cfb0be757f46c5de584e8a2914d83585d6ddef7e170db6e5e7306ca05f9",
  "size": 8125,
  "content": "import React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { supabase } from '@/lib/supabase';\r\nimport { Search, Sparkles, AlertTriangle, Crown } from 'lucide-react';\r\n\r\ninterface ResearchResult {\r\n  id: string;\r\n  query: string;\r\n  result: string;\r\n  created_at: string;\r\n}\r\n\r\nconst TIER_LIMITS = {\r\n  free: 5,\r\n  basic: 100,\r\n  pro: 500,\r\n  ultimate: 10000\r\n};\r\n\r\nexport default function AIResearchAssistant() {\r\n  const [query, setQuery] = useState('');\r\n  const [results, setResults] = useState<ResearchResult[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [usage, setUsage] = useState<any>(null);\r\n  const [canQuery, setCanQuery] = useState(true);\r\n  const [isAuthenticated, setIsAuthenticated] = useState<boolean | null>(null);\r\n  const [authError, setAuthError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    checkUsageStatus();\r\n    fetchResults();\r\n  }, []);\r\n\r\n  const checkUsageStatus = async () => {\r\n    try {\r\n      const { data: { user } } = await supabase.auth.getUser();\r\n      if (!user) {\r\n        setIsAuthenticated(false);\r\n        setAuthError('Please sign in to use AI Research Assistant');\r\n        setCanQuery(false);\r\n        return;\r\n      }\r\n\r\n      setIsAuthenticated(true);\r\n      setAuthError(null);\r\n\r\n      // Try to get user's subscription tier (with fallback for missing table)\r\n      try {\r\n        const { data: subscription } = await supabase\r\n          .from('subscriptions')\r\n          .select('tier')\r\n          .eq('user_id', user.id)\r\n          .eq('status', 'active')\r\n          .single();\r\n\r\n        const tier = subscription?.tier || 'free';\r\n\r\n        // Try to get usage limits (with fallback for missing table)\r\n        const { data: limits } = await supabase\r\n          .from('usage_limits')\r\n          .select('*')\r\n          .eq('user_id', user.id)\r\n          .single();\r\n\r\n        setUsage({ \r\n          ...limits, \r\n          tier,\r\n          free_queries_remaining: limits?.free_queries_remaining || 5 // Default 5 free queries\r\n        });\r\n        setCanQuery((limits?.free_queries_remaining || 5) > 0);\r\n      } catch (dbError) {\r\n        console.log('Database tables not found, using defaults');\r\n        // Fallback to default usage for new users\r\n        setUsage({ \r\n          tier: 'free', \r\n          free_queries_remaining: 5,\r\n          pro_queries_remaining: 0,\r\n          ultimate_queries_remaining: 0\r\n        });\r\n        setCanQuery(true);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error checking usage:', error);\r\n      setIsAuthenticated(false);\r\n      setAuthError('Unable to check usage status. Please try again.');\r\n      setCanQuery(false);\r\n    }\r\n  };\r\n  const fetchResults = async () => {\r\n    try {\r\n      const { data: { user } } = await supabase.auth.getUser();\r\n      if (!user) return;\r\n\r\n      try {\r\n        const { data } = await supabase\r\n          .from('ai_research_usage')\r\n          .select('*')\r\n          .eq('user_id', user.id)\r\n          .order('created_at', { ascending: false })\r\n          .limit(10);\r\n\r\n        if (data) {\r\n          setResults(data.map(item => ({\r\n            id: item.id,\r\n            query: item.query_text,\r\n            result: item.response_text || 'Processing...',\r\n            created_at: item.created_at\r\n          })));\r\n        }\r\n      } catch (dbError) {\r\n        console.log('Usage history table not found, starting fresh');\r\n        setResults([]);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching results:', error);\r\n    }\r\n  };\r\n\r\n  const handleSearch = async () => {\r\n    if (!query.trim() || !canQuery) return;\r\n    \r\n    setLoading(true);\r\n    try {\r\n      const { data: { user } } = await supabase.auth.getUser();\r\n      if (!user) return;\r\n\r\n      // Call AI research function\r\n      const { data, error } = await supabase.functions.invoke('ai-assistant-chat', {\r\n        body: {\r\n          message: query,\r\n          context: 'research'\r\n        }\r\n      });\r\n\r\n      if (error) throw error;\r\n\r\n      // Track usage\r\n      await supabase\r\n        .from('ai_research_usage')\r\n        .insert({\r\n          user_id: user.id,\r\n          query_text: query,\r\n          response_text: data.response,\r\n          response_tokens: data.tokens || 0,\r\n          cost_usd: data.cost || 0\r\n        });\r\n\r\n      // Decrement usage limit\r\n      await supabase\r\n        .from('usage_limits')\r\n        .update({ \r\n          free_queries_remaining: Math.max(0, (usage?.free_queries_remaining || 1) - 1)\r\n        })\r\n        .eq('user_id', user.id);      // Refresh data\r\n      await checkUsageStatus();\r\n      await fetchResults();\r\n      setQuery('');\r\n\r\n    } catch (error) {\r\n      console.error('Research error:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  if (!usage) {\r\n    return <div className=\"animate-pulse bg-gray-200 h-64 rounded-lg\"></div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <Search className=\"w-5 h-5\" />\r\n            AI Research Assistant\r\n            <Badge className={`${usage.tier === 'ultimate' ? 'bg-gold-500' : 'bg-blue-500'} text-white`}>\r\n              {usage.tier?.charAt(0).toUpperCase() + usage.tier?.slice(1)} Plan\r\n            </Badge>\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent className=\"space-y-4\">\r\n          {!canQuery && (\r\n            <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\r\n              <div className=\"flex items-center gap-2\">\r\n                <AlertTriangle className=\"w-5 h-5 text-red-600\" />\r\n                <p className=\"text-red-800 font-medium\">Query limit reached</p>\r\n              </div>\r\n              <p className=\"text-red-600 text-sm mt-1\">\r\n                Upgrade your plan to continue using AI research\r\n              </p>\r\n              <Button size=\"sm\" className=\"mt-2\">\r\n                <Crown className=\"w-4 h-4 mr-2\" />\r\n                Upgrade Plan\r\n              </Button>\r\n            </div>\r\n          )}\r\n\r\n          <div className=\"flex gap-2\">\r\n            <Textarea\r\n              value={query}\r\n              onChange={(e) => setQuery(e.target.value)}\r\n              onKeyDown={(e) => {\r\n                if (e.key === 'Enter' && !e.shiftKey) {\r\n                  e.preventDefault();\r\n                  if (!loading && query.trim() && canQuery) {\r\n                    handleSearch();\r\n                  }\r\n                }\r\n              }}\r\n              placeholder=\"Ask your research question...\"\r\n              className=\"flex-1\"\r\n              rows={3}\r\n              disabled={!canQuery}\r\n            />\r\n            <Button\r\n              onClick={handleSearch}\r\n              disabled={loading || !query.trim() || !canQuery}\r\n              className=\"self-start\"\r\n            >\r\n              {loading ? (\r\n                <div className=\"w-4 h-4 animate-spin rounded-full border-2 border-white border-t-transparent\" />\r\n              ) : (\r\n                <Sparkles className=\"w-4 h-4\" />\r\n              )}\r\n            </Button>\r\n          </div>\r\n\r\n          {results.length > 0 && (\r\n            <div className=\"space-y-3\">\r\n              <h4 className=\"font-medium\">Recent Research</h4>\r\n              {results.map((result) => (\r\n                <div key={result.id} className=\"bg-gray-50 p-4 rounded-lg\">\r\n                  <div className=\"font-medium text-sm mb-2\">{result.query}</div>\r\n                  <div className=\"text-gray-700 text-sm\">{result.result}</div>\r\n                  <div className=\"text-xs text-gray-500 mt-2\">\r\n                    {new Date(result.created_at).toLocaleDateString()}\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}"
}