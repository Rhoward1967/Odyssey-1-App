{
  "originalPath": "src\\components\\TradingForm.tsx",
  "timestamp": "2025-10-15T16:14:12.722Z",
  "hash": "4ad61fee8773570efcc83102cc40148d7de885884733efcd7386aed0ceb58c9f",
  "size": 11333,
  "content": "import React, { useState } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card';\r\nimport { Button } from './ui/button';\r\nimport { Input } from './ui/input';\r\nimport { Label } from './ui/label';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from './ui/tabs';\r\nimport { Badge } from './ui/badge';\r\nimport { AlertTriangle, TrendingUp, TrendingDown } from 'lucide-react';\r\nimport { supabase } from '@/lib/supabase';\r\nimport { ethers } from 'ethers';\r\nimport { useMetaMaskWallet } from './useMetaMaskWallet';\r\n\r\ninterface Product {\r\n  id: string;\r\n  display_name: string;\r\n  base_currency: string;\r\n  quote_currency: string;\r\n  price: string;\r\n  price_change_24h: string;\r\n}\r\n\r\ninterface TradingFormProps {\r\n  selectedProduct: string;\r\n  onProductChange: (product: string) => void;\r\n  products: Product[];\r\n}\r\n\r\nconst TradingForm: React.FC<TradingFormProps> = ({ \r\n  selectedProduct, \r\n  onProductChange, \r\n  products \r\n}) => {\r\n  const wallet = useMetaMaskWallet();\r\n  // Example: Wrapped XRP (wXRP) contract address on Ethereum mainnet\r\n  const WXRP_ADDRESS = '0x39fBBABf11738317a448031930706cd3e612e1B9';\r\n  const WXRP_ABI = [\r\n    'function transfer(address to, uint256 amount) public returns (bool)'\r\n  ];\r\n\r\n  const [status, setStatus] = useState<string | null>(null);\r\n  const [statusType, setStatusType] = useState<'success' | 'error' | 'info' | null>(null);\r\n\r\n  const handleWeb3Trade = async () => {\r\n    setStatus(null);\r\n    setStatusType(null);\r\n    if (!wallet.connected || !window.ethereum) {\r\n      setStatus('Please connect MetaMask first.');\r\n      setStatusType('error');\r\n      return;\r\n    }\r\n    if (!amount) {\r\n      setStatus('Enter an amount to trade.');\r\n      setStatusType('error');\r\n      return;\r\n    }\r\n    try {\r\n      setStatus('Sending Web3 transaction...');\r\n      setStatusType('info');\r\n      const provider = new ethers.BrowserProvider(window.ethereum);\r\n      const signer = await provider.getSigner();\r\n      const contract = new ethers.Contract(WXRP_ADDRESS, WXRP_ABI, signer);\r\n      // Fetch gas price from env or fallback\r\n      let gasPrice = undefined;\r\n      try {\r\n        const apiKey = import.meta.env.VITE_GAS_API_KEY;\r\n        const res = await fetch(`https://api.blocknative.com/gasprices/blockprices`, {\r\n          headers: { Authorization: apiKey }\r\n        });\r\n        const data = await res.json();\r\n        const gwei = data?.blockPrices?.[0]?.estimatedPrices?.[0]?.price;\r\n        if (gwei) {\r\n          gasPrice = ethers.parseUnits(gwei.toString(), 'gwei');\r\n        }\r\n      } catch {}\r\n      // For demo: send to self (replace with recipient for real trading)\r\n      const tx = await contract.transfer(wallet.address, ethers.parseUnits(amount, 18), { gasPrice });\r\n      setStatus('Transaction sent. Waiting for confirmation...');\r\n      setStatusType('info');\r\n      await tx.wait();\r\n      setStatus('Web3 XRP transfer successful!');\r\n      setStatusType('success');\r\n    } catch (err: any) {\r\n      setStatus('Web3 trade failed: ' + (err.message || err));\r\n      setStatusType('error');\r\n    }\r\n  };\r\n  const [orderType, setOrderType] = useState<'market' | 'limit'>('market');\r\n  const [side, setSide] = useState<'buy' | 'sell'>('buy');\r\n  const [amount, setAmount] = useState('');\r\n  const [price, setPrice] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const currentProduct = products.find(p => p.id === selectedProduct);\r\n  const currentPrice = currentProduct ? parseFloat(currentProduct.price) : 0;\r\n  const estimatedTotal = parseFloat(amount) * (orderType === 'market' ? currentPrice : parseFloat(price) || 0);\r\n\r\n  const handleSubmitOrder = async () => {\r\n    setStatus(null);\r\n    setStatusType(null);\r\n    if (!amount || (orderType === 'limit' && !price)) return;\r\n    setLoading(true);\r\n    try {\r\n      setStatus('Placing order...');\r\n      setStatusType('info');\r\n      const { data, error } = await supabase.functions.invoke('coinbase-trading-engine', {\r\n        body: {\r\n          action: 'placeOrder',\r\n          symbol: selectedProduct,\r\n          side,\r\n          orderType,\r\n          amount,\r\n          ...(orderType === 'limit' && { price })\r\n        }\r\n      });\r\n      if (error) throw error;\r\n      if (data.success) {\r\n        setAmount('');\r\n        setPrice('');\r\n        setStatus('Order placed successfully!');\r\n        setStatusType('success');\r\n      } else {\r\n        setStatus(`Error: ${data.error}`);\r\n        setStatusType('error');\r\n      }\r\n    } catch (error: any) {\r\n      setStatus('Failed to place order: ' + (error.message || error));\r\n      setStatusType('error');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Place Order</CardTitle>\r\n          {/* Wallet connection indicator */}\r\n          <div className=\"mt-2 flex items-center gap-2\">\r\n            <span className={`w-2 h-2 rounded-full ${wallet.connected ? 'bg-green-500' : 'bg-gray-400'}`}></span>\r\n            <span className=\"text-xs text-gray-600\">\r\n              {wallet.connected ? `Wallet Connected: ${wallet.address.slice(0, 6)}...${wallet.address.slice(-4)}` : 'Wallet Not Connected'}\r\n            </span>\r\n          </div>\r\n        </CardHeader>\r\n        <CardContent className=\"space-y-4\">\r\n          {/* Status message */}\r\n          {status && (\r\n            <div className={`rounded px-3 py-2 text-xs mb-2 ${statusType === 'success' ? 'bg-green-100 text-green-700' : statusType === 'error' ? 'bg-red-100 text-red-700' : 'bg-blue-50 text-blue-700'}`}>\r\n              {status}\r\n            </div>\r\n          )}\r\n          <div className=\"space-y-2\">\r\n            <Label>Trading Pair</Label>\r\n            <Select value={selectedProduct} onValueChange={onProductChange}>\r\n              <SelectTrigger>\r\n                <SelectValue />\r\n              </SelectTrigger>\r\n              <SelectContent>\r\n                {products.map((product) => (\r\n                  <SelectItem key={product.id} value={product.id}>\r\n                    {product.display_name}\r\n                  </SelectItem>\r\n                ))}\r\n              </SelectContent>\r\n            </Select>\r\n          </div>\r\n\r\n          <Tabs value={side} onValueChange={(value) => setSide(value as 'buy' | 'sell')}>\r\n            <TabsList className=\"grid w-full grid-cols-2\">\r\n              <TabsTrigger value=\"buy\" className=\"text-green-600\">Buy</TabsTrigger>\r\n              <TabsTrigger value=\"sell\" className=\"text-red-600\">Sell</TabsTrigger>\r\n            </TabsList>\r\n          </Tabs>\r\n\r\n          <Tabs value={orderType} onValueChange={(value) => setOrderType(value as 'market' | 'limit')}>\r\n            <TabsList className=\"grid w-full grid-cols-2\">\r\n              <TabsTrigger value=\"market\">Market</TabsTrigger>\r\n              <TabsTrigger value=\"limit\">Limit</TabsTrigger>\r\n            </TabsList>\r\n          </Tabs>\r\n\r\n          <div className=\"space-y-2\">\r\n            <Label>Amount ({currentProduct?.base_currency})</Label>\r\n            <Input\r\n              type=\"number\"\r\n              placeholder=\"0.00\"\r\n              value={amount}\r\n              onChange={(e) => setAmount(e.target.value)}\r\n            />\r\n          </div>\r\n\r\n          {orderType === 'limit' && (\r\n            <div className=\"space-y-2\">\r\n              <Label>Price ({currentProduct?.quote_currency})</Label>\r\n              <Input\r\n                type=\"number\"\r\n                placeholder={currentPrice.toString()}\r\n                value={price}\r\n                onChange={(e) => setPrice(e.target.value)}\r\n              />\r\n            </div>\r\n          )}\r\n\r\n          {currentProduct && (\r\n            <div className=\"p-3 bg-gray-50 rounded-lg space-y-2\">\r\n              <div className=\"flex justify-between text-sm\">\r\n                <span>Current Price:</span>\r\n                <span className=\"font-medium\">${currentPrice.toLocaleString()}</span>\r\n              </div>\r\n              <div className=\"flex justify-between text-sm\">\r\n                <span>Estimated Total:</span>\r\n                <span className=\"font-medium\">${estimatedTotal.toLocaleString()}</span>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          <Button \r\n            onClick={handleSubmitOrder}\r\n            disabled={loading || !amount || (orderType === 'limit' && !price)}\r\n            className={`w-full ${side === 'buy' ? 'bg-green-600 hover:bg-green-700' : 'bg-red-600 hover:bg-red-700'}`}\r\n          >\r\n            {loading ? 'Placing Order...' : `${side.toUpperCase()} ${currentProduct?.base_currency}`}\r\n          </Button>\r\n          {/* Web3 XRP transfer button, only for XRP or wXRP trading pair */}\r\n          {currentProduct?.base_currency.toUpperCase() === 'XRP' && (\r\n            <Button \r\n              onClick={handleWeb3Trade}\r\n              variant=\"outline\"\r\n              className=\"w-full mt-2 border-blue-500 text-blue-700\"\r\n              disabled={!wallet.connected}\r\n            >\r\n              {wallet.connected ? 'Web3 Trade (MetaMask XRP)' : 'Connect MetaMask for Web3 Trade'}\r\n            </Button>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Order Book</CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"space-y-4\">\r\n            <div>\r\n              <h4 className=\"font-medium text-red-600 mb-2\">Asks (Sell Orders)</h4>\r\n              <div className=\"space-y-1\">\r\n                {[...Array(5)].map((_, i) => (\r\n                  <div key={i} className=\"flex justify-between text-sm\">\r\n                    <span className=\"text-red-600\">${(currentPrice + (i + 1) * 10).toLocaleString()}</span>\r\n                    <span>{(Math.random() * 2).toFixed(4)}</span>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"border-t pt-4\">\r\n              <div className=\"text-center py-2 bg-gray-100 rounded\">\r\n                <span className=\"font-medium\">${currentPrice.toLocaleString()}</span>\r\n                <Badge variant=\"outline\" className=\"ml-2\">\r\n                  {currentProduct?.price_change_24h ? (\r\n                    parseFloat(currentProduct.price_change_24h) > 0 ? (\r\n                      <TrendingUp className=\"w-3 h-3 text-green-600\" />\r\n                    ) : (\r\n                      <TrendingDown className=\"w-3 h-3 text-red-600\" />\r\n                    )\r\n                  ) : null}\r\n                </Badge>\r\n              </div>\r\n            </div>\r\n\r\n            <div>\r\n              <h4 className=\"font-medium text-green-600 mb-2\">Bids (Buy Orders)</h4>\r\n              <div className=\"space-y-1\">\r\n                {[...Array(5)].map((_, i) => (\r\n                  <div key={i} className=\"flex justify-between text-sm\">\r\n                    <span className=\"text-green-600\">${(currentPrice - (i + 1) * 10).toLocaleString()}</span>\r\n                    <span>{(Math.random() * 2).toFixed(4)}</span>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TradingForm;"
}