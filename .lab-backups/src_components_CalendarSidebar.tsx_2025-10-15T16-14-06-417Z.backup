{
  "originalPath": "src\\components\\CalendarSidebar.tsx",
  "timestamp": "2025-10-15T16:14:06.417Z",
  "hash": "22dba49a2783049f4bc135e68dff61d09406b308895868fcf4dbe4adb857f57d",
  "size": 5086,
  "content": "import React, { useState } from 'react';\r\nimport { ChevronLeft, ChevronRight, Calendar } from 'lucide-react';\r\nimport { Button } from './ui/button';\r\nimport { Badge } from './ui/badge';\r\n\r\ninterface CalendarSidebarProps {\r\n  onDateSelect?: (date: Date) => void;\r\n}\r\n\r\nconst CalendarSidebar: React.FC<CalendarSidebarProps> = ({ onDateSelect }) => {\r\n  const [currentDate, setCurrentDate] = useState(new Date());\r\n  const [selectedDate, setSelectedDate] = useState<Date | null>(null);\r\n\r\n  const monthNames = [\r\n    'January',\r\n    'February',\r\n    'March',\r\n    'April',\r\n    'May',\r\n    'June',\r\n    'July',\r\n    'August',\r\n    'September',\r\n    'October',\r\n    'November',\r\n    'December',\r\n  ];\r\n\r\n  const getDaysInMonth = (date: Date) => {\r\n    const year = date.getFullYear();\r\n    const month = date.getMonth();\r\n    const firstDay = new Date(year, month, 1);\r\n    const lastDay = new Date(year, month + 1, 0);\r\n    const daysInMonth = lastDay.getDate();\r\n    const startingDayOfWeek = firstDay.getDay();\r\n\r\n    const days = [];\r\n\r\n    // Add empty cells for days before the first day of the month\r\n    for (let i = 0; i < startingDayOfWeek; i++) {\r\n      days.push(null);\r\n    }\r\n\r\n    // Add all days of the month\r\n    for (let day = 1; day <= daysInMonth; day++) {\r\n      days.push(new Date(year, month, day));\r\n    }\r\n\r\n    return days;\r\n  };\r\n\r\n  const navigateMonth = (direction: number) => {\r\n    const newDate = new Date(currentDate);\r\n    newDate.setMonth(currentDate.getMonth() + direction);\r\n    setCurrentDate(newDate);\r\n  };\r\n\r\n  const handleDateClick = (date: Date) => {\r\n    setSelectedDate(date);\r\n    onDateSelect?.(date);\r\n  };\r\n\r\n  const days = getDaysInMonth(currentDate);\r\n  const dayNames = ['S', 'M', 'T', 'W', 'T', 'F', 'S'];\r\n  const today = new Date();\r\n\r\n  return (\r\n    <div className='h-full bg-gradient-to-br from-slate-900 via-blue-900 to-indigo-900 p-4'>\r\n      <div className='mb-4'>\r\n        <div className='flex items-center justify-between mb-4'>\r\n          <h3 className='font-semibold flex items-center gap-2'>\r\n            <Calendar className='w-4 h-4' />\r\n            30-Day Calendar\r\n          </h3>\r\n        </div>\r\n\r\n        <div className='flex items-center justify-between mb-3'>\r\n          <Button variant='ghost' size='sm' onClick={() => navigateMonth(-1)}>\r\n            <ChevronLeft className='h-4 w-4' />\r\n          </Button>\r\n          <span className='text-sm font-medium'>\r\n            {monthNames[currentDate.getMonth()]} {currentDate.getFullYear()}\r\n          </span>\r\n          <Button variant='ghost' size='sm' onClick={() => navigateMonth(1)}>\r\n            <ChevronRight className='h-4 w-4' />\r\n          </Button>\r\n        </div>\r\n\r\n        <div className='grid grid-cols-7 gap-1'>\r\n          {/* Day headers */}\r\n          {dayNames.map(day => (\r\n            <div\r\n              key={day}\r\n              className='text-center text-xs font-medium text-gray-500 p-1'\r\n            >\r\n              {day}\r\n            </div>\r\n          ))}\r\n\r\n          {/* Calendar days */}\r\n          {days.map((day, index) => {\r\n            const isToday =\r\n              day &&\r\n              day.getDate() === today.getDate() &&\r\n              day.getMonth() === today.getMonth() &&\r\n              day.getFullYear() === today.getFullYear();\r\n\r\n            const isSelected =\r\n              day &&\r\n              selectedDate &&\r\n              day.getDate() === selectedDate.getDate() &&\r\n              day.getMonth() === selectedDate.getMonth() &&\r\n              day.getFullYear() === selectedDate.getFullYear();\r\n\r\n            return (\r\n              <div\r\n                key={index}\r\n                className={`\r\n                  aspect-square flex items-center justify-center text-sm rounded cursor-pointer\r\n                  ${!day ? '' : 'hover:bg-gray-100'}\r\n                  ${isToday ? 'bg-blue-500 text-white hover:bg-blue-600' : ''}\r\n                  ${isSelected && !isToday ? 'bg-gray-200' : ''}\r\n                `}\r\n                onClick={() => day && handleDateClick(day)}\r\n              >\r\n                {day?.getDate()}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Quick Stats */}\r\n      <div className='mt-6 space-y-2'>\r\n        <div className='text-sm font-medium mb-2'>Today's Schedule</div>\r\n        <div className='space-y-1'>\r\n          <div className='flex justify-between text-xs'>\r\n            <span>Active Jobs</span>\r\n            <Badge variant='default' className='h-5'>\r\n              12\r\n            </Badge>\r\n          </div>\r\n          <div className='flex justify-between text-xs'>\r\n            <span>Employees On Duty</span>\r\n            <Badge variant='secondary' className='h-5'>\r\n              8\r\n            </Badge>\r\n          </div>\r\n          <div className='flex justify-between text-xs'>\r\n            <span>Emergency Calls</span>\r\n            <Badge variant='destructive' className='h-5'>\r\n              2\r\n            </Badge>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CalendarSidebar;\r\n"
}