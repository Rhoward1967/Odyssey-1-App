{
  "originalPath": "src\\components\\AIResearchPaywall.tsx",
  "timestamp": "2025-10-15T16:14:05.902Z",
  "hash": "5ac5e3e9107a02e467c57f364fa76357798a883bfa2f074f61d93759df4bcfde",
  "size": 4241,
  "content": "\r\nimport React, { useState } from 'react';\r\nimport { useStripe, useElements, CardElement } from '@stripe/react-stripe-js';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\r\nimport { useAuth } from './AuthProvider';\r\n\r\n// Standalone CheckoutForm for Stripe Elements\r\nconst CheckoutForm: React.FC = () => {\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [processing, setProcessing] = useState(false);\r\n  const [succeeded, setSucceeded] = useState(false);\r\n\r\n  const handleSubmit = async (event: React.FormEvent) => {\r\n    event.preventDefault();\r\n    setProcessing(true);\r\n\r\n    if (!stripe || !elements) {\r\n      setProcessing(false);\r\n      return;\r\n    }\r\n\r\n    const cardElement = elements.getElement(CardElement);\r\n    if (!cardElement) {\r\n      setError('Card element not found.');\r\n      setProcessing(false);\r\n      return;\r\n    }\r\n\r\n    // Create a PaymentIntent on the server and get the clientSecret.\r\n    const response = await fetch('/functions/v1/create-payment-intent', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ items: [{ id: 'ai-research-access' }] }), // Example payload\r\n    });\r\n\r\n    if (!response.ok) {\r\n      setError('Failed to create payment intent.');\r\n      setProcessing(false);\r\n      return;\r\n    }\r\n\r\n    const { clientSecret } = await response.json();\r\n\r\n    if (!clientSecret) {\r\n      setError('Invalid client secret received from server.');\r\n      setProcessing(false);\r\n      return;\r\n    }\r\n\r\n    const { error: stripeError, paymentIntent } = await stripe.confirmCardPayment(clientSecret, {\r\n      payment_method: {\r\n        card: cardElement,\r\n      },\r\n    });\r\n\r\n    if (stripeError) {\r\n      setError(stripeError.message ?? 'An unexpected error occurred.');\r\n      setSucceeded(false);\r\n    } else if (paymentIntent?.status === 'succeeded') {\r\n      setError(null);\r\n      setSucceeded(true);\r\n      // TODO: Call a Supabase function to update user's subscription status.\r\n    }\r\n\r\n    setProcessing(false);\r\n  };\r\n\r\n  const cardElementOptions = {\r\n    style: {\r\n      base: {\r\n        color: '#ffffff',\r\n        fontFamily: '\"Helvetica Neue\", Helvetica, sans-serif',\r\n        fontSmoothing: 'antialiased',\r\n        fontSize: '16px',\r\n        '::placeholder': {\r\n          color: '#aab7c4',\r\n        },\r\n      },\r\n      invalid: {\r\n        color: '#fa755a',\r\n        iconColor: '#fa755a',\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className=\"space-y-4\">\r\n      <div className=\"p-4 bg-gray-800 rounded-md\">\r\n        <CardElement options={cardElementOptions} />\r\n      </div>\r\n      <Button\r\n        type=\"submit\"\r\n        disabled={!stripe || processing || succeeded}\r\n        className=\"w-full\"\r\n      >\r\n        {processing ? 'Processing...' : succeeded ? 'Payment Successful' : 'Pay Now'}\r\n      </Button>\r\n      {error && <div className=\"text-red-500 text-sm mt-2\">{error}</div>}\r\n      {succeeded && <div className=\"text-green-500 text-sm mt-2\">Payment successful! You now have access to AI Research features.</div>}\r\n    </form>\r\n  );\r\n};\r\n\r\nconst AIResearchPaywall: React.FC = () => {\r\n  const { user } = useAuth();\r\n\r\n  if (!user) {\r\n    return (\r\n      <Card className=\"w-full max-w-md mx-auto bg-gray-900 text-white border-gray-700\">\r\n        <CardHeader>\r\n          <CardTitle>Authentication Required</CardTitle>\r\n          <CardDescription>Please sign in to access AI Research features.</CardDescription>\r\n        </CardHeader>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex justify-center items-center h-full p-4\">\r\n      <Card className=\"w-full max-w-md bg-gray-900 text-white border-gray-700\">\r\n        <CardHeader>\r\n          <CardTitle className=\"text-2xl\">Unlock AI Research</CardTitle>\r\n          <CardDescription>\r\n            Gain unlimited access to our powerful AI research assistant for just $10/month.\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <CheckoutForm />\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\n"
}