{
  "originalPath": "src\\components\\CostController.tsx",
  "timestamp": "2025-10-13T18:26:52.444Z",
  "hash": "91b5d6651f48164f6bfbb52440b5772992d8689e7b1bf353adf2b6d2c30679e6",
  "size": 4965,
  "content": "import { Alert, AlertDescription } from '@/components/ui/alert';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Progress } from '@/components/ui/progress';\r\nimport { AlertTriangle, DollarSign, Trash2, Zap } from 'lucide-react';\r\nimport { useEffect, useState } from 'react';\r\nimport { supabase } from '../lib/supabase';\r\n\r\nexport function CostController() {\r\n  const [costs, setCosts] = useState({\r\n    apiCalls: 0,\r\n    dbQueries: 0,\r\n    storage: 0,\r\n    bandwidth: 0,\r\n    functions: 0\r\n  });\r\n  const [monthlyBudget, setMonthlyBudget] = useState(0);\r\n  const [currentSpend, setCurrentSpend] = useState(0);\r\n  const [utilization, setUtilization] = useState(0);\r\n  const [budgetAlert, setBudgetAlert] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const fetchCosts = async () => {\r\n      const { data, error } = await supabase.functions.invoke('cost-optimization-engine', {\r\n        body: { action: 'get_real_time_costs' }\r\n      });\r\n      if (error || !data) return;\r\n      setCosts({\r\n        apiCalls: data.functionCalls || 0,\r\n        dbQueries: 0, // Not provided by backend, set to 0 or extend backend\r\n        storage: data.storageUsage || 0,\r\n        bandwidth: 0, // Not provided by backend, set to 0 or extend backend\r\n        functions: data.functionCalls || 0\r\n      });\r\n      setMonthlyBudget(data.monthlyBudget || 0);\r\n      setCurrentSpend(data.totalSpent || 0);\r\n      const util = data.monthlyBudget ? (data.totalSpent / data.monthlyBudget) * 100 : 0;\r\n      setUtilization(util);\r\n      setBudgetAlert(util > 75);\r\n    };\r\n    fetchCosts();\r\n  }, []);\r\n\r\n  const resetApp = () => {\r\n    if (confirm('Reset app data to save costs? This will clear cache and optimize resources.')) {\r\n      // Optionally, call a backend function to reset/optimize resources\r\n      setCosts(prev => ({ ...prev, apiCalls: 0, dbQueries: 0 }));\r\n    }\r\n  };\r\n\r\n  const optimizeResources = async () => {\r\n    // Call backend to optimize API calls\r\n    await supabase.functions.invoke('cost-optimization-engine', {\r\n      body: { action: 'optimize_api_calls' }\r\n    });\r\n    // Optionally, refresh costs after optimization\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <DollarSign className=\"h-5 w-5\" />\r\n            Cost Controller Dashboard\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent className=\"space-y-4\">\r\n          {budgetAlert && (\r\n            <Alert>\r\n              <AlertTriangle className=\"h-4 w-4\" />\r\n              <AlertDescription>\r\n                Budget utilization at {utilization.toFixed(1)}% - Consider optimization\r\n              </AlertDescription>\r\n            </Alert>\r\n          )}\r\n\r\n          <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4\">\r\n            <div className=\"text-center\">\r\n              <div className=\"text-2xl font-bold text-blue-600\">{costs.apiCalls}</div>\r\n              <div className=\"text-sm text-gray-600\">API Calls</div>\r\n            </div>\r\n            <div className=\"text-center\">\r\n              <div className=\"text-2xl font-bold text-green-600\">{costs.dbQueries}</div>\r\n              <div className=\"text-sm text-gray-600\">DB Queries</div>\r\n            </div>\r\n            <div className=\"text-center\">\r\n              <div className=\"text-2xl font-bold text-purple-600\">{costs.storage}GB</div>\r\n              <div className=\"text-sm text-gray-600\">Storage</div>\r\n            </div>\r\n            <div className=\"text-center\">\r\n              <div className=\"text-2xl font-bold text-orange-600\">{costs.bandwidth}GB</div>\r\n              <div className=\"text-sm text-gray-600\">Bandwidth</div>\r\n            </div>\r\n            <div className=\"text-center\">\r\n              <div className=\"text-2xl font-bold text-red-600\">{costs.functions}</div>\r\n              <div className=\"text-sm text-gray-600\">Functions</div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"space-y-2\">\r\n            <div className=\"flex justify-between\">\r\n              <span>Monthly Budget Usage</span>\r\n              <Badge variant={utilization > 75 ? \"destructive\" : \"default\"}>\r\n                ${currentSpend.toFixed(2)} / ${monthlyBudget.toFixed(2)}\r\n              </Badge>\r\n            </div>\r\n            <Progress value={utilization} className=\"h-2\" />\r\n          </div>\r\n\r\n          <div className=\"flex gap-2\">\r\n            <Button onClick={optimizeResources} variant=\"outline\" size=\"sm\">\r\n              <Zap className=\"h-4 w-4 mr-1\" />\r\n              Optimize\r\n            </Button>\r\n            <Button onClick={resetApp} variant=\"outline\" size=\"sm\">\r\n              <Trash2 className=\"h-4 w-4 mr-1\" />\r\n              Reset App\r\n            </Button>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}"
}