{
  "originalPath": "src\\components\\RealAPIIntegration.tsx",
  "timestamp": "2025-09-24T20:34:54.916Z",
  "hash": "8c112a9653e2ff84999b68c45d262fe649b1217d432c8dc5fd0b9e60965cde8a",
  "size": 6905,
  "content": "import React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Alert, AlertDescription } from '@/components/ui/alert';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Key, CheckCircle, AlertCircle, RefreshCw } from 'lucide-react';\r\n\r\ninterface APIConfig {\r\n  name: string;\r\n  key: string;\r\n  status: 'connected' | 'disconnected' | 'testing';\r\n  lastUsed?: Date;\r\n  monthlySpent?: number;\r\n  requestCount?: number;\r\n}\r\n\r\nexport default function RealAPIIntegration() {\r\n  const [apis, setApis] = useState<APIConfig[]>([\r\n    { name: 'OpenAI', key: '', status: 'disconnected' },\r\n    { name: 'Anthropic', key: '', status: 'disconnected' },\r\n    { name: 'HuggingFace', key: '', status: 'disconnected' },\r\n    { name: 'Replicate', key: '', status: 'disconnected' }\r\n  ]);\r\n  const [isTestingConnection, setIsTestingConnection] = useState<string | null>(null);\r\n\r\n  const updateAPIKey = (apiName: string, newKey: string) => {\r\n    setApis(prev => prev.map(api => \r\n      api.name === apiName \r\n        ? { ...api, key: newKey, status: newKey ? 'disconnected' : 'disconnected' }\r\n        : api\r\n    ));\r\n  };\r\n\r\n  const testConnection = async (apiName: string) => {\r\n    setIsTestingConnection(apiName);\r\n\r\n    // TODO: Replace with real backend call for usage/cost data\r\n    // For now, set status to connected and usage/cost to 'Not available'\r\n    await new Promise(resolve => setTimeout(resolve, 2000));\r\n\r\n    setApis(prev => prev.map(api =>\r\n      api.name === apiName\r\n        ? {\r\n            ...api,\r\n            status: 'connected',\r\n            lastUsed: new Date(),\r\n            monthlySpent: undefined, // Not available\r\n            requestCount: undefined  // Not available\r\n          }\r\n        : api\r\n    ));\r\n\r\n    setIsTestingConnection(null);\r\n  };\r\n\r\n  const getStatusIcon = (status: string) => {\r\n    switch (status) {\r\n      case 'connected': return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\r\n      case 'testing': return <RefreshCw className=\"h-4 w-4 text-blue-500 animate-spin\" />;\r\n      default: return <AlertCircle className=\"h-4 w-4 text-red-500\" />;\r\n    }\r\n  };\r\n\r\n  const getStatusBadge = (status: string) => {\r\n    switch (status) {\r\n      case 'connected': return <Badge variant=\"default\" className=\"bg-green-100 text-green-800\">Connected</Badge>;\r\n      case 'testing': return <Badge variant=\"secondary\">Testing...</Badge>;\r\n      default: return <Badge variant=\"destructive\">Disconnected</Badge>;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <div className=\"flex items-center gap-2\">\r\n        <Key className=\"h-6 w-6\" />\r\n        <h2 className=\"text-2xl font-bold\">API Key Management</h2>\r\n      </div>\r\n\r\n      <Alert>\r\n        <AlertCircle className=\"h-4 w-4\" />\r\n        <AlertDescription>\r\n          Connect your API keys to enable real-time cost tracking and usage monitoring. \r\n          Keys are stored securely and only used for billing data retrieval.\r\n        </AlertDescription>\r\n      </Alert>\r\n\r\n      <div className=\"grid gap-4\">\r\n        {apis.map((api) => (\r\n          <Card key={api.name}>\r\n            <CardHeader>\r\n              <div className=\"flex items-center justify-between\">\r\n                <CardTitle className=\"flex items-center gap-2\">\r\n                  {getStatusIcon(api.status)}\r\n                  {api.name} API\r\n                </CardTitle>\r\n                {getStatusBadge(api.status)}\r\n              </div>\r\n            </CardHeader>\r\n            <CardContent className=\"space-y-4\">\r\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n                <div className=\"md:col-span-2\">\r\n                  <Label htmlFor={`${api.name}-key`}>API Key</Label>\r\n                  <Input\r\n                    id={`${api.name}-key`}\r\n                    type=\"password\"\r\n                    placeholder={`Enter your ${api.name} API key`}\r\n                    value={api.key}\r\n                    onChange={(e) => updateAPIKey(api.name, e.target.value)}\r\n                  />\r\n                </div>\r\n                <div className=\"flex items-end\">\r\n                  <Button \r\n                    onClick={() => testConnection(api.name)}\r\n                    disabled={!api.key || isTestingConnection === api.name}\r\n                    className=\"w-full\"\r\n                  >\r\n                    {isTestingConnection === api.name ? (\r\n                      <>\r\n                        <RefreshCw className=\"h-4 w-4 mr-2 animate-spin\" />\r\n                        Testing...\r\n                      </>\r\n                    ) : (\r\n                      'Test Connection'\r\n                    )}\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n\r\n              {api.status === 'connected' && (\r\n                <div className=\"grid grid-cols-3 gap-4 pt-4 border-t\">\r\n                  <div>\r\n                    <p className=\"text-sm text-muted-foreground\">Monthly Spent</p>\r\n                    <p className=\"text-lg font-semibold\">\r\n                      {typeof api.monthlySpent === 'number' ? `$${api.monthlySpent.toFixed(2)}` : 'Not available'}\r\n                    </p>\r\n                  </div>\r\n                  <div>\r\n                    <p className=\"text-sm text-muted-foreground\">Requests</p>\r\n                    <p className=\"text-lg font-semibold\">\r\n                      {typeof api.requestCount === 'number' ? api.requestCount.toLocaleString() : 'Not available'}\r\n                    </p>\r\n                  </div>\r\n                  <div>\r\n                    <p className=\"text-sm text-muted-foreground\">Last Used</p>\r\n                    <p className=\"text-lg font-semibold\">\r\n                      {api.lastUsed?.toLocaleDateString()}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        ))}\r\n      </div>\r\n\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Integration Status</CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"space-y-2\">\r\n            <div className=\"flex justify-between\">\r\n              <span>Connected APIs:</span>\r\n              <span className=\"font-semibold\">\r\n                {apis.filter(api => api.status === 'connected').length} / {apis.length}\r\n              </span>\r\n            </div>\r\n            <div className=\"flex justify-between\">\r\n              <span>Total Monthly Cost:</span>\r\n              <span className=\"font-semibold\">\r\n                ${apis.reduce((sum, api) => sum + (api.monthlySpent || 0), 0).toFixed(2)}\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}"
}