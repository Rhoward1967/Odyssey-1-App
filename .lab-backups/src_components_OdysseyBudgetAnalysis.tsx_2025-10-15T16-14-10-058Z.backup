{
  "originalPath": "src\\components\\OdysseyBudgetAnalysis.tsx",
  "timestamp": "2025-10-15T16:14:10.058Z",
  "hash": "8c0d0c53e0a003cef5bfc086c227a0b8b2c0f687cc70fcf62659d5e818c6f0af",
  "size": 10598,
  "content": "import React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card';\r\nimport { Badge } from './ui/badge';\r\nimport { Button } from './ui/button';\r\nimport { Progress } from './ui/progress';\r\nimport {\r\n  AlertTriangle,\r\n  TrendingUp,\r\n  DollarSign,\r\n  Target,\r\n  CheckCircle,\r\n  XCircle,\r\n} from 'lucide-react';\r\n\r\ninterface BudgetComparison {\r\n  category: string;\r\n  currentPlan: number;\r\n  odysseyPlan: number;\r\n  variance: number;\r\n  status: 'critical' | 'warning' | 'good';\r\n  recommendation: string;\r\n}\r\n\r\nexport function OdysseyBudgetAnalysis() {\r\n  const [comparisons, setComparisons] = useState<BudgetComparison[]>([]);\r\n  const [totalVariance, setTotalVariance] = useState(0);\r\n  const [sustainabilityScore, setSustainabilityScore] = useState<number>(0);\r\n\r\n  useEffect(() => {\r\n    generateAnalysis();\r\n  }, []);\r\n\r\n  const generateAnalysis = () => {\r\n    const budgetData: BudgetComparison[] = [\r\n      {\r\n        category: 'API & Cloud Services',\r\n        currentPlan: 2500,\r\n        odysseyPlan: 1800,\r\n        variance: -700,\r\n        status: 'good',\r\n        recommendation: 'Optimize API calls, implement caching',\r\n      },\r\n      {\r\n        category: 'Database Operations',\r\n        currentPlan: 1200,\r\n        odysseyPlan: 800,\r\n        variance: -400,\r\n        status: 'good',\r\n        recommendation: 'Use query optimization, connection pooling',\r\n      },\r\n      {\r\n        category: 'Storage & Bandwidth',\r\n        currentPlan: 800,\r\n        odysseyPlan: 600,\r\n        variance: -200,\r\n        status: 'good',\r\n        recommendation: 'Implement CDN, compress assets',\r\n      },\r\n      {\r\n        category: 'Development Tools',\r\n        currentPlan: 1500,\r\n        odysseyPlan: 2200,\r\n        variance: 700,\r\n        status: 'warning',\r\n        recommendation: 'Invest in automation tools for long-term savings',\r\n      },\r\n      {\r\n        category: 'Marketing & Growth',\r\n        currentPlan: 2000,\r\n        odysseyPlan: 1500,\r\n        variance: -500,\r\n        status: 'good',\r\n        recommendation: 'Focus on organic growth, referral programs',\r\n      },\r\n      {\r\n        category: 'Support & Maintenance',\r\n        currentPlan: 1000,\r\n        odysseyPlan: 1200,\r\n        variance: 200,\r\n        status: 'warning',\r\n        recommendation: 'Preventive maintenance reduces long-term costs',\r\n      },\r\n      {\r\n        category: 'Revenue Generation',\r\n        currentPlan: -3000,\r\n        odysseyPlan: -5000,\r\n        variance: -2000,\r\n        status: 'good',\r\n        recommendation: 'Self-sustaining model generates more revenue',\r\n      },\r\n    ];\r\n\r\n    setComparisons(budgetData);\r\n\r\n    const variance = budgetData.reduce((sum, item) => sum + item.variance, 0);\r\n    setTotalVariance(variance);\r\n\r\n    // Calculate sustainability score based on revenue vs costs\r\n    const totalCosts = budgetData\r\n      .filter(item => item.variance > 0)\r\n      .reduce((sum, item) => sum + Math.abs(item.currentPlan), 0);\r\n    const totalRevenue = Math.abs(\r\n      budgetData.find(item => item.category === 'Revenue Generation')\r\n        ?.odysseyPlan || 0\r\n    );\r\n    let score = 0;\r\n    if (totalCosts > 0) {\r\n      score = Math.min(100, (totalRevenue / totalCosts) * 100);\r\n    }\r\n    setSustainabilityScore(score);\r\n  };\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'critical':\r\n        return 'bg-red-100 text-red-800 border-red-200';\r\n      case 'warning':\r\n        return 'bg-yellow-100 text-yellow-800 border-yellow-200';\r\n      case 'good':\r\n        return 'bg-green-100 text-green-800 border-green-200';\r\n      default:\r\n        return 'bg-gray-100 text-gray-800 border-gray-200';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='space-y-6'>\r\n      {/* Critical Analysis Header */}\r\n      <Card className='border-2 border-red-500 bg-red-50'>\r\n        <CardHeader>\r\n          <div className='flex items-center gap-2'>\r\n            <AlertTriangle className='h-6 w-6 text-red-600' />\r\n            <CardTitle className='text-red-800'>\r\n              CRITICAL: Budget vs Self-Sustaining Analysis\r\n            </CardTitle>\r\n          </div>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className='grid md:grid-cols-3 gap-4'>\r\n            <div className='text-center'>\r\n              <div className='text-2xl font-bold text-red-600'>\r\n                ${Math.abs(totalVariance).toLocaleString()}\r\n              </div>\r\n              <p className='text-sm text-red-700'>\r\n                {totalVariance < 0 ? 'Annual Savings' : 'Additional Investment'}\r\n              </p>\r\n            </div>\r\n            <div className='text-center'>\r\n              <div className='text-2xl font-bold text-blue-600'>\r\n                {typeof sustainabilityScore === 'number' &&\r\n                !isNaN(sustainabilityScore)\r\n                  ? sustainabilityScore.toFixed(1)\r\n                  : '0.0'}\r\n                %\r\n              </div>\r\n              <p className='text-sm text-blue-700'>Sustainability Score</p>\r\n            </div>\r\n            <div className='text-center'>\r\n              <div\r\n                className={`text-2xl font-bold ${sustainabilityScore > 80 ? 'text-green-600' : 'text-red-600'}`}\r\n              >\r\n                {sustainabilityScore > 80 ? 'VIABLE' : 'AT RISK'}\r\n              </div>\r\n              <p className='text-sm text-gray-600'>Project Status</p>\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Detailed Comparison */}\r\n      <div className='grid gap-4'>\r\n        {comparisons.map((item, index) => (\r\n          <Card\r\n            key={index}\r\n            className={`border-l-4 ${\r\n              item.status === 'critical'\r\n                ? 'border-l-red-500'\r\n                : item.status === 'warning'\r\n                  ? 'border-l-yellow-500'\r\n                  : 'border-l-green-500'\r\n            }`}\r\n          >\r\n            <CardContent className='pt-4'>\r\n              <div className='flex justify-between items-start mb-3'>\r\n                <div>\r\n                  <h3 className='font-semibold text-lg'>{item.category}</h3>\r\n                  <p className='text-sm text-gray-600'>{item.recommendation}</p>\r\n                </div>\r\n                <Badge className={getStatusColor(item.status)}>\r\n                  {item.variance < 0 ? 'SAVES' : 'COSTS'} $\r\n                  {Math.abs(item.variance)}\r\n                </Badge>\r\n              </div>\r\n\r\n              <div className='grid md:grid-cols-3 gap-4 text-sm'>\r\n                <div>\r\n                  <p className='text-gray-500'>Current Plan</p>\r\n                  <p className='font-semibold'>\r\n                    ${item.currentPlan.toLocaleString()}\r\n                  </p>\r\n                </div>\r\n                <div>\r\n                  <p className='text-gray-500'>ODYSSEY-1 Plan</p>\r\n                  <p className='font-semibold'>\r\n                    ${item.odysseyPlan.toLocaleString()}\r\n                  </p>\r\n                </div>\r\n                <div>\r\n                  <p className='text-gray-500'>Impact</p>\r\n                  <div className='flex items-center gap-1'>\r\n                    {item.variance < 0 ? (\r\n                      <CheckCircle className='h-4 w-4 text-green-500' />\r\n                    ) : (\r\n                      <XCircle className='h-4 w-4 text-red-500' />\r\n                    )}\r\n                    <span\r\n                      className={\r\n                        item.variance < 0 ? 'text-green-600' : 'text-red-600'\r\n                      }\r\n                    >\r\n                      {item.variance < 0 ? '-' : '+'}${Math.abs(item.variance)}\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        ))}\r\n      </div>\r\n\r\n      {/* Action Plan */}\r\n      <Card className='border-2 border-blue-500'>\r\n        <CardHeader>\r\n          <CardTitle className='flex items-center gap-2'>\r\n            <Target className='h-5 w-5 text-blue-600' />\r\n            Survival Action Plan\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className='space-y-4'>\r\n            <div className='bg-blue-50 p-4 rounded-lg'>\r\n              <h4 className='font-semibold mb-2'>\r\n                Immediate Actions (Next 30 Days)\r\n              </h4>\r\n              <ul className='text-sm space-y-1'>\r\n                <li>• Implement API call optimization and caching</li>\r\n                <li>• Set up automated cost monitoring alerts</li>\r\n                <li>• Review and optimize database queries</li>\r\n                <li>• Establish revenue generation milestones</li>\r\n              </ul>\r\n            </div>\r\n\r\n            <div className='bg-green-50 p-4 rounded-lg'>\r\n              <h4 className='font-semibold mb-2'>\r\n                Long-term Strategy (90+ Days)\r\n              </h4>\r\n              <ul className='text-sm space-y-1'>\r\n                <li>• Transition to self-sustaining revenue model</li>\r\n                <li>• Implement automated scaling and cost optimization</li>\r\n                <li>• Build strategic partnerships for cost sharing</li>\r\n                <li>• Develop multiple revenue streams</li>\r\n              </ul>\r\n            </div>\r\n\r\n            <div className='flex gap-4 pt-4'>\r\n              <Button\r\n                className='flex-1 bg-green-600 hover:bg-green-700 text-white font-semibold py-3 px-6 rounded-lg transition-all duration-200 shadow-lg hover:shadow-xl transform hover:scale-105'\r\n                onClick={() => {\r\n                  alert(\r\n                    'ODYSSEY-1 Plan implementation initiated! You will receive detailed implementation steps via email.'\r\n                  );\r\n                }}\r\n              >\r\n                <CheckCircle className='h-4 w-4 mr-2' />\r\n                Implement ODYSSEY-1 Plan\r\n              </Button>\r\n              <Button\r\n                variant='outline'\r\n                className='flex-1 border-2 border-blue-500 text-blue-600 hover:bg-blue-50 font-semibold py-3 px-6 rounded-lg transition-all duration-200'\r\n                onClick={() => {\r\n                  alert(\r\n                    'Review meeting scheduled for next business day. Calendar invite will be sent shortly.'\r\n                  );\r\n                }}\r\n              >\r\n                <Target className='h-4 w-4 mr-2' />\r\n                Schedule Review Meeting\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n"
}