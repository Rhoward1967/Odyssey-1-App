{
  "originalPath": "src\\components\\DatabaseManager.tsx",
  "timestamp": "2025-09-24T20:06:53.629Z",
  "hash": "ddee82e31f6a233445f4af9f07aba2aa59e1d3e2bcb7a89d7ee713f505f6a167",
  "size": 11309,
  "content": "import React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\nimport { Database, Table, Plus, Settings, AlertCircle, CheckCircle } from 'lucide-react';\r\nimport { supabase } from '@/lib/supabase';\r\nimport { useToast } from '@/hooks/use-toast';\r\n\r\ninterface TableInfo {\r\n  name: string;\r\n  rows: number;\r\n  columns: string[];\r\n  created: string;\r\n}\r\n\r\ninterface DatabaseStats {\r\n  totalTables: number;\r\n  totalRows: number;\r\n  storageUsed: string;\r\n  lastBackup: string;\r\n}\r\n\r\nexport const DatabaseManager = () => {\r\n  const [tables, setTables] = useState<TableInfo[]>([]);\r\n  const [stats, setStats] = useState<DatabaseStats>({\r\n    totalTables: 0,\r\n    totalRows: 0,\r\n    storageUsed: '0 MB',\r\n    lastBackup: 'Never'\r\n  });\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [initStatus, setInitStatus] = useState<'checking' | 'ready' | 'needs-setup'>('checking');\r\n  const { toast } = useToast();\r\n\r\n  useEffect(() => {\r\n    checkDatabaseSetup();\r\n  }, []);\r\n\r\n  const checkDatabaseSetup = async () => {\r\n    setIsLoading(true);\r\n    try {\r\n      // Check if research tables exist\r\n      const { data: researchEntries, error: entriesError } = await supabase\r\n        .from('research_entries')\r\n        .select('count', { count: 'exact', head: true });\r\n\r\n      const { data: researchTags, error: tagsError } = await supabase\r\n        .from('research_tags')\r\n        .select('count', { count: 'exact', head: true });\r\n\r\n      if (entriesError?.code === '42P01' || tagsError?.code === '42P01') {\r\n        setInitStatus('needs-setup');\r\n      } else {\r\n        setInitStatus('ready');\r\n        await loadDatabaseInfo();\r\n      }\r\n    } catch (error) {\r\n      console.error('Error checking database setup:', error);\r\n      setInitStatus('needs-setup');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const initializeDatabase = async () => {\r\n    setIsLoading(true);\r\n    try {\r\n      // Create research_entries table\r\n      const { error: entriesError } = await supabase.rpc('create_research_entries_table');\r\n      \r\n      // Create research_tags table\r\n      const { error: tagsError } = await supabase.rpc('create_research_tags_table');\r\n\r\n      if (entriesError || tagsError) {\r\n        throw new Error('Failed to create tables');\r\n      }\r\n\r\n      toast({\r\n        title: \"Success\",\r\n        description: \"Database initialized successfully\"\r\n      });\r\n\r\n      setInitStatus('ready');\r\n      await loadDatabaseInfo();\r\n    } catch (error) {\r\n      console.error('Error initializing database:', error);\r\n      toast({\r\n        title: \"Error\",\r\n        description: \"Failed to initialize database. Using fallback storage.\",\r\n        variant: \"destructive\"\r\n      });\r\n      \r\n      // Set up local storage fallback\r\n      setInitStatus('ready');\r\n      setStats({\r\n        totalTables: 2,\r\n        totalRows: 0,\r\n        storageUsed: '0 KB (Local)',\r\n        lastBackup: 'N/A (Local Storage)'\r\n      });\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const loadDatabaseInfo = async () => {\r\n    try {\r\n      // Query Supabase for all tables and their row counts\r\n      const { data: tablesData, error: tablesError } = await supabase.rpc('get_all_table_info');\r\n      if (tablesError) throw tablesError;\r\n\r\n      // tablesData should be an array of { name, rows, columns, created }\r\n      setTables(tablesData || []);\r\n\r\n      // Calculate stats\r\n      const totalTables = (tablesData || []).length;\r\n      const totalRows = (tablesData || []).reduce((sum: number, t: any) => sum + (t.rows || 0), 0);\r\n      setStats({\r\n        totalTables,\r\n        totalRows,\r\n        storageUsed: `${Math.round(totalRows * 0.5)} KB`,\r\n        lastBackup: new Date().toLocaleDateString()\r\n      });\r\n    } catch (error) {\r\n      console.error('Error loading database info:', error);\r\n      setTables([]);\r\n      setStats({\r\n        totalTables: 0,\r\n        totalRows: 0,\r\n        storageUsed: '0 KB',\r\n        lastBackup: 'N/A'\r\n      });\r\n    }\r\n  };\r\n\r\n  const exportData = async () => {\r\n    try {\r\n      const { data: entries } = await supabase\r\n        .from('research_entries')\r\n        .select('*');\r\n\r\n      const { data: tags } = await supabase\r\n        .from('research_tags')\r\n        .select('*');\r\n\r\n      const exportData = {\r\n        research_entries: entries || [],\r\n        research_tags: tags || [],\r\n        exported_at: new Date().toISOString()\r\n      };\r\n\r\n      const blob = new Blob([JSON.stringify(exportData, null, 2)], {\r\n        type: 'application/json'\r\n      });\r\n\r\n      const url = URL.createObjectURL(blob);\r\n      const a = document.createElement('a');\r\n      a.href = url;\r\n      a.download = `research_database_${new Date().toISOString().split('T')[0]}.json`;\r\n      document.body.appendChild(a);\r\n      a.click();\r\n      document.body.removeChild(a);\r\n      URL.revokeObjectURL(url);\r\n\r\n      toast({\r\n        title: \"Success\",\r\n        description: \"Database exported successfully\"\r\n      });\r\n    } catch (error) {\r\n      console.error('Error exporting data:', error);\r\n      toast({\r\n        title: \"Error\",\r\n        description: \"Failed to export database\",\r\n        variant: \"destructive\"\r\n      });\r\n    }\r\n  };\r\n\r\n  if (initStatus === 'checking') {\r\n    return (\r\n      <Card>\r\n        <CardContent className=\"flex items-center justify-center py-8\">\r\n          <div className=\"text-center\">\r\n            <Database className=\"h-8 w-8 animate-spin mx-auto mb-2\" />\r\n            <p>Checking database setup...</p>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  if (initStatus === 'needs-setup') {\r\n    return (\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <AlertCircle className=\"h-5 w-5 text-yellow-500\" />\r\n            Database Setup Required\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent className=\"space-y-4\">\r\n          <p className=\"text-gray-600\">\r\n            The research database needs to be initialized. This will create the necessary tables\r\n            for storing research findings, citations, and conversation history.\r\n          </p>\r\n          <Button onClick={initializeDatabase} disabled={isLoading} className=\"w-full\">\r\n            <Database className=\"h-4 w-4 mr-2\" />\r\n            {isLoading ? 'Initializing...' : 'Initialize Database'}\r\n          </Button>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <Database className=\"h-5 w-5\" />\r\n            Database Management\r\n            <Badge variant=\"outline\" className=\"ml-auto\">\r\n              <CheckCircle className=\"h-3 w-3 mr-1\" />\r\n              Active\r\n            </Badge>\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <Tabs defaultValue=\"overview\" className=\"w-full\">\r\n            <TabsList className=\"grid w-full grid-cols-3\">\r\n              <TabsTrigger value=\"overview\">Overview</TabsTrigger>\r\n              <TabsTrigger value=\"tables\">Tables</TabsTrigger>\r\n              <TabsTrigger value=\"maintenance\">Maintenance</TabsTrigger>\r\n            </TabsList>\r\n\r\n            <TabsContent value=\"overview\" className=\"space-y-4\">\r\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\r\n                <Card>\r\n                  <CardContent className=\"p-4 text-center\">\r\n                    <div className=\"text-2xl font-bold text-blue-600\">{stats.totalTables}</div>\r\n                    <div className=\"text-sm text-gray-500\">Tables</div>\r\n                  </CardContent>\r\n                </Card>\r\n                <Card>\r\n                  <CardContent className=\"p-4 text-center\">\r\n                    <div className=\"text-2xl font-bold text-green-600\">{stats.totalRows}</div>\r\n                    <div className=\"text-sm text-gray-500\">Total Records</div>\r\n                  </CardContent>\r\n                </Card>\r\n                <Card>\r\n                  <CardContent className=\"p-4 text-center\">\r\n                    <div className=\"text-2xl font-bold text-purple-600\">{stats.storageUsed}</div>\r\n                    <div className=\"text-sm text-gray-500\">Storage Used</div>\r\n                  </CardContent>\r\n                </Card>\r\n                <Card>\r\n                  <CardContent className=\"p-4 text-center\">\r\n                    <div className=\"text-sm font-bold text-orange-600\">{stats.lastBackup}</div>\r\n                    <div className=\"text-sm text-gray-500\">Last Backup</div>\r\n                  </CardContent>\r\n                </Card>\r\n              </div>\r\n            </TabsContent>\r\n\r\n            <TabsContent value=\"tables\" className=\"space-y-4\">\r\n              {tables.map(table => (\r\n                <Card key={table.name}>\r\n                  <CardHeader>\r\n                    <CardTitle className=\"flex items-center gap-2\">\r\n                      <Table className=\"h-4 w-4\" />\r\n                      {table.name}\r\n                      <Badge variant=\"secondary\">{table.rows} rows</Badge>\r\n                    </CardTitle>\r\n                  </CardHeader>\r\n                  <CardContent>\r\n                    <div className=\"space-y-2\">\r\n                      <div>\r\n                        <strong>Columns:</strong> {table.columns.join(', ')}\r\n                      </div>\r\n                      <div>\r\n                        <strong>Created:</strong> {table.created}\r\n                      </div>\r\n                    </div>\r\n                  </CardContent>\r\n                </Card>\r\n              ))}\r\n            </TabsContent>\r\n\r\n            <TabsContent value=\"maintenance\" className=\"space-y-4\">\r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                <Card>\r\n                  <CardHeader>\r\n                    <CardTitle>Data Export</CardTitle>\r\n                  </CardHeader>\r\n                  <CardContent>\r\n                    <p className=\"text-sm text-gray-600 mb-4\">\r\n                      Export all research data as JSON for backup or migration.\r\n                    </p>\r\n                    <Button onClick={exportData} className=\"w-full\">\r\n                      Export Database\r\n                    </Button>\r\n                  </CardContent>\r\n                </Card>\r\n                <Card>\r\n                  <CardHeader>\r\n                    <CardTitle>Refresh Stats</CardTitle>\r\n                  </CardHeader>\r\n                  <CardContent>\r\n                    <p className=\"text-sm text-gray-600 mb-4\">\r\n                      Update database statistics and table information.\r\n                    </p>\r\n                    <Button onClick={loadDatabaseInfo} disabled={isLoading} className=\"w-full\">\r\n                      {isLoading ? 'Refreshing...' : 'Refresh Stats'}\r\n                    </Button>\r\n                  </CardContent>\r\n                </Card>\r\n              </div>\r\n            </TabsContent>\r\n          </Tabs>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n};"
}