{
  "originalPath": "src\\components\\AppContext",
  "timestamp": "2025-10-15T23:02:23.822Z",
  "hash": "6379a7eced5cd8a357f6f0e7b1f32a5e27b570ae961c9640eedaa4202adf8e17",
  "size": 1318,
  "content": "import React, { createContext, useContext, useReducer, ReactNode } from 'react';\r\n\r\ninterface AppState {\r\n  user: any | null;\r\n  loading: boolean;\r\n  theme: 'light' | 'dark';\r\n}\r\n\r\ninterface AppAction {\r\n  type: 'SET_USER' | 'SET_LOADING' | 'SET_THEME';\r\n  payload: any;\r\n}\r\n\r\nconst initialState: AppState = {\r\n  user: null,\r\n  loading: false,\r\n  theme: 'light',\r\n};\r\n\r\nconst AppContext = createContext<{\r\n  state: AppState;\r\n  dispatch: React.Dispatch<AppAction>;\r\n} | undefined>(undefined);\r\n\r\nfunction appReducer(state: AppState, action: AppAction): AppState {\r\n  switch (action.type) {\r\n    case 'SET_USER':\r\n      return { ...state, user: action.payload };\r\n    case 'SET_LOADING':\r\n      return { ...state, loading: action.payload };\r\n    case 'SET_THEME':\r\n      return { ...state, theme: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport function AppProvider({ children }: { children: ReactNode }) {\r\n  const [state, dispatch] = useReducer(appReducer, initialState);\r\n\r\n  return (\r\n    <AppContext.Provider value={{ state, dispatch }}>\r\n      {children}\r\n    </AppContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useApp() {\r\n  const context = useContext(AppContext);\r\n  if (context === undefined) {\r\n    throw new Error('useApp must be used within an AppProvider');\r\n  }\r\n  return context;\r\n}"
}