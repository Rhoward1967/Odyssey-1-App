{
  "originalPath": "src\\components\\AuthProvider.tsx",
  "timestamp": "2025-10-15T16:14:06.070Z",
  "hash": "c5881a37d01d2f21baa626213652dca1f133d75f0e0001753db75872e303eb3c",
  "size": 4368,
  "content": "import {\r\n  createContext,\r\n  useContext,\r\n  useState,\r\n  useEffect,\r\n  ReactNode,\r\n} from 'react';\r\nimport { supabase } from '@/lib/supabase';\r\nimport { User, Session } from '@supabase/supabase-js';\r\n\r\n// ARCHITECT'S NOTE (PROJECT RESTORATION - DEFINITIVE):\r\n// This is the restored, architecturally sound AuthProvider. It uses a centralized,\r\n// backend-driven call to `is_super_admin()` to determine administrative status.\r\n// This is the definitive blueprint for Directive RESTORATION-1.\r\n\r\ninterface AuthContextType {\r\n  user: User | null;\r\n  isSuperAdmin: boolean;\r\n  loading: boolean;\r\n  signIn: (email: string, password: string) => Promise<void>;\r\n  signUp: (email: string, password: string, name?: string) => Promise<void>;\r\n  signOut: () => Promise<void>;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\nconst ARCHITECT_EMAIL = import.meta.env.VITE_ARCHITECT_EMAIL;\r\n\r\nexport const AuthProvider = ({ children }: { children: ReactNode }) => {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [isSuperAdmin, setIsSuperAdmin] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // --- AUTH METHODS ---\r\n  const signIn = async (email: string, password: string) => {\r\n    setLoading(true);\r\n    const { data, error } = await supabase.auth.signInWithPassword({\r\n      email,\r\n      password,\r\n    });\r\n    if (error) {\r\n      setLoading(false);\r\n      throw error;\r\n    }\r\n    setUser(data.user);\r\n    setLoading(false);\r\n  };\r\n\r\n  const signUp = async (email: string, password: string, name?: string) => {\r\n    setLoading(true);\r\n    const { data, error } = await supabase.auth.signUp({\r\n      email,\r\n      password,\r\n      options: name ? { data: { name } } : undefined,\r\n    });\r\n    if (error) {\r\n      setLoading(false);\r\n      throw error;\r\n    }\r\n    setUser(data.user);\r\n    setLoading(false);\r\n  };\r\n\r\n  const signOut = async () => {\r\n    setLoading(true);\r\n    const { error } = await supabase.auth.signOut();\r\n    if (error) {\r\n      setLoading(false);\r\n      throw error;\r\n    }\r\n    setUser(null);\r\n    setIsSuperAdmin(false);\r\n    setLoading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // DEBUG: Log the value of VITE_ARCHITECT_EMAIL at runtime\r\n    console.log('DEBUG: VITE_ARCHITECT_EMAIL =', ARCHITECT_EMAIL);\r\n    // --- DEVELOPER BYPASS LOGIC ---\r\n    if (ARCHITECT_EMAIL) {\r\n      console.warn(\r\n        `%cARCHITECT MODE ACTIVE: Simulating super admin login for ${ARCHITECT_EMAIL}`,\r\n        'color: yellow; font-weight: bold;'\r\n      );\r\n      const architectUser = {\r\n        id: 'architect-bypass-uuid',\r\n        email: ARCHITECT_EMAIL,\r\n        user_metadata: { name: 'Architect' },\r\n        app_metadata: { provider: 'email' },\r\n        aud: 'authenticated',\r\n        created_at: new Date().toISOString(),\r\n      } as User;\r\n      setUser(architectUser);\r\n      setIsSuperAdmin(true);\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    // --- STANDARD AUTHENTICATION FLOW ---\r\n    const checkSessionAndSetUser = async (session: Session | null) => {\r\n      const authUser = session?.user ?? null;\r\n      setUser(authUser);\r\n\r\n      if (authUser) {\r\n        try {\r\n          const { data: isAdmin, error } = await supabase.rpc('is_super_admin');\r\n          if (error) throw error;\r\n          setIsSuperAdmin(isAdmin);\r\n        } catch (error) {\r\n          console.error('Error checking super admin status:', error);\r\n          setIsSuperAdmin(false);\r\n        }\r\n      } else {\r\n        setIsSuperAdmin(false);\r\n      }\r\n      setLoading(false);\r\n    };\r\n\r\n    supabase.auth.getSession().then(({ data: { session } }) => {\r\n      checkSessionAndSetUser(session);\r\n    });\r\n\r\n    const {\r\n      data: { subscription },\r\n    } = supabase.auth.onAuthStateChange((_event, session) => {\r\n      checkSessionAndSetUser(session);\r\n    });\r\n\r\n    return () => {\r\n      subscription?.unsubscribe();\r\n    };\r\n  }, []);\r\n\r\n  const value = { user, isSuperAdmin, loading, signIn, signUp, signOut };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {!loading && children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\n// --- END OF DEFINITIVE IMPLEMENTATION ---\r\n"
}