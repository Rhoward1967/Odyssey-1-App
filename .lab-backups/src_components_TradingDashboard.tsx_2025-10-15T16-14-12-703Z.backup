{
  "originalPath": "src\\components\\TradingDashboard.tsx",
  "timestamp": "2025-10-15T16:14:12.703Z",
  "hash": "27a6dae9b4c09f55158d75b7cdbca91e9d3d25a071664af41c5393cf265142d0",
  "size": 14206,
  "content": "import React, { useState, useEffect, Suspense, lazy } from 'react';\r\n// import CoinGecko from 'https://cdn.skypack.dev/coingecko-api'; // Removed to fix build error\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Activity, Wallet, TrendingUp, DollarSign } from 'lucide-react';\r\n// import { ethers } from 'https://cdn.skypack.dev/ethers'; // Removed to fix build error\r\n\r\n// --- Helper Components (assuming they exist elsewhere) ---\r\n// These are placeholder components. Replace with your actual implementations.\r\nconst AIExpertAdvisor = () => <Card><CardHeader><CardTitle>AI Expert Advisor</CardTitle></CardHeader><CardContent><p>AI-powered trading insights will appear here.</p></CardContent></Card>;\r\nconst TradingAdvisorFixed = () => <Card><CardHeader><CardTitle>Trading Advisor</CardTitle></CardHeader><CardContent><p>Fixed trading advice will appear here.</p></CardContent></Card>;\r\nconst ResearchTab = () => <Card><CardHeader><CardTitle>Research</CardTitle></CardHeader><CardContent><p>Research tools and data will appear here.</p></CardContent></Card>;\r\nconst AdvancedTradingAI = ({ symbol, market, portfolio }: { symbol: string, market: string, portfolio: any }) => <Card><CardHeader><CardTitle>Advanced Trading AI</CardTitle></CardHeader><CardContent><p>Advanced AI analysis for {symbol} in the {market} market.</p></CardContent></Card>;\r\nconst PortfolioOverview = ({ walletAddress, walletBalance }: { walletAddress: string | null, walletBalance: string }) => (\r\n    <Card>\r\n        <CardHeader><CardTitle>Portfolio Overview</CardTitle></CardHeader>\r\n        <CardContent>\r\n            {walletAddress ? (\r\n                <div>\r\n                    <p className=\"text-sm text-muted-foreground\">Wallet Address</p>\r\n                    <p className=\"font-mono break-all\">{walletAddress}</p>\r\n                    <p className=\"text-sm text-muted-foreground mt-4\">Balance</p>\r\n                    <p className=\"text-2xl font-bold\">{parseFloat(walletBalance).toFixed(4)} ETH</p>\r\n                </div>\r\n            ) : (\r\n                <p>Please connect your wallet to view your portfolio.</p>\r\n            )}\r\n        </CardContent>\r\n    </Card>\r\n);\r\nconst OrderBook = () => <Card><CardHeader><CardTitle>Order Book</CardTitle></CardHeader><CardContent><p>Live order book data will appear here.</p></CardContent></Card>;\r\n\r\n\r\n// --- MetaMask Connector ---\r\n// This component now handles connecting and passes the wallet info up\r\nconst MetaMaskConnector = ({ onConnect }: { onConnect: (address: string, balance: string) => void }) => {\r\n    const [errorMessage, setErrorMessage] = useState<string | null>(null);\r\n\r\n    const handleConnect = async () => {\r\n        if (typeof window.ethereum !== 'undefined') {\r\n            try {\r\n                // Request account access\r\n                const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n                const address = accounts[0];\r\n\r\n                // Get balance\r\n                const balanceWei = await window.ethereum.request({ method: 'eth_getBalance', params: [address, 'latest'] });\r\n                // Manual conversion from Wei (hexadecimal) to ETH string, removing 'ethers' dependency\r\n                const balanceEth = (parseInt(balanceWei, 16) / 1e18).toString();\r\n                \r\n                onConnect(address, balanceEth);\r\n                setErrorMessage(null);\r\n            } catch (err: any) {\r\n                setErrorMessage(err.message || \"An error occurred while connecting.\");\r\n            }\r\n        } else {\r\n            setErrorMessage('MetaMask is not installed. Please install it to use this feature.');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Card>\r\n            <CardHeader>\r\n                <CardTitle>Connect Wallet</CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n                <Button onClick={handleConnect}>Connect to MetaMask</Button>\r\n                {errorMessage && <p className=\"text-red-600 mt-2 text-sm\">{errorMessage}</p>}\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n};\r\n\r\n\r\n// --- Main Trading Dashboard Component ---\r\ninterface Product {\r\n  id: string;\r\n  display_name: string;\r\n  base_currency: string;\r\n  quote_currency: string;\r\n  price: string;\r\n  price_change_24h: string;\r\n}\r\n\r\n// Lazy load components for better performance\r\nconst TradingForm = lazy(() => import('./TradingForm').catch(() => ({ default: () => <div>Trading form loading...</div> })));\r\nconst MarketData = lazy(() => import('./MarketData').catch(() => ({ default: () => <div>Market data loading...</div> })));\r\n\r\nconst TradingDashboard: React.FC = () => {\r\n    // State for MetaMask wallet\r\n    const [walletAddress, setWalletAddress] = useState<string | null>(null);\r\n    const [walletBalance, setWalletBalance] = useState<string>('0.00');\r\n\r\n    // State for market data\r\n    const [products, setProducts] = useState<Product[]>([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState<string | null>(null);\r\n    const [selectedProduct, setSelectedProduct] = useState<string>('BTC-USD');\r\n\r\n    // Callback function for MetaMaskConnector to update parent state\r\n    const handleWalletConnect = (address: string, balance: string) => {\r\n        setWalletAddress(address);\r\n        setWalletBalance(balance);\r\n    };\r\n    \r\n    useEffect(() => {\r\n        // Fetch live crypto listings directly from CoinGecko API\r\n        const fetchCoinGeckoData = async () => {\r\n            setLoading(true);\r\n            setError(null);\r\n            try {\r\n                const params = new URLSearchParams({\r\n                    vs_currency: 'usd',\r\n                    order: 'market_cap_desc',\r\n                    per_page: '100',\r\n                    page: '1',\r\n                    sparkline: 'false',\r\n                    price_change_percentage: '24h'\r\n                });\r\n                const response = await fetch(`https://api.coingecko.com/api/v3/coins/markets?${params.toString()}`);\r\n                if (!response.ok) {\r\n                    throw new Error(`API request failed with status ${response.status}`);\r\n                }\r\n                const data = await response.json();\r\n\r\n                if (Array.isArray(data)) {\r\n                    const mapped = data.map((coin: any) => ({\r\n                        id: coin.symbol.toUpperCase() + '-USD',\r\n                        display_name: coin.name,\r\n                        base_currency: coin.symbol.toUpperCase(),\r\n                        quote_currency: 'USD',\r\n                        price: coin.current_price?.toString() || '0',\r\n                        price_change_24h: coin.price_change_percentage_24h?.toString() || '0',\r\n                    }));\r\n                    setProducts(mapped);\r\n                } else {\r\n                    setError('Failed to fetch CoinGecko data. The API may be unavailable.');\r\n                }\r\n            } catch (err: any) {\r\n                setError('An error occurred while fetching CoinGecko data: ' + (err.message || 'Unknown error'));\r\n            }\r\n            setLoading(false);\r\n        };\r\n\r\n        fetchCoinGeckoData();\r\n    }, []);\r\n\r\n    const btcPrice = products.find(p => p.base_currency === 'BTC')?.price || '...';\r\n    const btcChange = products.find(p => p.base_currency === 'BTC')?.price_change_24h || '...';\r\n\r\n    return (\r\n        <div className=\"p-6 space-y-6 bg-gray-50 min-h-screen\">\r\n            <div className=\"flex items-center justify-between\">\r\n                <h1 className=\"text-3xl font-bold text-gray-800\">Trading Dashboard</h1>\r\n                <Badge variant=\"outline\" className=\"bg-green-100 text-green-800 border-green-300\">\r\n                    <Activity className=\"w-4 h-4 mr-2\" />\r\n                    Live Market Data via CoinGecko\r\n                </Badge>\r\n            </div>\r\n\r\n            {error && (\r\n                <Card className=\"border-red-300 bg-red-100\">\r\n                    <CardContent className=\"pt-6\">\r\n                        <p className=\"text-red-700 font-semibold\">Error:</p>\r\n                        <p className=\"text-red-700\">{error}</p>\r\n                    </CardContent>\r\n                </Card>\r\n            )}\r\n\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\r\n                 <Card>\r\n                    <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n                        <CardTitle className=\"text-sm font-medium\">Total Balance (ETH)</CardTitle>\r\n                        <Wallet className=\"h-4 w-4 text-muted-foreground\" />\r\n                    </CardHeader>\r\n                    <CardContent>\r\n                        <div className=\"text-2xl font-bold\">{parseFloat(walletBalance).toFixed(4)}</div>\r\n                        <p className=\"text-xs text-muted-foreground\">{walletAddress ? 'From connected wallet' : 'Connect wallet to see balance'}</p>\r\n                    </CardContent>\r\n                </Card>\r\n\r\n                <Card>\r\n                    <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n                        <CardTitle className=\"text-sm font-medium\">BTC Price</CardTitle>\r\n                        <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\r\n                    </CardHeader>\r\n                    <CardContent>\r\n                        <div className=\"text-2xl font-bold\">${parseFloat(btcPrice).toLocaleString()}</div>\r\n                        <p className={`text-xs ${parseFloat(btcChange) >= 0 ? 'text-green-600' : 'text-red-600'}`}>\r\n                            {parseFloat(btcChange).toFixed(2)}% (24h)\r\n                        </p>\r\n                    </CardContent>\r\n                </Card>\r\n\r\n                <Card>\r\n                    <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n                        <CardTitle className=\"text-sm font-medium\">Active Orders</CardTitle>\r\n                        <Activity className=\"h-4 w-4 text-muted-foreground\" />\r\n                    </CardHeader>\r\n                    <CardContent>\r\n                        <div className=\"text-2xl font-bold\">N/A</div>\r\n                        <p className=\"text-xs text-muted-foreground\">To be implemented</p>\r\n                    </CardContent>\r\n                </Card>\r\n\r\n                <Card>\r\n                    <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n                        <CardTitle className=\"text-sm font-medium\">24h P&L</CardTitle>\r\n                        <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\r\n                    </CardHeader>\r\n                    <CardContent>\r\n                        <div className=\"text-2xl font-bold\">N/A</div>\r\n                        <p className=\"text-xs text-muted-foreground\">To be implemented</p>\r\n                    </CardContent>\r\n                </Card>\r\n            </div>\r\n            \r\n            {/* Wallet Connection is now the primary source for account data */}\r\n            {!walletAddress && (\r\n                <MetaMaskConnector onConnect={handleWalletConnect} />\r\n            )}\r\n\r\n            <Tabs defaultValue=\"portfolio\" className=\"space-y-4\">\r\n                <TabsList className=\"grid w-full grid-cols-6\">\r\n                    <TabsTrigger value=\"portfolio\">Portfolio</TabsTrigger>\r\n                    <TabsTrigger value=\"trade\">Trade</TabsTrigger>\r\n                    <TabsTrigger value=\"orders\">Orders</TabsTrigger>\r\n                    <TabsTrigger value=\"market\">Market</TabsTrigger>\r\n                    <TabsTrigger value=\"advisor\">Advisor</TabsTrigger>\r\n                    <TabsTrigger value=\"research\">Research</TabsTrigger>\r\n                </TabsList>\r\n\r\n                {loading ? (\r\n                    <div className=\"flex items-center justify-center h-64\">\r\n                        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\r\n                        <p className=\"ml-4 text-gray-600\">Loading Market Data...</p>\r\n                    </div>\r\n                ) : (\r\n                    <>\r\n                        <TabsContent value=\"portfolio\">\r\n                             <PortfolioOverview walletAddress={walletAddress} walletBalance={walletBalance} />\r\n                        </TabsContent>\r\n                        <TabsContent value=\"trade\">\r\n                            <Suspense fallback={<div className=\"p-8 text-center\">Loading trading form...</div>}>\r\n                                <TradingForm selectedProduct={selectedProduct} onProductChange={setSelectedProduct} products={products} />\r\n                            </Suspense>\r\n                        </TabsContent>\r\n                        <TabsContent value=\"orders\">\r\n                            <Suspense fallback={<div className=\"p-8 text-center\">Loading orders...</div>}>\r\n                                <OrderBook />\r\n                            </Suspense>\r\n                        </TabsContent>\r\n                        <TabsContent value=\"market\">\r\n                            <Suspense fallback={<div className=\"p-8 text-center\">Loading market data...</div>}>\r\n                                <MarketData products={products} />\r\n                            </Suspense>\r\n                        </TabsContent>\r\n                        <TabsContent value=\"advisor\">\r\n                             <TradingAdvisorFixed />\r\n                        </TabsContent>\r\n                         <TabsContent value=\"research\">\r\n                             <ResearchTab />\r\n                        </TabsContent>\r\n                    </>\r\n                )}\r\n            </Tabs>\r\n\r\n            <footer className=\"mt-12 text-center text-xs text-gray-500 opacity-80\">\r\n                Powered by <span className=\"font-bold text-blue-700\">Odyssey-1</span> — Your AI Trading & Research Platform\r\n            </footer>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TradingDashboard;\r\n\r\n"
}