{
  "originalPath": "src\\components\\EmployeeOnboardingSystem.tsx",
  "timestamp": "2025-10-13T18:26:48.875Z",
  "hash": "23cef775ad2f4eab4fbecfd488e3b2095dc3b30f5851d048c5ef8e49def63fee",
  "size": 16997,
  "content": "import { Badge } from '@/components/ui/badge';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\nimport { useState } from 'react';\r\n\r\ninterface Employee {\r\n  id: string;\r\n  name: string;\r\n  position: string;\r\n  hireDate: string;\r\n  status: 'pending' | 'in-progress' | 'completed' | 'non-compliant';\r\n  documents: Document[];\r\n  trainings: Training[];\r\n}\r\n\r\ninterface Document {\r\n  id: string;\r\n  type: string;\r\n  name: string;\r\n  status: 'pending' | 'submitted' | 'approved' | 'rejected';\r\n  uploadDate?: string;\r\n  expiryDate?: string;\r\n  required: boolean;\r\n}\r\n\r\ninterface Training {\r\n  id: string;\r\n  name: string;\r\n  type: 'bloodborne' | 'hipaa' | 'chemical' | 'uniform' | 'supervisor' | 'safety';\r\n  status: 'not-started' | 'in-progress' | 'completed' | 'expired';\r\n  completedDate?: string;\r\n  expiryDate?: string;\r\n  required: boolean;\r\n}\r\n\r\nexport default function EmployeeOnboardingSystem() {\r\n  const [employees, setEmployees] = useState<Employee[]>([\r\n    {\r\n      id: '1',\r\n      name: 'John Smith',\r\n      position: 'Janitorial Technician',\r\n      hireDate: '2024-01-15',\r\n      status: 'in-progress' as const,\r\n      documents: [\r\n        { id: '1', type: 'application', name: 'Employment Application', status: 'approved', required: true },\r\n        { id: '2', type: 'drug-screen', name: 'Drug Screen Results', status: 'pending', required: true },\r\n        { id: '3', type: 'background', name: 'Background Check', status: 'submitted', required: true }\r\n      ],\r\n      trainings: [\r\n        { id: '1', name: 'Bloodborne Pathogen Training', type: 'bloodborne', status: 'completed', completedDate: '2024-01-20', expiryDate: '2025-01-20', required: true },\r\n        { id: '2', name: 'HIPAA Compliance Training', type: 'hipaa', status: 'in-progress', required: true },\r\n        { id: '3', name: 'Chemical Safety Training', type: 'chemical', status: 'not-started', required: true }\r\n      ]\r\n    }\r\n  ]);\r\n  const [selectedEmployee, setSelectedEmployee] = useState<Employee | null>(null);\r\n  const [showUploadModal, setShowUploadModal] = useState(false);\r\n  const [showTrainingModal, setShowTrainingModal] = useState(false);\r\n  const [uploading, setUploading] = useState(false);\r\n  const [assigning, setAssigning] = useState(false);\r\n  const [generating, setGenerating] = useState(false);\r\n\r\n  // Handler for uploading documents\r\n  const handleUploadDocument = async () => {\r\n    if (!selectedEmployee) return;\r\n    \r\n    setUploading(true);\r\n    try {\r\n      // Simulate document upload process\r\n      const fileInput = document.createElement('input');\r\n      fileInput.type = 'file';\r\n      fileInput.accept = '.pdf,.doc,.docx,.jpg,.png';\r\n      fileInput.onchange = async (e) => {\r\n        const file = (e.target as HTMLInputElement).files?.[0];\r\n        if (file) {\r\n          // Simulate upload delay (reduced for better development experience)\r\n          await new Promise(resolve => setTimeout(resolve, 500));\r\n          \r\n          // Create new document entry\r\n          const newDocument: Document = {\r\n            id: Date.now().toString(),\r\n            type: 'uploaded',\r\n            name: file.name,\r\n            status: 'submitted',\r\n            uploadDate: new Date().toISOString().split('T')[0],\r\n            required: false\r\n          };\r\n\r\n          // Update employee documents\r\n          setEmployees(prev => prev.map(emp => \r\n            emp.id === selectedEmployee.id \r\n              ? { ...emp, documents: [...emp.documents, newDocument] }\r\n              : emp\r\n          ));\r\n\r\n          // Update selected employee\r\n          setSelectedEmployee(prev => prev ? \r\n            { ...prev, documents: [...prev.documents, newDocument] } \r\n            : null\r\n          );\r\n          \r\n          alert(`Document \"${file.name}\" uploaded successfully!`);\r\n        }\r\n        setUploading(false);\r\n      };\r\n      fileInput.click();\r\n    } catch (error) {\r\n      console.error('Upload error:', error);\r\n      alert('Upload failed. Please try again.');\r\n      setUploading(false);\r\n    }\r\n  };\r\n\r\n  // Handler for assigning training\r\n  const handleAssignTraining = async () => {\r\n    if (!selectedEmployee) return;\r\n    \r\n    setAssigning(true);\r\n    try {\r\n      // Simulate training assignment\r\n      await new Promise(resolve => setTimeout(resolve, 1500));\r\n      \r\n      const trainingOptions = [\r\n        'Emergency Response Training',\r\n        'Customer Service Excellence',\r\n        'Data Privacy Training',\r\n        'Safety Protocol Update',\r\n        'Equipment Handling Course'\r\n      ];\r\n      \r\n      const randomTraining = trainingOptions[Math.floor(Math.random() * trainingOptions.length)];\r\n      \r\n      const newTraining: Training = {\r\n        id: Date.now().toString(),\r\n        name: randomTraining,\r\n        type: 'safety',\r\n        status: 'not-started',\r\n        required: false\r\n      };\r\n\r\n      // Update employee trainings\r\n      setEmployees(prev => prev.map(emp => \r\n        emp.id === selectedEmployee.id \r\n          ? { ...emp, trainings: [...emp.trainings, newTraining] }\r\n          : emp\r\n      ));\r\n\r\n      // Update selected employee\r\n      setSelectedEmployee(prev => prev ? \r\n        { ...prev, trainings: [...prev.trainings, newTraining] } \r\n        : null\r\n      );\r\n      \r\n      alert(`Training \"${randomTraining}\" assigned successfully!`);\r\n    } catch (error) {\r\n      console.error('Assignment error:', error);\r\n      alert('Training assignment failed. Please try again.');\r\n    } finally {\r\n      setAssigning(false);\r\n    }\r\n  };\r\n\r\n  // Handler for generating compliance report\r\n  const handleGenerateReport = async () => {\r\n    if (!selectedEmployee) return;\r\n    \r\n    setGenerating(true);\r\n    try {\r\n      // Simulate report generation\r\n      await new Promise(resolve => setTimeout(resolve, 3000));\r\n      \r\n      const completedDocs = selectedEmployee.documents.filter(doc => doc.status === 'approved').length;\r\n      const totalDocs = selectedEmployee.documents.filter(doc => doc.required).length;\r\n      const completedTrainings = selectedEmployee.trainings.filter(training => training.status === 'completed').length;\r\n      const totalTrainings = selectedEmployee.trainings.filter(training => training.required).length;\r\n      \r\n      const complianceScore = Math.round(((completedDocs + completedTrainings) / (totalDocs + totalTrainings)) * 100);\r\n      \r\n      // Create downloadable report content\r\n      const reportContent = `\r\nCOMPLIANCE REPORT\r\nGenerated: ${new Date().toLocaleDateString()}\r\nEmployee: ${selectedEmployee.name}\r\nPosition: ${selectedEmployee.position}\r\nHire Date: ${selectedEmployee.hireDate}\r\n\r\nDOCUMENT COMPLIANCE: ${completedDocs}/${totalDocs} (${Math.round((completedDocs/totalDocs)*100)}%)\r\nTRAINING COMPLIANCE: ${completedTrainings}/${totalTrainings} (${Math.round((completedTrainings/totalTrainings)*100)}%)\r\nOVERALL COMPLIANCE SCORE: ${complianceScore}%\r\n\r\nSTATUS: ${complianceScore >= 90 ? 'COMPLIANT' : complianceScore >= 70 ? 'PARTIALLY COMPLIANT' : 'NON-COMPLIANT'}\r\n      `;\r\n      \r\n      // Create and download the report\r\n      const blob = new Blob([reportContent], { type: 'text/plain' });\r\n      const url = window.URL.createObjectURL(blob);\r\n      const a = document.createElement('a');\r\n      a.href = url;\r\n      a.download = `compliance-report-${selectedEmployee.name.replace(/\\s+/g, '-')}.txt`;\r\n      document.body.appendChild(a);\r\n      a.click();\r\n      window.URL.revokeObjectURL(url);\r\n      document.body.removeChild(a);\r\n      \r\n      alert(`Compliance report generated! Score: ${complianceScore}%`);\r\n    } catch (error) {\r\n      console.error('Report generation error:', error);\r\n      alert('Report generation failed. Please try again.');\r\n    } finally {\r\n      setGenerating(false);\r\n    }\r\n  };\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'completed': return 'bg-green-500';\r\n      case 'approved': return 'bg-green-500';\r\n      case 'in-progress': return 'bg-yellow-500';\r\n      case 'submitted': return 'bg-blue-500';\r\n      case 'pending': return 'bg-orange-500';\r\n      case 'rejected': return 'bg-red-500';\r\n      case 'non-compliant': return 'bg-red-500';\r\n      case 'expired': return 'bg-red-500';\r\n      default: return 'bg-gray-500';\r\n    }\r\n  };\r\n\r\n  const requiredDocuments = [\r\n    'Employment Application',\r\n    'Drug Screen Results',\r\n    'Background Check',\r\n    'I-9 Form',\r\n    'W-4 Form',\r\n    'Emergency Contact Form',\r\n    'Direct Deposit Authorization'\r\n  ];\r\n\r\n  const requiredTrainings = [\r\n    'Bloodborne Pathogen Training',\r\n    'HIPAA Compliance Training',\r\n    'Chemical Safety Training',\r\n    'Uniform Requirements Training',\r\n    'Emergency Procedures Training',\r\n    'Equipment Safety Training'\r\n  ];\r\n\r\n  return (\r\n    <div className=\"p-6 max-w-7xl mx-auto\">\r\n      <div className=\"mb-6\">\r\n        <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Employee Onboarding System</h1>\r\n        <p className=\"text-gray-600\">Manage employee onboarding, compliance training, and documentation</p>\r\n      </div>\r\n\r\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\r\n        {/* Employee List */}\r\n        <Card className=\"lg:col-span-1\">\r\n          <CardHeader>\r\n            <CardTitle>Employees</CardTitle>\r\n          </CardHeader>\r\n          <CardContent className=\"space-y-4\">\r\n            {employees.map((employee) => (\r\n              <div\r\n                key={employee.id}\r\n                className={`p-4 border rounded-lg cursor-pointer transition-colors ${\r\n                  selectedEmployee?.id === employee.id ? 'border-blue-500 bg-blue-50' : 'border-gray-200 hover:border-gray-300'\r\n                }`}\r\n                onClick={() => setSelectedEmployee(employee)}\r\n              >\r\n                <div className=\"flex items-center justify-between mb-2\">\r\n                  <h3 className=\"font-semibold\">{employee.name}</h3>\r\n                  <Badge className={`${getStatusColor(employee.status)} text-white`}>\r\n                    {employee.status}\r\n                  </Badge>\r\n                </div>\r\n                <p className=\"text-sm text-gray-600\">{employee.position}</p>\r\n                <p className=\"text-sm text-gray-500\">Hired: {employee.hireDate}</p>\r\n              </div>\r\n            ))}\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Employee Details */}\r\n        <Card className=\"lg:col-span-2\">\r\n          <CardHeader>\r\n            <CardTitle>\r\n              {selectedEmployee ? `${selectedEmployee.name} - Onboarding Details` : 'Select an Employee'}\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            {selectedEmployee ? (\r\n              <Tabs defaultValue=\"documents\" className=\"w-full\">\r\n                <TabsList className=\"grid w-full grid-cols-3\">\r\n                  <TabsTrigger value=\"documents\">Documents</TabsTrigger>\r\n                  <TabsTrigger value=\"training\">Training</TabsTrigger>\r\n                  <TabsTrigger value=\"compliance\">Compliance</TabsTrigger>\r\n                </TabsList>\r\n\r\n                <TabsContent value=\"documents\" className=\"space-y-4\">\r\n                  <div className=\"space-y-3\">\r\n                    {selectedEmployee.documents.map((doc) => (\r\n                      <div key={doc.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\r\n                        <div>\r\n                          <h4 className=\"font-medium\">{doc.name}</h4>\r\n                          <p className=\"text-sm text-gray-600\">Type: {doc.type}</p>\r\n                          {doc.expiryDate && (\r\n                            <p className=\"text-sm text-gray-500\">Expires: {doc.expiryDate}</p>\r\n                          )}\r\n                        </div>\r\n                        <div className=\"flex items-center gap-2\">\r\n                          <Badge className={`${getStatusColor(doc.status)} text-white`}>\r\n                            {doc.status}\r\n                          </Badge>\r\n                          {doc.required && (\r\n                            <Badge variant=\"outline\" className=\"text-red-600 border-red-600\">\r\n                              Required\r\n                            </Badge>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                  <Button \r\n                    className=\"w-full\" \r\n                    onClick={handleUploadDocument}\r\n                    disabled={uploading || !selectedEmployee}\r\n                  >\r\n                    {uploading ? 'Uploading...' : 'Upload Document'}\r\n                  </Button>\r\n                </TabsContent>\r\n\r\n                <TabsContent value=\"training\" className=\"space-y-4\">\r\n                  <div className=\"space-y-3\">\r\n                    {selectedEmployee.trainings.map((training) => (\r\n                      <div key={training.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\r\n                        <div>\r\n                          <h4 className=\"font-medium\">{training.name}</h4>\r\n                          <p className=\"text-sm text-gray-600\">Type: {training.type}</p>\r\n                          {training.completedDate && (\r\n                            <p className=\"text-sm text-gray-500\">Completed: {training.completedDate}</p>\r\n                          )}\r\n                          {training.expiryDate && (\r\n                            <p className=\"text-sm text-gray-500\">Expires: {training.expiryDate}</p>\r\n                          )}\r\n                        </div>\r\n                        <div className=\"flex items-center gap-2\">\r\n                          <Badge className={`${getStatusColor(training.status)} text-white`}>\r\n                            {training.status}\r\n                          </Badge>\r\n                          {training.required && (\r\n                            <Badge variant=\"outline\" className=\"text-red-600 border-red-600\">\r\n                              Required\r\n                            </Badge>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                  <Button \r\n                    className=\"w-full\"\r\n                    onClick={handleAssignTraining}\r\n                    disabled={assigning || !selectedEmployee}\r\n                  >\r\n                    {assigning ? 'Assigning...' : 'Assign Training'}\r\n                  </Button>\r\n                </TabsContent>\r\n\r\n                <TabsContent value=\"compliance\" className=\"space-y-4\">\r\n                  <div className=\"p-4 bg-red-50 border border-red-200 rounded-lg\">\r\n                    <p className=\"text-red-800 font-medium\">Federal and state compliance requirements must be met to avoid fines.</p>\r\n                  </div>\r\n                  \r\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                    <Card>\r\n                      <CardHeader>\r\n                        <CardTitle className=\"text-lg\">Federal Requirements</CardTitle>\r\n                      </CardHeader>\r\n                      <CardContent>\r\n                        <ul className=\"space-y-2 text-sm\">\r\n                          <li>• I-9 Employment Eligibility Verification</li>\r\n                          <li>• OSHA Safety Training</li>\r\n                          <li>• Bloodborne Pathogen Training</li>\r\n                          <li>• Hazard Communication Training</li>\r\n                        </ul>\r\n                      </CardContent>\r\n                    </Card>\r\n\r\n                    <Card>\r\n                      <CardHeader>\r\n                        <CardTitle className=\"text-lg\">State Requirements</CardTitle>\r\n                      </CardHeader>\r\n                      <CardContent>\r\n                        <ul className=\"space-y-2 text-sm\">\r\n                          <li>• State Tax Forms</li>\r\n                          <li>• Workers' Compensation</li>\r\n                          <li>• Background Check</li>\r\n                          <li>• Drug Testing</li>\r\n                        </ul>\r\n                      </CardContent>\r\n                    </Card>\r\n                  </div>\r\n\r\n                  <Button \r\n                    className=\"w-full\"\r\n                    onClick={handleGenerateReport}\r\n                    disabled={generating || !selectedEmployee}\r\n                  >\r\n                    {generating ? 'Generating Report...' : 'Generate Compliance Report'}\r\n                  </Button>\r\n                </TabsContent>\r\n              </Tabs>\r\n            ) : (\r\n              <div className=\"text-center text-gray-500 py-8\">\r\n                Select an employee to view their onboarding details\r\n              </div>\r\n            )}\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n}"
}