{
  "originalPath": "src\\components\\SpecificationDetails.tsx",
  "timestamp": "2025-10-15T16:14:12.230Z",
  "hash": "77e731e6df5688ee5fb5a1b1e74f0ff3491a9e08fe3294c6cd28a8c7d289eb0b",
  "size": 8176,
  "content": "import React from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Label } from '@/components/ui/label';\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from '@/components/ui/select';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport { X, Calculator } from 'lucide-react';\r\n\r\nexport interface SelectedSpec {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  frequency: string;\r\n  squareFootage: number;\r\n  customNotes: string;\r\n  estimatedHours: number;\r\n  pricePerSqft: number;\r\n}\r\n\r\ninterface SpecificationDetailsProps {\r\n  selectedSpecs: SelectedSpec[];\r\n  onSpecUpdate: (id: string, updates: Partial<SelectedSpec>) => void;\r\n  onSpecRemove: (id: string) => void;\r\n  onRecalculate: () => void;\r\n}\r\n\r\nconst SpecificationDetails: React.FC<SpecificationDetailsProps> = ({\r\n  selectedSpecs,\r\n  onSpecUpdate,\r\n  onSpecRemove,\r\n  onRecalculate,\r\n}) => {\r\n  const frequencyOptions = [\r\n    { value: 'daily', label: 'Daily' },\r\n    { value: 'twice-weekly', label: 'Twice Weekly' },\r\n    { value: 'weekly', label: 'Weekly' },\r\n    { value: 'bi-weekly', label: 'Bi-Weekly' },\r\n    { value: 'monthly', label: 'Monthly' },\r\n    { value: 'quarterly', label: 'Quarterly' },\r\n    { value: 'yearly', label: 'Yearly' },\r\n    { value: 'as-needed', label: 'As Needed' },\r\n  ];\r\n\r\n  const calculateSpecTotal = (spec: SelectedSpec) => {\r\n    return spec.squareFootage * spec.pricePerSqft;\r\n  };\r\n\r\n  const getTotalEstimate = () => {\r\n    return selectedSpecs.reduce(\r\n      (total, spec) => total + calculateSpecTotal(spec),\r\n      0\r\n    );\r\n  };\r\n\r\n  if (selectedSpecs.length === 0) {\r\n    return (\r\n      <Card className='bg-slate-800/50 border-slate-700'>\r\n        <CardContent className='p-6 text-center'>\r\n          <p className='text-slate-400'>\r\n            No specifications selected. Choose from the dropdown above.\r\n          </p>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className='space-y-4'>\r\n      <div className='flex justify-between items-center'>\r\n        <h3 className='text-white text-lg font-semibold'>\r\n          Selected Specifications\r\n        </h3>\r\n        <Button\r\n          onClick={onRecalculate}\r\n          className='bg-purple-600 hover:bg-purple-700'\r\n          size='sm'\r\n        >\r\n          <Calculator className='w-4 h-4 mr-2' />\r\n          Recalculate\r\n        </Button>\r\n      </div>\r\n\r\n      {selectedSpecs.map(spec => (\r\n        <Card key={spec.id} className='bg-slate-800/50 border-slate-700'>\r\n          <CardHeader className='pb-3'>\r\n            <div className='flex justify-between items-start'>\r\n              <CardTitle className='text-white text-base'>\r\n                {spec.name}\r\n              </CardTitle>\r\n              <Button\r\n                size='sm'\r\n                variant='ghost'\r\n                onClick={() => onSpecRemove(spec.id)}\r\n                className='text-red-400 hover:text-red-300 hover:bg-red-900/20'\r\n              >\r\n                <X className='w-4 h-4' />\r\n              </Button>\r\n            </div>\r\n          </CardHeader>\r\n          <CardContent className='space-y-4'>\r\n            <div>\r\n              <Label className='text-slate-300'>Description</Label>\r\n              <Textarea\r\n                value={spec.description}\r\n                onChange={e =>\r\n                  onSpecUpdate(spec.id, { description: e.target.value })\r\n                }\r\n                className='bg-slate-700 border-slate-600 text-white min-h-[60px]'\r\n              />\r\n            </div>\r\n\r\n            <div className='grid grid-cols-2 gap-4'>\r\n              <div>\r\n                <Label className='text-slate-300'>Frequency</Label>\r\n                <Select\r\n                  value={spec.frequency}\r\n                  onValueChange={value =>\r\n                    onSpecUpdate(spec.id, { frequency: value })\r\n                  }\r\n                >\r\n                  <SelectTrigger className='bg-slate-700 border-slate-600 text-white'>\r\n                    <SelectValue />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    {frequencyOptions.map(option => (\r\n                      <SelectItem key={option.value} value={option.value}>\r\n                        {option.label}\r\n                      </SelectItem>\r\n                    ))}\r\n                  </SelectContent>\r\n                </Select>\r\n              </div>\r\n\r\n              <div>\r\n                <Label className='text-slate-300'>Square Footage</Label>\r\n                <Input\r\n                  type='number'\r\n                  value={spec.squareFootage}\r\n                  onChange={e =>\r\n                    onSpecUpdate(spec.id, {\r\n                      squareFootage: Number(e.target.value),\r\n                    })\r\n                  }\r\n                  className='bg-slate-700 border-slate-600 text-white'\r\n                  placeholder='0'\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <div className='grid grid-cols-2 gap-4'>\r\n              <div>\r\n                <Label className='text-slate-300'>Estimated Hours</Label>\r\n                <Input\r\n                  type='number'\r\n                  step='0.5'\r\n                  value={spec.estimatedHours}\r\n                  onChange={e =>\r\n                    onSpecUpdate(spec.id, {\r\n                      estimatedHours: Number(e.target.value),\r\n                    })\r\n                  }\r\n                  className='bg-slate-700 border-slate-600 text-white'\r\n                  placeholder='0'\r\n                />\r\n              </div>\r\n\r\n              <div>\r\n                <Label className='text-slate-300'>Price per Sq Ft</Label>\r\n                <Input\r\n                  type='number'\r\n                  step='0.01'\r\n                  value={spec.pricePerSqft}\r\n                  onChange={e =>\r\n                    onSpecUpdate(spec.id, {\r\n                      pricePerSqft: Number(e.target.value),\r\n                    })\r\n                  }\r\n                  className='bg-slate-700 border-slate-600 text-white'\r\n                  placeholder='0.00'\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <div>\r\n              <Label className='text-slate-300'>Custom Notes</Label>\r\n              <Textarea\r\n                value={spec.customNotes}\r\n                onChange={e =>\r\n                  onSpecUpdate(spec.id, { customNotes: e.target.value })\r\n                }\r\n                className='bg-slate-700 border-slate-600 text-white min-h-[60px]'\r\n                placeholder='Additional requirements or notes...'\r\n              />\r\n            </div>\r\n\r\n            <div className='bg-slate-700/50 p-3 rounded-lg'>\r\n              <div className='flex justify-between items-center'>\r\n                <span className='text-slate-300'>Specification Total:</span>\r\n                <span className='text-green-400 font-semibold text-lg'>\r\n                  $\r\n                  {(typeof calculateSpecTotal(spec) === 'number' &&\r\n                  !isNaN(calculateSpecTotal(spec))\r\n                    ? calculateSpecTotal(spec)\r\n                    : 0\r\n                  ).toFixed(2)}\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      ))}\r\n\r\n      <Card className='bg-gradient-to-r from-purple-800/30 to-blue-800/30 border-purple-500'>\r\n        <CardContent className='p-4'>\r\n          <div className='flex justify-between items-center'>\r\n            <span className='text-white text-lg font-semibold'>\r\n              Total Estimate:\r\n            </span>\r\n            <span className='text-green-400 font-bold text-2xl'>\r\n              $\r\n              {(typeof getTotalEstimate() === 'number' &&\r\n              !isNaN(getTotalEstimate())\r\n                ? getTotalEstimate()\r\n                : 0\r\n              ).toFixed(2)}\r\n            </span>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SpecificationDetails;\r\n"
}