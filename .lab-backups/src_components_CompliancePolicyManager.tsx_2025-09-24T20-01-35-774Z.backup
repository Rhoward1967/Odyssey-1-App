{
  "originalPath": "src\\components\\CompliancePolicyManager.tsx",
  "timestamp": "2025-09-24T20:01:35.774Z",
  "hash": "7e0d7c2fbd804307b5f44f2428a02ae9cd83ab32b8d55b663b31dda62087f349",
  "size": 8672,
  "content": "import React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card';\r\nimport { Button } from './ui/button';\r\nimport { Badge } from './ui/badge';\r\nimport { Textarea } from './ui/textarea';\r\nimport { Input } from './ui/input';\r\nimport { Label } from './ui/label';\r\nimport { supabase } from '../lib/supabase';\r\nimport { Shield, AlertTriangle, CheckCircle, FileText, Users } from 'lucide-react';\r\n\r\ninterface ComplianceItem {\r\n  id: string;\r\n  name: string;\r\n  status: 'compliant' | 'warning' | 'non_compliant';\r\n  percentage: number;\r\n  last_updated: string;\r\n  description: string;\r\n}\r\n\r\ninterface PolicyDocument {\r\n  id: string;\r\n  title: string;\r\n  category: string;\r\n  last_updated: string;\r\n  version: string;\r\n  requires_acknowledgment: boolean;\r\n  acknowledged_count: number;\r\n  total_employees: number;\r\n}\r\n\r\nconst CompliancePolicyManager: React.FC = () => {\r\n  const [complianceItems, setComplianceItems] = useState<ComplianceItem[]>([]);\r\n  const [policies, setPolicies] = useState<PolicyDocument[]>([]);\r\n  const [newPolicy, setNewPolicy] = useState({ title: '', category: '', content: '' });\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    loadComplianceData();\r\n  }, []);\r\n\r\n  const loadComplianceData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      \r\n      // Load compliance items from Supabase\r\n      const { data: complianceData, error: complianceError } = await supabase\r\n        .from('compliance_tracking')\r\n        .select('*');\r\n\r\n      if (complianceError) throw complianceError;\r\n      setComplianceItems(complianceData || []);\r\n\r\n      // Load policy documents from Supabase\r\n      const { data: policyData, error: policyError } = await supabase\r\n        .from('policy_documents')\r\n        .select('*')\r\n        .order('last_updated', { ascending: false });\r\n\r\n      if (policyError) throw policyError;\r\n      setPolicies(policyData || []);\r\n    } catch (error) {\r\n      console.error('Error loading compliance data:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleCreatePolicy = async () => {\r\n    if (!newPolicy.title || !newPolicy.category || !newPolicy.content) return;\r\n\r\n    try {\r\n      const policyDoc = {\r\n        id: Date.now().toString(),\r\n        title: newPolicy.title,\r\n        category: newPolicy.category,\r\n        last_updated: new Date().toISOString().split('T')[0],\r\n        version: '1.0',\r\n        requires_acknowledgment: true,\r\n        acknowledged_count: 0,\r\n        total_employees: 15\r\n      };\r\n\r\n      const { error } = await supabase\r\n        .from('policy_documents')\r\n        .insert([policyDoc]);\r\n\r\n      if (error) throw error;\r\n\r\n      setPolicies(prev => [policyDoc, ...prev]);\r\n      setNewPolicy({ title: '', category: '', content: '' });\r\n    } catch (error) {\r\n      console.error('Error creating policy:', error);\r\n      // No fallback to local state; only live data is used\r\n    }\r\n  };\r\n\r\n  const getStatusIcon = (status: string) => {\r\n    switch (status) {\r\n      case 'compliant':\r\n        return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\r\n      case 'warning':\r\n        return <AlertTriangle className=\"h-5 w-5 text-yellow-500\" />;\r\n      case 'non_compliant':\r\n        return <AlertTriangle className=\"h-5 w-5 text-red-500\" />;\r\n      default:\r\n        return <Shield className=\"h-5 w-5 text-gray-500\" />;\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"p-6 flex justify-center\">\r\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"p-6 space-y-6\">\r\n      <h1 className=\"text-3xl font-bold\">Compliance & Policy Management</h1>\r\n      \r\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <Shield className=\"h-5 w-5 text-blue-500\" />\r\n              Compliance Dashboard\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent className=\"space-y-4\">\r\n            {complianceItems.map((item) => (\r\n              <div key={item.id} className=\"p-4 border rounded-lg\">\r\n                <div className=\"flex items-center justify-between mb-2\">\r\n                  <div className=\"flex items-center gap-2\">\r\n                    {getStatusIcon(item.status)}\r\n                    <h3 className=\"font-semibold\">{item.name}</h3>\r\n                  </div>\r\n                  <Badge \r\n                    variant={item.status === 'compliant' ? 'default' : \r\n                            item.status === 'warning' ? 'secondary' : 'destructive'}\r\n                  >\r\n                    {item.percentage}%\r\n                  </Badge>\r\n                </div>\r\n                <p className=\"text-sm text-gray-600 mb-2\">{item.description}</p>\r\n                <div className=\"flex justify-between items-center text-xs text-gray-500\">\r\n                  <span>Last Updated: {new Date(item.last_updated).toLocaleDateString()}</span>\r\n                  <Button size=\"sm\" variant=\"outline\">\r\n                    Update\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <FileText className=\"h-5 w-5 text-green-500\" />\r\n              Policy Documents\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent className=\"space-y-4\">\r\n            {policies.map((policy) => (\r\n              <div key={policy.id} className=\"p-4 border rounded-lg\">\r\n                <div className=\"flex justify-between items-start mb-2\">\r\n                  <h3 className=\"font-semibold\">{policy.title}</h3>\r\n                  <Badge variant=\"outline\">v{policy.version}</Badge>\r\n                </div>\r\n                <div className=\"text-sm space-y-1 mb-3\">\r\n                  <div><strong>Category:</strong> {policy.category}</div>\r\n                  <div><strong>Updated:</strong> {new Date(policy.last_updated).toLocaleDateString()}</div>\r\n                  {policy.requires_acknowledgment && (\r\n                    <div className=\"flex items-center gap-2\">\r\n                      <Users className=\"h-4 w-4\" />\r\n                      <span>{policy.acknowledged_count}/{policy.total_employees} acknowledged</span>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n                <div className=\"flex gap-2\">\r\n                  <Button size=\"sm\" variant=\"outline\">\r\n                    View\r\n                  </Button>\r\n                  <Button size=\"sm\" variant=\"outline\">\r\n                    Send Reminder\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Create New Policy</CardTitle>\r\n        </CardHeader>\r\n        <CardContent className=\"space-y-4\">\r\n          <div className=\"grid grid-cols-2 gap-4\">\r\n            <div>\r\n              <Label htmlFor=\"policy-title\">Policy Title</Label>\r\n              <Input\r\n                id=\"policy-title\"\r\n                value={newPolicy.title}\r\n                onChange={(e) => setNewPolicy(prev => ({ ...prev, title: e.target.value }))}\r\n                placeholder=\"Enter policy title\"\r\n              />\r\n            </div>\r\n            <div>\r\n              <Label htmlFor=\"policy-category\">Category</Label>\r\n              <Input\r\n                id=\"policy-category\"\r\n                value={newPolicy.category}\r\n                onChange={(e) => setNewPolicy(prev => ({ ...prev, category: e.target.value }))}\r\n                placeholder=\"e.g., HR, Safety, General\"\r\n              />\r\n            </div>\r\n          </div>\r\n          <div>\r\n            <Label htmlFor=\"policy-content\">Policy Content</Label>\r\n            <Textarea\r\n              id=\"policy-content\"\r\n              value={newPolicy.content}\r\n              onChange={(e) => setNewPolicy(prev => ({ ...prev, content: e.target.value }))}\r\n              placeholder=\"Enter policy content and guidelines...\"\r\n              rows={6}\r\n            />\r\n          </div>\r\n          <div className=\"flex gap-2\">\r\n            <Button onClick={handleCreatePolicy}>\r\n              Create Policy\r\n            </Button>\r\n            <Button variant=\"outline\">\r\n              Save as Draft\r\n            </Button>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CompliancePolicyManager;"
}