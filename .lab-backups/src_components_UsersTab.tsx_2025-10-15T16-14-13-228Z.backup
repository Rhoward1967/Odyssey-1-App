{
  "originalPath": "src\\components\\UsersTab.tsx",
  "timestamp": "2025-10-15T16:14:13.228Z",
  "hash": "4c76ef46520ddb7a287e9b504e4054d7893e228b6d213a2b426facd31bb0449b",
  "size": 7597,
  "content": "  // ATLAS-IMPLEMENTATION-6: Create the Handler Function for Bulk Actions\r\n  const handleBulkAction = async (action: string, userIds: string[]) => {\r\n    // TODO: Implement backend API call for the specified bulk action.\r\n    console.log(`Bulk action '${action}' for user IDs: ${userIds.join(', ')} to be implemented.`);\r\n  };\r\n  // ATLAS-IMPLEMENTATION-5: Create the Handler Function for Suspend Users\r\n  const handleSuspendUsers = async (userIds: string[]) => {\r\n    // TODO: Implement backend API call to suspend the specified users.\r\n    console.log(`Suspend users functionality for user IDs: ${userIds.join(', ')} to be implemented.`);\r\n  };\r\nimport React, { useState } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\r\nimport { Users, UserPlus, UserCheck, UserX, Activity, Shield, Mail, Phone, CheckCircle } from 'lucide-react';\r\n\r\nexport default function UsersTab() {\r\n  const [isAddUserOpen, setIsAddUserOpen] = useState(false);\r\n  const [newUser, setNewUser] = useState({\r\n    name: '',\r\n    email: '',\r\n    phone: '',\r\n    role: 'user'\r\n  });\r\n\r\n  // Placeholder: selectedUserIds state for demonstration\r\n  const [selectedUserIds] = useState<string[]>([]);\r\n\r\n  const handleAddUser = () => {\r\n    // Add user logic here\r\n    console.log('Adding user:', newUser);\r\n    setIsAddUserOpen(false);\r\n    setNewUser({ name: '', email: '', phone: '', role: 'user' });\r\n  };\r\n\r\n  // ATLAS-IMPLEMENTATION-4: Create the Handler Function for Approve Users\r\n  const handleApproveUsers = async (userIds: string[]) => {\r\n    // TODO: Implement backend API call to approve the specified users.\r\n    console.log(`Approve users functionality for user IDs: ${userIds.join(', ')} to be implemented.`);\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* User Statistics */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n        <Card className=\"bg-gray-800/50 border-gray-700\">\r\n          <CardContent className=\"p-4\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <p className=\"text-gray-400 text-sm\">Total Users</p>\r\n                <p className=\"text-2xl font-bold text-white\">2,847</p>\r\n              </div>\r\n              <Users className=\"w-8 h-8 text-blue-400\" />\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n        \r\n        <Card className=\"bg-gray-800/50 border-gray-700\">\r\n          <CardContent className=\"p-4\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <p className=\"text-gray-400 text-sm\">Active Today</p>\r\n                <p className=\"text-2xl font-bold text-green-400\">1,234</p>\r\n              </div>\r\n              <Activity className=\"w-8 h-8 text-green-400\" />\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n        \r\n        <Card className=\"bg-gray-800/50 border-gray-700\">\r\n          <CardContent className=\"p-4\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <p className=\"text-gray-400 text-sm\">New This Week</p>\r\n                <p className=\"text-2xl font-bold text-purple-400\">89</p>\r\n              </div>\r\n              <UserPlus className=\"w-8 h-8 text-purple-400\" />\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n\r\n      {/* User Management Actions */}\r\n      <Card className=\"bg-gray-800/50 border-gray-700\">\r\n        <CardHeader>\r\n          <CardTitle className=\"text-white flex items-center\">\r\n            <Shield className=\"w-5 h-5 mr-2 text-blue-400\" />\r\n            User Management\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent className=\"space-y-4\">\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-3\">\r\n            <Button \r\n              variant=\"outline\" \r\n              size=\"sm\"\r\n              className=\"border-green-600 text-green-400 hover:bg-green-600/20\"\r\n              onClick={() => handleApproveUsers(selectedUserIds)}\r\n            >\r\n              <CheckCircle className=\"mr-2 h-4 w-4\" />\r\n              Approve Users\r\n            </Button>\r\n            <Button \r\n              variant=\"destructive\"\r\n              size=\"sm\"\r\n              onClick={() => handleSuspendUsers(selectedUserIds)}\r\n            >\r\n              <UserX className=\"mr-2 h-4 w-4\" />\r\n              Suspend Users\r\n            </Button>\r\n            \r\n            <Dialog open={isAddUserOpen} onOpenChange={setIsAddUserOpen}>\r\n              <DialogTrigger asChild>\r\n                <Button variant=\"outline\" className=\"border-blue-600 text-blue-400 hover:bg-blue-600/20\">\r\n                  <UserPlus className=\"w-4 h-4 mr-2\" />\r\n                  Add New User\r\n                </Button>\r\n              </DialogTrigger>\r\n              <DialogContent className=\"bg-gray-800 border-gray-700\">\r\n                <DialogHeader>\r\n                  <DialogTitle className=\"text-white\">Add New User</DialogTitle>\r\n                </DialogHeader>\r\n                <div className=\"space-y-4\">\r\n                  <div>\r\n                    <label className=\"text-sm text-gray-400\">Name</label>\r\n                    <Input\r\n                      value={newUser.name}\r\n                      onChange={(e) => setNewUser({...newUser, name: e.target.value})}\r\n                      className=\"bg-gray-700 border-gray-600 text-white\"\r\n                      placeholder=\"Enter full name\"\r\n                    />\r\n                  </div>\r\n                  <div>\r\n                    <label className=\"text-sm text-gray-400\">Email</label>\r\n                    <Input\r\n                      type=\"email\"\r\n                      value={newUser.email}\r\n                      onChange={(e) => setNewUser({...newUser, email: e.target.value})}\r\n                      className=\"bg-gray-700 border-gray-600 text-white\"\r\n                      placeholder=\"Enter email address\"\r\n                    />\r\n                  </div>\r\n                  <div>\r\n                    <label className=\"text-sm text-gray-400\">Phone</label>\r\n                    <Input\r\n                      value={newUser.phone}\r\n                      onChange={(e) => setNewUser({...newUser, phone: e.target.value})}\r\n                      className=\"bg-gray-700 border-gray-600 text-white\"\r\n                      placeholder=\"Enter phone number\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"flex gap-2\">\r\n                    <Button onClick={handleAddUser} className=\"bg-blue-600 hover:bg-blue-700\">\r\n                      Add User\r\n                    </Button>\r\n                    <Button variant=\"outline\" onClick={() => setIsAddUserOpen(false)}>\r\n                      Cancel\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              </DialogContent>\r\n            </Dialog>\r\n            \r\n            <Button \r\n              variant=\"outline\"\r\n              size=\"sm\"\r\n              className=\"border-purple-600 text-purple-400 hover:bg-purple-600/20\"\r\n              onClick={() => handleBulkAction('defaultAction', selectedUserIds)}\r\n            >\r\n              <Users className=\"w-4 h-4 mr-2\" />\r\n              Bulk Actions\r\n            </Button>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}"
}