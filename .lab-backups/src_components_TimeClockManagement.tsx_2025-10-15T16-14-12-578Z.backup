{
  "originalPath": "src\\components\\TimeClockManagement.tsx",
  "timestamp": "2025-10-15T16:14:12.578Z",
  "hash": "f0d1842ae132eeb691d89db380f09cac51a4425d239728d29160409f2594bcf0",
  "size": 12304,
  "content": "import React, { useState, useEffect } from 'react';\r\nimport { Card, CardHeader, CardTitle, CardContent } from './ui/card';\r\nimport { Button } from './ui/button';\r\nimport { Input } from './ui/input';\r\nimport { Badge } from './ui/badge';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from './ui/tabs';\r\nimport {\r\n  AlertTriangle,\r\n  Clock,\r\n  Edit,\r\n  Flag,\r\n  Settings,\r\n  Users,\r\n} from 'lucide-react';\r\nimport { supabase } from '@/lib/supabase';\r\nimport ActiveTimeClock from './ActiveTimeClock';\r\n\r\ninterface TimeEntry {\r\n  id: string;\r\n  employee_id: string;\r\n  employee_name: string;\r\n  clock_in: string;\r\n  clock_out?: string;\r\n  total_hours?: number;\r\n  status: string;\r\n  flags: any;\r\n  location?: string;\r\n}\r\nexport default function TimeClockManagement() {\r\n  const [timeEntries, setTimeEntries] = useState<TimeEntry[]>([]);\r\n  const [flaggedEntries, setFlaggedEntries] = useState<TimeEntry[]>([]);\r\n  const [selectedEntry, setSelectedEntry] = useState<TimeEntry | null>(null);\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    loadTimeEntries();\r\n    loadFlaggedEntries();\r\n  }, []);\r\n\r\n  const loadTimeEntries = async () => {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('time_entries')\r\n        .select('*')\r\n        .order('created_at', { ascending: false })\r\n        .limit(50);\r\n\r\n      if (error) throw error;\r\n      setTimeEntries(data || []);\r\n    } catch (error) {\r\n      console.error('Error loading time entries:', error);\r\n    }\r\n  };\r\n\r\n  const loadFlaggedEntries = async () => {\r\n    try {\r\n      // Mock data instead of Supabase call\r\n      const mockFlagged = [\r\n        {\r\n          id: '1',\r\n          employee_name: 'John Doe',\r\n          issue: 'Long break',\r\n          timestamp: new Date().toISOString(),\r\n          flags: { long_break: true },\r\n          clock_in: new Date().toISOString(),\r\n        },\r\n        {\r\n          id: '2',\r\n          employee_name: 'Jane Smith',\r\n          issue: 'Missed clock out',\r\n          timestamp: new Date(Date.now() - 7200000).toISOString(),\r\n          flags: { missed_clock_out: true },\r\n          clock_in: new Date(Date.now() - 7200000).toISOString(),\r\n        },\r\n      ];\r\n      setFlaggedEntries(mockFlagged);\r\n    } catch (error) {\r\n      console.error('Error loading flagged entries:', error);\r\n    }\r\n  };\r\n\r\n  const handleEditEntry = async (entry: TimeEntry, updates: any) => {\r\n    setLoading(true);\r\n    try {\r\n      // Mock edit functionality\r\n      console.log('Editing entry:', entry.id, 'with updates:', updates);\r\n\r\n      await loadTimeEntries();\r\n      setEditMode(false);\r\n      setSelectedEntry(null);\r\n    } catch (error) {\r\n      console.error('Error editing entry:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const formatTime = (timestamp: string) => {\r\n    return new Date(timestamp).toLocaleString();\r\n  };\r\n\r\n  const getStatusBadge = (status: string) => {\r\n    const colors = {\r\n      active: 'bg-green-500',\r\n      completed: 'bg-blue-500',\r\n      flagged: 'bg-red-500',\r\n      edited: 'bg-yellow-500',\r\n    };\r\n    return <Badge className={colors[status] || 'bg-gray-500'}>{status}</Badge>;\r\n  };\r\n\r\n  return (\r\n    <div className='space-y-6'>\r\n      <div className='flex items-center justify-between'>\r\n        <h2 className='font-bold flex items-center gap-2 text-lg sm:text-2xl'>\r\n          <Clock className='w-5 h-5 sm:w-6 sm:h-6' />\r\n          <span className='block sm:hidden'>Time Clock</span>\r\n          <span className='hidden sm:block'>Time Clock Management</span>\r\n        </h2>\r\n        <div className='flex gap-2'>\r\n          <Button onClick={loadTimeEntries} variant='outline'>\r\n            Refresh\r\n          </Button>\r\n          <Button variant='outline'>\r\n            <Settings className='w-4 h-4 mr-2' />\r\n            Settings\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      <Tabs defaultValue='entries' className='w-full'>\r\n        <TabsList>\r\n          <TabsTrigger value='entries'>All Entries</TabsTrigger>\r\n          <TabsTrigger value='flagged' className='text-red-600'>\r\n            <Flag className='w-4 h-4 mr-2' />\r\n            Flagged ({flaggedEntries.length})\r\n          </TabsTrigger>\r\n          <TabsTrigger value='active'>Active Clocks</TabsTrigger>\r\n          <TabsTrigger value='reports'>Reports</TabsTrigger>\r\n        </TabsList>\r\n\r\n        <TabsContent value='entries'>\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>Recent Time Entries</CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className='space-y-4'>\r\n                {timeEntries.map(entry => (\r\n                  <div\r\n                    key={entry.id}\r\n                    className='flex items-center justify-between p-4 border rounded-lg'\r\n                  >\r\n                    <div className='flex-1'>\r\n                      <div className='flex items-center gap-4'>\r\n                        <div>\r\n                          <p className='font-medium'>{entry.employee_name}</p>\r\n                          <p className='text-sm text-gray-600'>\r\n                            In: {formatTime(entry.clock_in)}\r\n                            {entry.clock_out &&\r\n                              ` | Out: ${formatTime(entry.clock_out)}`}\r\n                          </p>\r\n                        </div>\r\n                        {getStatusBadge(entry.status)}\r\n                      </div>\r\n                      {entry.total_hours && (\r\n                        <p className='text-sm mt-2'>\r\n                          Total Hours: {entry.total_hours} | Location:{' '}\r\n                          {entry.location || 'Unknown'}\r\n                        </p>\r\n                      )}\r\n                    </div>\r\n                    <div className='flex gap-2'>\r\n                      <Button\r\n                        size='sm'\r\n                        variant='outline'\r\n                        onClick={() => {\r\n                          setSelectedEntry(entry);\r\n                          setEditMode(true);\r\n                        }}\r\n                      >\r\n                        <Edit className='w-4 h-4' />\r\n                      </Button>\r\n                      {Object.keys(entry.flags || {}).length > 0 && (\r\n                        <Badge variant='destructive'>\r\n                          <AlertTriangle className='w-3 h-3 mr-1' />\r\n                          Flagged\r\n                        </Badge>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n\r\n        <TabsContent value='flagged'>\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className='text-red-600'>\r\n                Flagged Entries Requiring Attention\r\n              </CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className='space-y-4'>\r\n                {flaggedEntries.map(entry => (\r\n                  <div\r\n                    key={entry.id}\r\n                    className='p-4 border-l-4 border-red-500 bg-red-50 rounded'\r\n                  >\r\n                    <div className='flex justify-between items-start'>\r\n                      <div>\r\n                        <p className='font-medium text-red-800'>\r\n                          {entry.employee_name}\r\n                        </p>\r\n                        <p className='text-sm text-red-600'>\r\n                          Issues: {Object.keys(entry.flags || {}).join(', ')}\r\n                        </p>\r\n                        <p className='text-xs text-gray-600 mt-1'>\r\n                          {formatTime(entry.clock_in)}\r\n                        </p>\r\n                      </div>\r\n                      <Button size='sm' variant='destructive'>\r\n                        Review & Fix\r\n                      </Button>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n        <TabsContent value='active'>\r\n          <ActiveTimeClock />\r\n        </TabsContent>\r\n        <TabsContent value='reports'>\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>Time Clock Reports & Analytics</CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className='grid grid-cols-1 md:grid-cols-3 gap-4'>\r\n                <div className='p-4 bg-blue-50 rounded-lg'>\r\n                  <h3 className='font-medium text-blue-800'>\r\n                    Today's Activity\r\n                  </h3>\r\n                  <p className='text-2xl font-bold text-blue-600'>\r\n                    {\r\n                      timeEntries.filter(\r\n                        e =>\r\n                          new Date(e.clock_in).toDateString() ===\r\n                          new Date().toDateString()\r\n                      ).length\r\n                    }\r\n                  </p>\r\n                  <p className='text-sm text-blue-600'>Clock-ins today</p>\r\n                </div>\r\n                <div className='p-4 bg-yellow-50 rounded-lg'>\r\n                  <h3 className='font-medium text-yellow-800'>\r\n                    Flagged Issues\r\n                  </h3>\r\n                  <p className='text-2xl font-bold text-yellow-600'>\r\n                    {flaggedEntries.length}\r\n                  </p>\r\n                  <p className='text-sm text-yellow-600'>Require attention</p>\r\n                </div>\r\n                <div className='p-4 bg-green-50 rounded-lg'>\r\n                  <h3 className='font-medium text-green-800'>Active Now</h3>\r\n                  <p className='text-2xl font-bold text-green-600'>\r\n                    {timeEntries.filter(e => e.status === 'active').length}\r\n                  </p>\r\n                  <p className='text-sm text-green-600'>Currently working</p>\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n      </Tabs>\r\n\r\n      {/* Edit Modal */}\r\n      {editMode && selectedEntry && (\r\n        <div className='fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50'>\r\n          <Card className='w-full max-w-md'>\r\n            <CardHeader>\r\n              <CardTitle>Edit Time Entry</CardTitle>\r\n            </CardHeader>\r\n            <CardContent className='space-y-4'>\r\n              <div>\r\n                <label className='block text-sm font-medium mb-1'>\r\n                  Employee\r\n                </label>\r\n                <Input value={selectedEntry.employee_name} disabled />\r\n              </div>\r\n              <div>\r\n                <label className='block text-sm font-medium mb-1'>\r\n                  Clock In\r\n                </label>\r\n                <Input\r\n                  type='datetime-local'\r\n                  defaultValue={new Date(selectedEntry.clock_in)\r\n                    .toISOString()\r\n                    .slice(0, 16)}\r\n                />\r\n              </div>\r\n              {selectedEntry.clock_out && (\r\n                <div>\r\n                  <label className='block text-sm font-medium mb-1'>\r\n                    Clock Out\r\n                  </label>\r\n                  <Input\r\n                    type='datetime-local'\r\n                    defaultValue={new Date(selectedEntry.clock_out)\r\n                      .toISOString()\r\n                      .slice(0, 16)}\r\n                  />\r\n                </div>\r\n              )}\r\n              <div className='flex gap-2'>\r\n                <Button\r\n                  onClick={() => {\r\n                    setEditMode(false);\r\n                    setSelectedEntry(null);\r\n                  }}\r\n                  variant='outline'\r\n                  className='flex-1'\r\n                >\r\n                  Cancel\r\n                </Button>\r\n                <Button\r\n                  onClick={() => handleEditEntry(selectedEntry, {})}\r\n                  className='flex-1'\r\n                  disabled={loading}\r\n                >\r\n                  Save Changes\r\n                </Button>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"
}