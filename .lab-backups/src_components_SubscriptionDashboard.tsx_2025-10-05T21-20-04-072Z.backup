{
  "originalPath": "src\\components\\SubscriptionDashboard.tsx",
  "timestamp": "2025-10-05T21:20:04.072Z",
  "hash": "73ca852b1b0746cf1323b7134cd4e678ec717d4e6ef15191ddbcfb3562a043c6",
  "size": 5896,
  "content": "import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardHeader,\r\n  CardTitle,\r\n} from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { supabase } from '@/lib/supabase';\r\nimport { useAuth } from '@/components/AuthProvider';\r\nimport {\r\n  Crown,\r\n  Calendar,\r\n  CreditCard,\r\n  AlertCircle,\r\n  CheckCircle,\r\n} from 'lucide-react';\r\n\r\ninterface Subscription {\r\n  id: string;\r\n  plan_id: string;\r\n  status: string;\r\n  current_period_end: string;\r\n  created_at: string;\r\n}\r\n\r\nconst SubscriptionDashboard: React.FC = () => {\r\n  const { user } = useAuth();\r\n  const [subscription, setSubscription] = useState<Subscription | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    if (!user) return;\r\n    const fetchSubscription = async () => {\r\n      try {\r\n        const { data, error } = await supabase\r\n          .from('subscriptions')\r\n          .select('*')\r\n          .eq('user_id', user.id)\r\n          .order('created_at', { ascending: false })\r\n          .limit(1)\r\n          .single();\r\n        if (!error && data) {\r\n          setSubscription(data);\r\n        }\r\n      } catch (err) {\r\n        console.error('Error fetching subscription:', err);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    fetchSubscription();\r\n  }, [user]);\r\n\r\n  const handleCancelSubscription = async () => {\r\n    if (!subscription) return;\r\n\r\n    const confirmed = confirm(\r\n      'Are you sure you want to cancel your subscription?'\r\n    );\r\n    if (!confirmed) return;\r\n\r\n    try {\r\n      const { error } = await supabase\r\n        .from('subscriptions')\r\n        .update({ status: 'canceled' })\r\n        .eq('id', subscription.id);\r\n\r\n      if (!error) {\r\n        setSubscription({ ...subscription, status: 'canceled' });\r\n      }\r\n    } catch (err) {\r\n      console.error('Error canceling subscription:', err);\r\n    }\r\n  };\r\n\r\n  const getPlanName = (planId: string) => {\r\n    const plans = {\r\n      basic: 'ODYSSEY Basic',\r\n      pro: 'ODYSSEY Professional',\r\n      enterprise: 'ODYSSEY Enterprise',\r\n    };\r\n    return plans[planId as keyof typeof plans] || planId;\r\n  };\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'active':\r\n        return 'bg-green-500';\r\n      case 'canceled':\r\n        return 'bg-red-500';\r\n      case 'past_due':\r\n        return 'bg-yellow-500';\r\n      default:\r\n        return 'bg-gray-500';\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Card className='bg-slate-800/50 border-slate-700'>\r\n        <CardContent className='p-8 text-center'>\r\n          <div className='animate-pulse text-gray-400'>\r\n            Loading subscription...\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  if (!subscription) {\r\n    return (\r\n      <Card className='bg-slate-800/50 border-slate-700'>\r\n        <CardHeader>\r\n          <CardTitle className='text-white flex items-center'>\r\n            <AlertCircle className='w-5 h-5 mr-2 text-yellow-500' />\r\n            No Active Subscription\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <p className='text-gray-400 mb-4'>\r\n            You don't have an active subscription.\r\n          </p>\r\n          <Button className='bg-purple-600 hover:bg-purple-700'>\r\n            Choose a Plan\r\n          </Button>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Card className='bg-slate-800/50 border-slate-700'>\r\n      <CardHeader>\r\n        <CardTitle className='text-white flex items-center'>\r\n          <Crown className='w-5 h-5 mr-2 text-purple-500' />\r\n          Current Subscription\r\n        </CardTitle>\r\n        <CardDescription>Manage your ODYSSEY-1 subscription</CardDescription>\r\n      </CardHeader>\r\n      <CardContent className='space-y-6'>\r\n        <div className='flex items-center justify-between'>\r\n          <div>\r\n            <h3 className='text-xl font-semibold text-white'>\r\n              {getPlanName(subscription.plan_id)}\r\n            </h3>\r\n            <p className='text-gray-400'>\r\n              Active since{' '}\r\n              {new Date(subscription.created_at).toLocaleDateString()}\r\n            </p>\r\n          </div>\r\n          <Badge className={getStatusColor(subscription.status)}>\r\n            {subscription.status}\r\n          </Badge>\r\n        </div>\r\n\r\n        <div className='grid grid-cols-2 gap-4'>\r\n          <div className='flex items-center space-x-2'>\r\n            <Calendar className='w-4 h-4 text-gray-400' />\r\n            <div>\r\n              <p className='text-sm text-gray-400'>Next billing</p>\r\n              <p className='text-white'>\r\n                {new Date(subscription.current_period_end).toLocaleDateString()}\r\n              </p>\r\n            </div>\r\n          </div>\r\n          <div className='flex items-center space-x-2'>\r\n            <CheckCircle className='w-4 h-4 text-green-500' />\r\n            <div>\r\n              <p className='text-sm text-gray-400'>Status</p>\r\n              <p className='text-white capitalize'>{subscription.status}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className='flex space-x-3'>\r\n          <Button variant='outline' className='flex-1'>\r\n            <CreditCard className='w-4 h-4 mr-2' />\r\n            Update Payment\r\n          </Button>\r\n          {subscription.status === 'active' && (\r\n            <Button\r\n              variant='destructive'\r\n              className='flex-1'\r\n              onClick={handleCancelSubscription}\r\n            >\r\n              <span className='md:hidden'>Cancel</span>\r\n              <span className='hidden md:inline'>Cancel Subscription</span>\r\n            </Button>\r\n          )}\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default SubscriptionDashboard;\r\n"
}