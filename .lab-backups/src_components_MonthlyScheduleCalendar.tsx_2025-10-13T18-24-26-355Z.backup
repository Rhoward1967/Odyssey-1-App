{
  "originalPath": "src\\components\\MonthlyScheduleCalendar.tsx",
  "timestamp": "2025-10-13T18:24:26.355Z",
  "hash": "99ceff90cc0a9205983e159897d22a6bb9a3aded5c295abac2e4b16383ce6261",
  "size": 12882,
  "content": "import React, { useState, useEffect } from 'react';\r\nimport { Calendar, ChevronLeft, ChevronRight, Clock, User, Plus, UserPlus } from 'lucide-react';\r\nimport { Button } from './ui/button';\r\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card';\r\nimport { supabase } from '@/lib/supabase';\r\nimport SchedulePopup from './SchedulePopup';\r\nimport AddEmployeePopup from './AddEmployeePopup';\r\n\r\ninterface Employee {\r\n  id: string;\r\n  name: string;\r\n  department: string;\r\n  position: string;\r\n}\r\n\r\ninterface Shift {\r\n  id: string;\r\n  employeeId: string;\r\n  employeeName: string;\r\n  date: string;\r\n  startTime: string;\r\n  endTime: string;\r\n  department: string;\r\n  position: string;\r\n  location?: string;\r\n  notes?: string;\r\n}\r\n\r\nexport default function MonthlyScheduleCalendar() {\r\n  const [currentDate, setCurrentDate] = useState(new Date());\r\n  const [employees, setEmployees] = useState<Employee[]>([]);\r\n  const [shifts, setShifts] = useState<Shift[]>([]);\r\n  const [selectedEmployee, setSelectedEmployee] = useState<Employee | null>(null);\r\n  const [showPopup, setShowPopup] = useState(false);\r\n  const [selectedDateForPopup, setSelectedDateForPopup] = useState<string>('');\r\n  const [selectedShift, setSelectedShift] = useState<Shift | null>(null);\r\n  const [showAddEmployee, setShowAddEmployee] = useState(false);\r\n\r\n  useEffect(() => {\r\n    loadEmployees();\r\n    loadShifts();\r\n  }, []);\r\n\r\n  const loadEmployees = async () => {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('employees')\r\n        .select('*')\r\n        .order('name');\r\n      \r\n      if (!error && data) {\r\n        setEmployees(data);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading employees:', error);\r\n    }\r\n  };\r\n\r\n  const loadShifts = async () => {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('employee_shifts')\r\n        .select('*')\r\n        .order('date');\r\n      \r\n      if (!error && data) {\r\n        setShifts(data);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading shifts:', error);\r\n    }\r\n  };\r\n\r\n  const getDaysInMonth = (date: Date) => {\r\n    const year = date.getFullYear();\r\n    const month = date.getMonth();\r\n    const firstDay = new Date(year, month, 1);\r\n    const lastDay = new Date(year, month + 1, 0);\r\n    const daysInMonth = lastDay.getDate();\r\n    const startingDayOfWeek = firstDay.getDay();\r\n\r\n    const days = [];\r\n    \r\n    // Add empty cells for days before the first day of the month\r\n    for (let i = 0; i < startingDayOfWeek; i++) {\r\n      days.push(null);\r\n    }\r\n    \r\n    // Add all days of the month\r\n    for (let day = 1; day <= daysInMonth; day++) {\r\n      days.push(new Date(year, month, day));\r\n    }\r\n    \r\n    return days;\r\n  };\r\n\r\n  const assignShift = async (date: Date, timeSlot: string) => {\r\n    if (!selectedEmployee) return;\r\n\r\n    const dateStr = date.toISOString().split('T')[0];\r\n    const [startTime, endTime] = timeSlot.split('-');\r\n\r\n    try {\r\n      const shiftData = {\r\n        employeeId: selectedEmployee.id,\r\n        employeeName: selectedEmployee.name,\r\n        date: dateStr,\r\n        startTime: startTime.trim(),\r\n        endTime: endTime.trim(),\r\n        department: selectedEmployee.department,\r\n        position: selectedEmployee.position,\r\n        status: 'scheduled'\r\n      };\r\n\r\n      const { data, error } = await supabase\r\n        .from('employee_shifts')\r\n        .insert([shiftData])\r\n        .select()\r\n        .single();\r\n\r\n      if (!error && data) {\r\n        setShifts([...shifts, data]);\r\n        setSelectedEmployee(null);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error assigning shift:', error);\r\n    }\r\n  };\r\n\r\n  const getShiftsForDate = (date: Date) => {\r\n    const dateStr = date.toISOString().split('T')[0];\r\n    return shifts.filter(shift => shift.date === dateStr);\r\n  };\r\n\r\n  const monthNames = [\r\n    'January', 'February', 'March', 'April', 'May', 'June',\r\n    'July', 'August', 'September', 'October', 'November', 'December'\r\n  ];\r\n\r\n  const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n  // Remove automatic time slots - user will assign manually\r\n\r\n  const days = getDaysInMonth(currentDate);\r\n\r\n  const navigateMonth = (direction: number) => {\r\n    const newDate = new Date(currentDate);\r\n    newDate.setMonth(currentDate.getMonth() + direction);\r\n    setCurrentDate(newDate);\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-indigo-900\">\r\n      {/* Employee Sidebar */}\r\n      <div className=\"w-80 bg-black/20 backdrop-blur-sm border-r border-white/10 p-4\">\r\n        <Card className=\"bg-black/20 backdrop-blur-sm border-white/10 h-full\">\r\n          <CardHeader>\r\n            <CardTitle className=\"text-white flex items-center justify-between\">\r\n              <div className=\"flex items-center gap-2\">\r\n                <User className=\"h-5 w-5\" />\r\n                Employees\r\n              </div>\r\n              <Button\r\n                variant=\"outline\"\r\n                size=\"sm\"\r\n                onClick={() => setShowAddEmployee(true)}\r\n                className=\"bg-green-500/20 border-green-400/30 text-green-200 hover:bg-green-500/30\"\r\n              >\r\n                <UserPlus className=\"h-4 w-4\" />\r\n              </Button>\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent className=\"space-y-2 overflow-y-auto\">\r\n            {employees.map(employee => (\r\n              <div key={employee.id} className=\"space-y-2\">\r\n                <div className=\"p-3 rounded-lg bg-white/5\">\r\n                  <div className=\"text-white font-medium\">{employee.name}</div>\r\n                  <div className=\"text-sm text-gray-300\">{employee.position}</div>\r\n                  <div className=\"text-xs text-gray-400\">{employee.department}</div>\r\n                  <Button\r\n                    onClick={() => {\r\n                      setSelectedEmployee(employee);\r\n                      setShowPopup(true);\r\n                    }}\r\n                    size=\"sm\"\r\n                    className=\"mt-2 w-full bg-blue-500/20 border-blue-400/30 text-blue-200 hover:bg-blue-500/30\"\r\n                  >\r\n                    <Plus className=\"h-3 w-3 mr-1\" />\r\n                    Add to Schedule\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n\r\n      {/* Calendar Main Area */}\r\n      <div className=\"flex-1 p-6\">\r\n        <Card className=\"bg-black/20 backdrop-blur-sm border-white/10 h-full\">\r\n          <CardHeader>\r\n            <div className=\"flex items-center justify-between\">\r\n              <CardTitle className=\"text-white flex items-center gap-2\">\r\n                <Calendar className=\"h-6 w-6\" />\r\n                30-Day Schedule Calendar\r\n              </CardTitle>\r\n              <div className=\"flex items-center gap-4\">\r\n                <Button\r\n                  variant=\"outline\"\r\n                  size=\"sm\"\r\n                  onClick={() => navigateMonth(-1)}\r\n                  className=\"bg-black/20 border-white/20 text-white hover:bg-white/10\"\r\n                >\r\n                  <ChevronLeft className=\"h-4 w-4\" />\r\n                </Button>\r\n                <h2 className=\"text-xl font-semibold text-white\">\r\n                  {monthNames[currentDate.getMonth()]} {currentDate.getFullYear()}\r\n                </h2>\r\n                <Button\r\n                  variant=\"outline\"\r\n                  size=\"sm\"\r\n                  onClick={() => navigateMonth(1)}\r\n                  className=\"bg-black/20 border-white/20 text-white hover:bg-white/10\"\r\n                >\r\n                  <ChevronRight className=\"h-4 w-4\" />\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </CardHeader>\r\n          <CardContent className=\"p-0\">\r\n            <div className=\"grid grid-cols-7 gap-1 p-4\">\r\n              {/* Day headers */}\r\n              {dayNames.map(day => (\r\n                <div key={day} className=\"text-center text-white font-medium p-2\">\r\n                  {day}\r\n                </div>\r\n              ))}\r\n              \r\n              {/* Calendar days */}\r\n              {days.map((day, index) => (\r\n                <div\r\n                  key={index}\r\n                  className={`min-h-[120px] border border-white/10 rounded-lg p-1 ${\r\n                    day ? 'bg-white/5' : ''\r\n                  }`}\r\n                >\r\n                  {day && (\r\n                    <>\r\n                      <div className=\"text-white text-sm font-medium mb-1\">\r\n                        {day.getDate()}\r\n                      </div>\r\n                       <div className=\"space-y-1\">\r\n                        {getShiftsForDate(day).map(shift => (\r\n                          <div \r\n                            key={shift.id} \r\n                            onClick={() => {\r\n                              const employee = employees.find(emp => emp.id === shift.employeeId);\r\n                              setSelectedEmployee(employee || null);\r\n                              setSelectedShift(shift);\r\n                              setSelectedDateForPopup(day.toISOString().split('T')[0]);\r\n                              setShowPopup(true);\r\n                            }}\r\n                            className=\"text-xs p-1 rounded bg-green-500/30 text-green-200 cursor-pointer hover:bg-green-500/40\"\r\n                          >\r\n                            <div className=\"font-medium\">{shift.employeeName}</div>\r\n                            <div>{shift.startTime} - {shift.endTime}</div>\r\n                          </div>\r\n                        ))}\r\n                      </div>\r\n                    </>\r\n                  )}\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n\r\n      {/* Schedule Popup */}\r\n      {showPopup && (\r\n        <SchedulePopup\r\n          isOpen={showPopup}\r\n          onClose={() => {\r\n            setShowPopup(false);\r\n            setSelectedShift(null);\r\n          }}\r\n          date={selectedDateForPopup}\r\n          employee={selectedEmployee}\r\n          existingShift={selectedShift}\r\n          onSave={(data) => {\r\n            if (selectedEmployee) {\r\n              if (selectedShift) {\r\n                // Update existing shift\r\n                const updatedShiftData = {\r\n                  startTime: data.startTime,\r\n                  endTime: data.endTime,\r\n                  location: data.location,\r\n                  notes: data.notes\r\n                };\r\n                \r\n                supabase\r\n                  .from('employee_shifts')\r\n                  .update(updatedShiftData)\r\n                  .eq('id', selectedShift.id)\r\n                  .select()\r\n                  .single()\r\n                  .then(({ data: updatedShift, error }) => {\r\n                    if (!error && updatedShift) {\r\n                      setShifts(shifts.map(s => s.id === selectedShift.id ? updatedShift : s));\r\n                    }\r\n                  });\r\n              } else {\r\n                // Create new shift\r\n                const shiftData = {\r\n                  employeeId: selectedEmployee.id,\r\n                  employeeName: selectedEmployee.name,\r\n                  date: selectedDateForPopup,\r\n                  startTime: data.startTime,\r\n                  endTime: data.endTime,\r\n                  department: selectedEmployee.department,\r\n                  position: selectedEmployee.position,\r\n                  location: data.location,\r\n                  notes: data.notes,\r\n                  status: 'scheduled'\r\n                };\r\n                \r\n                supabase\r\n                  .from('employee_shifts')\r\n                  .insert([shiftData])\r\n                  .select()\r\n                  .single()\r\n                  .then(({ data: newShift, error }) => {\r\n                    if (!error && newShift) {\r\n                      setShifts([...shifts, newShift]);\r\n                    }\r\n                  });\r\n              }\r\n            }\r\n          }}\r\n        />\r\n      )}\r\n\r\n      {/* Add Employee Popup */}\r\n      {showAddEmployee && (\r\n        <AddEmployeePopup\r\n          isOpen={showAddEmployee}\r\n          onClose={() => setShowAddEmployee(false)}\r\n          onSave={async (data) => {\r\n            try {\r\n              const { data: newEmployee, error } = await supabase\r\n                .from('employees')\r\n                .insert([data])\r\n                .select()\r\n                .single();\r\n              \r\n              if (!error && newEmployee) {\r\n                setEmployees([...employees, newEmployee]);\r\n              }\r\n            } catch (error) {\r\n              console.error('Error adding employee:', error);\r\n            }\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}"
}