{
  "originalPath": "src\\components\\CalendarView.tsx",
  "timestamp": "2025-09-23T16:47:32.626Z",
  "hash": "bbc33e0517aff5697f4af67f2073a1b2360f20926f237efd0ec73b28375e9776",
  "size": 15128,
  "content": "import React, { useState, useEffect } from 'react';\r\nimport { Calendar } from '@/components/ui/calendar';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\nimport { ChevronLeft, ChevronRight, Plus, Clock, MapPin, CalendarDays } from 'lucide-react';\r\nimport { supabase } from '@/lib/supabase';\r\n\r\ninterface Appointment {\r\n  id: string;\r\n  title: string;\r\n  description?: string;\r\n  start_time: string;\r\n  end_time: string;\r\n  location?: string;\r\n  status: string;\r\n}\r\n\r\ninterface CalendarViewProps {\r\n  onNewAppointment?: () => void;\r\n}\r\n\r\nexport function CalendarView({ onNewAppointment }: CalendarViewProps) {\r\n  const [selectedDate, setSelectedDate] = useState<Date>(new Date());\r\n  const [appointments, setAppointments] = useState<Appointment[]>([]);\r\n  const [weeklyAppointments, setWeeklyAppointments] = useState<Appointment[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [activeView, setActiveView] = useState<'day' | 'week' | 'month'>('day');\r\n\r\n  useEffect(() => {\r\n    fetchAppointments();\r\n    fetchWeeklyAppointments();\r\n  }, [selectedDate]);\r\n\r\n  const fetchAppointments = async () => {\r\n    try {\r\n      const startOfDay = new Date(selectedDate);\r\n      startOfDay.setHours(0, 0, 0, 0);\r\n      const endOfDay = new Date(selectedDate);\r\n      endOfDay.setHours(23, 59, 59, 999);\r\n\r\n      const { data, error } = await supabase\r\n        .from('appointments')\r\n        .select('*')\r\n        .gte('start_time', startOfDay.toISOString())\r\n        .lte('start_time', endOfDay.toISOString())\r\n        .order('start_time');\r\n\r\n      if (error) throw error;\r\n      setAppointments(data || []);\r\n    } catch (error) {\r\n      console.error('Error fetching appointments:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchWeeklyAppointments = async () => {\r\n    try {\r\n      const startOfWeek = new Date(selectedDate);\r\n      startOfWeek.setDate(selectedDate.getDate() - selectedDate.getDay());\r\n      startOfWeek.setHours(0, 0, 0, 0);\r\n      \r\n      const endOfWeek = new Date(startOfWeek);\r\n      endOfWeek.setDate(startOfWeek.getDate() + 6);\r\n      endOfWeek.setHours(23, 59, 59, 999);\r\n\r\n      const { data, error } = await supabase\r\n        .from('appointments')\r\n        .select('*')\r\n        .gte('start_time', startOfWeek.toISOString())\r\n        .lte('start_time', endOfWeek.toISOString())\r\n        .order('start_time');\r\n\r\n      if (error) throw error;\r\n      setWeeklyAppointments(data || []);\r\n    } catch (error) {\r\n      console.error('Error fetching weekly appointments:', error);\r\n    }\r\n  };\r\n\r\n  const formatTime = (dateString: string) => {\r\n    return new Date(dateString).toLocaleTimeString('en-US', {\r\n      hour: 'numeric',\r\n      minute: '2-digit',\r\n      hour12: true\r\n    });\r\n  };\r\n\r\n  const formatDate = (dateString: string) => {\r\n    return new Date(dateString).toLocaleDateString('en-US', {\r\n      weekday: 'short',\r\n      month: 'short',\r\n      day: 'numeric'\r\n    });\r\n  };\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'confirmed': return 'bg-green-100 text-green-800';\r\n      case 'cancelled': return 'bg-red-100 text-red-800';\r\n      case 'completed': return 'bg-blue-100 text-blue-800';\r\n      default: return 'bg-yellow-100 text-yellow-800';\r\n    }\r\n  };\r\n\r\n  const navigateDate = (direction: 'prev' | 'next') => {\r\n    const newDate = new Date(selectedDate);\r\n    if (activeView === 'day') {\r\n      newDate.setDate(selectedDate.getDate() + (direction === 'next' ? 1 : -1));\r\n    } else if (activeView === 'week') {\r\n      newDate.setDate(selectedDate.getDate() + (direction === 'next' ? 7 : -7));\r\n    } else {\r\n      newDate.setMonth(selectedDate.getMonth() + (direction === 'next' ? 1 : -1));\r\n    }\r\n    setSelectedDate(newDate);\r\n  };\r\n\r\n  const getWeekDays = () => {\r\n    const startOfWeek = new Date(selectedDate);\r\n    startOfWeek.setDate(selectedDate.getDate() - selectedDate.getDay());\r\n    \r\n    return Array.from({ length: 7 }, (_, i) => {\r\n      const day = new Date(startOfWeek);\r\n      day.setDate(startOfWeek.getDate() + i);\r\n      return day;\r\n    });\r\n  };\r\n\r\n  const getAppointmentsForDate = (date: Date) => {\r\n    const dateStr = date.toDateString();\r\n    return weeklyAppointments.filter(apt => \r\n      new Date(apt.start_time).toDateString() === dateStr\r\n    );\r\n  };\r\n\r\n  const today = new Date();\r\n  const isToday = (date: Date) => date.toDateString() === today.toDateString();\r\n  const isSelected = (date: Date) => date.toDateString() === selectedDate.toDateString();\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Enhanced Date Navigation */}\r\n      <Card>\r\n        <CardHeader>\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"flex items-center gap-4\">\r\n              <h2 className=\"text-2xl font-bold\">Calendar</h2>\r\n              <div className=\"flex items-center gap-2\">\r\n                <Button variant=\"outline\" size=\"sm\" onClick={() => navigateDate('prev')}>\r\n                  <ChevronLeft className=\"h-4 w-4\" />\r\n                </Button>\r\n                <Button variant=\"outline\" size=\"sm\" onClick={() => setSelectedDate(new Date())}>\r\n                  Today\r\n                </Button>\r\n                <Button variant=\"outline\" size=\"sm\" onClick={() => navigateDate('next')}>\r\n                  <ChevronRight className=\"h-4 w-4\" />\r\n                </Button>\r\n              </div>\r\n            </div>\r\n            <div className=\"flex items-center gap-2\">\r\n              <Tabs value={activeView} onValueChange={(v) => setActiveView(v as any)}>\r\n                <TabsList>\r\n                  <TabsTrigger value=\"day\">Day</TabsTrigger>\r\n                  <TabsTrigger value=\"week\">Week</TabsTrigger>\r\n                  <TabsTrigger value=\"month\">Month</TabsTrigger>\r\n                </TabsList>\r\n              </Tabs>\r\n              <Button onClick={onNewAppointment}>\r\n                <Plus className=\"h-4 w-4 mr-2\" />\r\n                New Appointment\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </CardHeader>\r\n      </Card>\r\n\r\n      <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\r\n        {/* Calendar Picker */}\r\n        <Card className=\"lg:col-span-1\">\r\n          <CardHeader>\r\n            <CardTitle>\r\n              {selectedDate.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <Calendar\r\n              mode=\"single\"\r\n              selected={selectedDate}\r\n              onSelect={(date) => date && setSelectedDate(date)}\r\n              className=\"rounded-md border\"\r\n              modifiers={{\r\n                today: today,\r\n                hasAppointments: (date) => getAppointmentsForDate(date).length > 0\r\n              }}\r\n              modifiersStyles={{\r\n                hasAppointments: { \r\n                  backgroundColor: '#dbeafe', \r\n                  color: '#1e40af',\r\n                  fontWeight: 'bold'\r\n                }\r\n              }}\r\n            />\r\n            <div className=\"mt-4 space-y-2 text-sm\">\r\n              <div className=\"flex items-center gap-2\">\r\n                <div className=\"w-3 h-3 bg-blue-100 border border-blue-300 rounded\"></div>\r\n                <span>Has appointments</span>\r\n              </div>\r\n              <div className=\"flex items-center gap-2\">\r\n                <CalendarDays className=\"h-4 w-4 text-gray-500\" />\r\n                <span className=\"text-gray-600\">\r\n                  {selectedDate.toLocaleDateString('en-US', {\r\n                    weekday: 'long',\r\n                    year: 'numeric',\r\n                    month: 'long',\r\n                    day: 'numeric'\r\n                  })}\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Main Content */}\r\n        <Card className=\"lg:col-span-3\">\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center justify-between\">\r\n              {activeView === 'day' && (\r\n                <>\r\n                  <span>\r\n                    {selectedDate.toLocaleDateString('en-US', {\r\n                      weekday: 'long',\r\n                      year: 'numeric',\r\n                      month: 'long',\r\n                      day: 'numeric'\r\n                    })}\r\n                    {isToday(selectedDate) && <Badge className=\"ml-2\" variant=\"secondary\">Today</Badge>}\r\n                  </span>\r\n                  <Badge variant=\"outline\">\r\n                    {appointments.length} appointment{appointments.length !== 1 ? 's' : ''}\r\n                  </Badge>\r\n                </>\r\n              )}\r\n              {activeView === 'week' && (\r\n                <>\r\n                  <span>\r\n                    Week of {getWeekDays()[0].toLocaleDateString('en-US', {\r\n                      month: 'long',\r\n                      day: 'numeric'\r\n                    })} - {getWeekDays()[6].toLocaleDateString('en-US', {\r\n                      month: 'long',\r\n                      day: 'numeric',\r\n                      year: 'numeric'\r\n                    })}\r\n                  </span>\r\n                  <Badge variant=\"outline\">\r\n                    {weeklyAppointments.length} total appointments\r\n                  </Badge>\r\n                </>\r\n              )}\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            {activeView === 'day' && (\r\n              <>\r\n                {loading ? (\r\n                  <div className=\"text-center py-8 text-gray-500\">Loading appointments...</div>\r\n                ) : appointments.length === 0 ? (\r\n                  <div className=\"text-center py-8 text-gray-500\">\r\n                    <CalendarDays className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\r\n                    <p>No appointments scheduled for this day</p>\r\n                    <Button className=\"mt-4\" onClick={onNewAppointment}>\r\n                      <Plus className=\"h-4 w-4 mr-2\" />\r\n                      Schedule an appointment\r\n                    </Button>\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"space-y-4\">\r\n                    {appointments.map((appointment) => (\r\n                      <div key={appointment.id} className=\"border rounded-lg p-4 hover:bg-gray-50 transition-colors\">\r\n                        <div className=\"flex items-start justify-between\">\r\n                          <div className=\"flex-1\">\r\n                            <h3 className=\"font-semibold text-lg\">{appointment.title}</h3>\r\n                            {appointment.description && (\r\n                              <p className=\"text-gray-600 mt-1\">{appointment.description}</p>\r\n                            )}\r\n                            <div className=\"flex items-center gap-4 mt-2 text-sm text-gray-500\">\r\n                              <div className=\"flex items-center gap-1\">\r\n                                <Clock className=\"h-4 w-4\" />\r\n                                {formatTime(appointment.start_time)} - {formatTime(appointment.end_time)}\r\n                              </div>\r\n                              {appointment.location && (\r\n                                <div className=\"flex items-center gap-1\">\r\n                                  <MapPin className=\"h-4 w-4\" />\r\n                                  {appointment.location}\r\n                                </div>\r\n                              )}\r\n                            </div>\r\n                          </div>\r\n                          <Badge className={getStatusColor(appointment.status)}>\r\n                            {appointment.status}\r\n                          </Badge>\r\n                        </div>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                )}\r\n              </>\r\n            )}\r\n\r\n            {activeView === 'week' && (\r\n              <div className=\"space-y-4\">\r\n                <div className=\"grid grid-cols-7 gap-2\">\r\n                  {getWeekDays().map((day, index) => (\r\n                    <div\r\n                      key={index}\r\n                      className={`p-3 border rounded-lg cursor-pointer transition-colors ${\r\n                        isSelected(day) \r\n                          ? 'bg-blue-100 border-blue-300' \r\n                          : isToday(day)\r\n                          ? 'bg-green-50 border-green-200'\r\n                          : 'hover:bg-gray-50'\r\n                      }`}\r\n                      onClick={() => setSelectedDate(day)}\r\n                    >\r\n                      <div className=\"text-center\">\r\n                        <div className=\"text-sm font-medium\">\r\n                          {day.toLocaleDateString('en-US', { weekday: 'short' })}\r\n                        </div>\r\n                        <div className={`text-lg font-bold ${\r\n                          isToday(day) ? 'text-green-600' : \r\n                          isSelected(day) ? 'text-blue-600' : 'text-gray-900'\r\n                        }`}>\r\n                          {day.getDate()}\r\n                        </div>\r\n                        <div className=\"mt-1\">\r\n                          {getAppointmentsForDate(day).length > 0 && (\r\n                            <Badge variant=\"secondary\" className=\"text-xs\">\r\n                              {getAppointmentsForDate(day).length}\r\n                            </Badge>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n                \r\n                {getAppointmentsForDate(selectedDate).length > 0 && (\r\n                  <div className=\"space-y-2\">\r\n                    <h4 className=\"font-semibold\">\r\n                      Appointments for {formatDate(selectedDate.toISOString())}:\r\n                    </h4>\r\n                    {getAppointmentsForDate(selectedDate).map((appointment) => (\r\n                      <div key={appointment.id} className=\"border rounded p-3 bg-gray-50\">\r\n                        <div className=\"flex items-center justify-between\">\r\n                          <div>\r\n                            <span className=\"font-medium\">{appointment.title}</span>\r\n                            <span className=\"ml-2 text-sm text-gray-500\">\r\n                              {formatTime(appointment.start_time)}\r\n                            </span>\r\n                          </div>\r\n                          <Badge className={getStatusColor(appointment.status)} variant=\"outline\">\r\n                            {appointment.status}\r\n                          </Badge>\r\n                        </div>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                )}\r\n              </div>\r\n            )}\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n}"
}