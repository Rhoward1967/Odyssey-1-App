{
  "originalPath": "src\\components\\OdysseyGalaxyDemo.tsx",
  "timestamp": "2025-10-15T16:14:10.158Z",
  "hash": "d16baca7aa084870b6896502032ec8713e522755ba0ddd6c0bc5bfd83e531b5e",
  "size": 12377,
  "content": "import React, { useRef, useEffect, useState } from 'react';\r\n// Three.js-based dynamic galaxy demo for Odyssey-1\r\n// This is a standalone React component (not A-Frame)\r\n\r\n// @ts-ignore\r\nimport * as THREE from 'three';\r\n\r\nconst STAR_COUNT = 2500;\r\nconst ORBIT_RADIUS = 2.2;\r\nconst ORBIT_SPEED = 0.18;\r\nconst PLANET_RADIUS = 0.18;\r\nconst CORE_RADIUS = 0.65;\r\n\r\nfunction randomGalaxyPosition(radius: number, spiralArms = 3) {\r\n  // Disk/halo distribution: stars in a wide, thin circle around the orb\r\n  const angle = Math.random() * Math.PI * 2;\r\n  // More stars at a fixed radius, some randomization for natural look\r\n  const distance = radius * (0.85 + 0.25 * Math.random());\r\n  // Thin vertical spread for a disk/halo\r\n  const y = (Math.random() - 0.5) * 0.18;\r\n  const x = Math.cos(angle) * distance;\r\n  const z = Math.sin(angle) * distance;\r\n  return new THREE.Vector3(x, y, z);\r\n}\r\n\r\nexport default function OdysseyGalaxyDemo({ full = false }: { full?: boolean } = {}) {\r\n  // For mouse drag interaction\r\n  const [drag, setDrag] = useState({ active: false, lastX: 0, velocity: 0 });\r\n  const [info, setInfo] = useState<null | string>(null);\r\n  const mountRef = useRef<HTMLDivElement>(null);\r\n  const frameRef = useRef<number>();\r\n  const planetAngle = useRef(0);\r\n\r\n  useEffect(() => {\r\n    const mountNode = mountRef.current;\r\n    const width = mountNode?.clientWidth || 800;\r\n    const height = mountNode?.clientHeight || 500;\r\n    const scene = new THREE.Scene();\r\n    scene.background = new THREE.Color('#0a0026');\r\n\r\n    // Galaxy stars\r\n    const starGeometry = new THREE.BufferGeometry();\r\n    const starPositions = new Float32Array(STAR_COUNT * 3);\r\n    const starColors = new Float32Array(STAR_COUNT * 3);\r\n    for (let i = 0; i < STAR_COUNT; i++) {\r\n      const pos = randomGalaxyPosition(3.5, 4);\r\n      starPositions[i * 3] = pos.x;\r\n      starPositions[i * 3 + 1] = pos.y;\r\n      starPositions[i * 3 + 2] = pos.z;\r\n      // Color: blue/white core, purple/blue edges\r\n      const t = Math.min(1, pos.length() / 3.5);\r\n      const color = new THREE.Color().lerpColors(\r\n        new THREE.Color('#fff'),\r\n        new THREE.Color('#6e4cff'),\r\n        t\r\n      );\r\n      starColors[i * 3] = color.r;\r\n      starColors[i * 3 + 1] = color.g;\r\n      starColors[i * 3 + 2] = color.b;\r\n    }\r\n    starGeometry.setAttribute('position', new THREE.BufferAttribute(starPositions, 3));\r\n    starGeometry.setAttribute('color', new THREE.BufferAttribute(starColors, 3));\r\n    const starMaterial = new THREE.PointsMaterial({\r\n      size: 0.045,\r\n      vertexColors: true,\r\n      transparent: true,\r\n      opacity: 0.85,\r\n      depthWrite: false,\r\n      blending: THREE.AdditiveBlending\r\n    });\r\n    const stars = new THREE.Points(starGeometry, starMaterial);\r\n    scene.add(stars);\r\n\r\n\r\n    // Central AI core (blue orb)\r\n    const coreGeometry = new THREE.SphereGeometry(CORE_RADIUS, 48, 48);\r\n    const coreMaterial = new THREE.MeshPhysicalMaterial({\r\n      color: '#3bb9ff',\r\n      emissive: '#1a4d99',\r\n      emissiveIntensity: 0.7,\r\n      metalness: 0.8,\r\n      roughness: 0.15,\r\n      transparent: true,\r\n      opacity: 0.98,\r\n      clearcoat: 0.5,\r\n      clearcoatRoughness: 0.1\r\n    });\r\n    const core = new THREE.Mesh(coreGeometry, coreMaterial);\r\n    core.position.set(0, 0, 0);\r\n    core.name = 'core';\r\n    scene.add(core);\r\n\r\n    // No head or face, just the original AI core orb\r\n\r\n    // Add a wireframe cage around the orb\r\n    const cageGeometry = new THREE.SphereGeometry(CORE_RADIUS * 1.18, 32, 32);\r\n    const cageMaterial = new THREE.MeshBasicMaterial({\r\n      color: '#b3e6ff',\r\n      wireframe: true,\r\n      opacity: 0.45,\r\n      transparent: true\r\n    });\r\n    const cage = new THREE.Mesh(cageGeometry, cageMaterial);\r\n    cage.name = 'cage';\r\n    scene.add(cage);\r\n\r\n    // Orbiting planet\r\n    const planetGeometry = new THREE.SphereGeometry(PLANET_RADIUS, 32, 32);\r\n    const planetMaterial = new THREE.MeshPhysicalMaterial({\r\n      color: '#ffe600',\r\n      emissive: '#fffbe6',\r\n      emissiveIntensity: 0.5,\r\n      metalness: 0.6,\r\n      roughness: 0.3,\r\n      transparent: true,\r\n      opacity: 0.95\r\n    });\r\n  const planet = new THREE.Mesh(planetGeometry, planetMaterial);\r\n  planet.name = 'planet';\r\n  scene.add(planet);\r\n\r\n    // Lighting\r\n    const ambient = new THREE.AmbientLight('#b3e6ff', 0.7);\r\n    scene.add(ambient);\r\n    const point = new THREE.PointLight('#3bb9ff', 1.2, 10);\r\n    point.position.set(0, 0, 0);\r\n    scene.add(point);\r\n\r\n    // Camera\r\n    const camera = new THREE.PerspectiveCamera(60, width / height, 0.1, 30);\r\n    camera.position.set(0, 0.7, 5.5);\r\n    camera.lookAt(0, 0, 0);\r\n\r\n    // Renderer\r\n    const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\r\n    renderer.setSize(width, height);\r\n    renderer.setClearColor(0x0a0026, 1);\r\n    mountNode?.appendChild(renderer.domElement);\r\n\r\n    // Add pointer cursor on hover and handle clicks (must be after renderer is defined)\r\n    let hovered = false;\r\n    let userRotation = 0;\r\n    let userVelocity = 0;\r\n    let lastDragX = 0;\r\n    let dragging = false;\r\n\r\n    // Mouse/touch drag handlers\r\n    const onPointerDownDrag = (event: MouseEvent | TouchEvent) => {\r\n      dragging = true;\r\n      lastDragX = (event instanceof MouseEvent ? event.clientX : event.touches[0].clientX);\r\n    };\r\n    const onPointerMoveDrag = (event: MouseEvent | TouchEvent) => {\r\n      if (!dragging) return;\r\n      const x = (event instanceof MouseEvent ? event.clientX : event.touches[0].clientX);\r\n      const deltaX = x - lastDragX;\r\n      userVelocity = deltaX * 0.002;\r\n      userRotation += userVelocity;\r\n      lastDragX = x;\r\n    };\r\n    const onPointerUpDrag = () => {\r\n      dragging = false;\r\n    };\r\n    const onPointerMove = (event: MouseEvent) => {\r\n      if (!renderer.domElement) return;\r\n      const rect = renderer.domElement.getBoundingClientRect();\r\n      const x = ((event.clientX - rect.left) / rect.width) * 2 - 1;\r\n      const y = -((event.clientY - rect.top) / rect.height) * 2 + 1;\r\n      const mouse = new THREE.Vector2(x, y);\r\n      const raycaster = new THREE.Raycaster();\r\n      raycaster.setFromCamera(mouse, camera);\r\n      const intersects = raycaster.intersectObjects([core, cage, planet]);\r\n      if (intersects.length > 0) {\r\n        if (!hovered) {\r\n          renderer.domElement.style.cursor = 'pointer';\r\n          hovered = true;\r\n        }\r\n      } else {\r\n        if (hovered) {\r\n          renderer.domElement.style.cursor = '';\r\n          hovered = false;\r\n        }\r\n      }\r\n    };\r\n    const onPointerDown = (event: MouseEvent) => {\r\n      if (!renderer.domElement) return;\r\n      const rect = renderer.domElement.getBoundingClientRect();\r\n      const x = ((event.clientX - rect.left) / rect.width) * 2 - 1;\r\n      const y = -((event.clientY - rect.top) / rect.height) * 2 + 1;\r\n      const mouse = new THREE.Vector2(x, y);\r\n      const raycaster = new THREE.Raycaster();\r\n      raycaster.setFromCamera(mouse, camera);\r\n      const intersects = raycaster.intersectObjects([core, cage, planet]);\r\n      if (intersects.length > 0) {\r\n        const obj = intersects[0].object;\r\n        if (obj.name === 'core') setInfo('core');\r\n        else if (obj.name === 'cage') setInfo('cage');\r\n        else if (obj.name === 'planet') setInfo('planet');\r\n      }\r\n    };\r\n  renderer.domElement.addEventListener('pointermove', onPointerMove);\r\n  renderer.domElement.addEventListener('pointerdown', onPointerDown);\r\n  // Mouse drag listeners for galaxy rotation\r\n  renderer.domElement.addEventListener('mousedown', onPointerDownDrag);\r\n  renderer.domElement.addEventListener('mousemove', onPointerMoveDrag);\r\n  renderer.domElement.addEventListener('mouseup', onPointerUpDrag);\r\n  renderer.domElement.addEventListener('mouseleave', onPointerUpDrag);\r\n  // Touch support\r\n  renderer.domElement.addEventListener('touchstart', onPointerDownDrag);\r\n  renderer.domElement.addEventListener('touchmove', onPointerMoveDrag);\r\n  renderer.domElement.addEventListener('touchend', onPointerUpDrag);\r\n\r\n    // Animation loop\r\n    let t = 0;\r\n    function animate() {\r\n      t += 0.016;\r\n      // Twinkle effect\r\n      starMaterial.opacity = 0.7 + 0.25 * Math.abs(Math.sin(t * 0.7));\r\n      // Galaxy rotation: user controlled + inertia\r\n      if (!dragging) {\r\n        userVelocity *= 0.97; // inertia\r\n      }\r\n      userRotation += userVelocity + 0.0007;\r\n      stars.rotation.y = userRotation;\r\n      // Orbiting planet\r\n      planetAngle.current += ORBIT_SPEED * 0.016;\r\n      planet.position.set(\r\n        Math.cos(planetAngle.current) * ORBIT_RADIUS,\r\n        0.2 * Math.sin(planetAngle.current * 1.7),\r\n        Math.sin(planetAngle.current) * ORBIT_RADIUS\r\n      );\r\n      // Core subtle pulse\r\n      core.scale.setScalar(1 + 0.04 * Math.sin(t * 1.2));\r\n      renderer.render(scene, camera);\r\n      frameRef.current = requestAnimationFrame(animate);\r\n    }\r\n    animate();\r\n\r\n    // Cleanup\r\n    return () => {\r\n      if (frameRef.current) cancelAnimationFrame(frameRef.current);\r\n      renderer.dispose();\r\n      renderer.domElement.removeEventListener('pointermove', onPointerMove);\r\n      renderer.domElement.removeEventListener('pointerdown', onPointerDown);\r\n      renderer.domElement.removeEventListener('mousedown', onPointerDownDrag);\r\n      renderer.domElement.removeEventListener('mousemove', onPointerMoveDrag);\r\n      renderer.domElement.removeEventListener('mouseup', onPointerUpDrag);\r\n      renderer.domElement.removeEventListener('mouseleave', onPointerUpDrag);\r\n      renderer.domElement.removeEventListener('touchstart', onPointerDownDrag);\r\n      renderer.domElement.removeEventListener('touchmove', onPointerMoveDrag);\r\n      renderer.domElement.removeEventListener('touchend', onPointerUpDrag);\r\n      mountNode?.removeChild(renderer.domElement);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div\r\n      ref={mountRef}\r\n      style={full\r\n        ? {\r\n            width: '100%',\r\n            height: '60vh',\r\n            borderRadius: '1rem',\r\n            background: '#0a0026',\r\n            boxShadow: '0 0 32px #1a4d99',\r\n            position: 'relative',\r\n          }\r\n        : {\r\n            width: '100%',\r\n            height: '100%',\r\n            position: 'relative',\r\n            background: 'transparent',\r\n            borderRadius: 0,\r\n            boxShadow: 'none',\r\n          }\r\n      }\r\n    >\r\n      {info && (\r\n        <div style={{\r\n          position: 'absolute',\r\n          top: 0,\r\n          left: 0,\r\n          width: '100%',\r\n          height: '100%',\r\n          background: 'rgba(10,0,38,0.92)',\r\n          color: '#fff',\r\n          display: 'flex',\r\n          alignItems: 'center',\r\n          justifyContent: 'center',\r\n          zIndex: 10\r\n        }} onClick={() => setInfo(null)}>\r\n          <div style={{\r\n            background: 'rgba(30,30,60,0.98)',\r\n            borderRadius: '1rem',\r\n            boxShadow: '0 0 32px #1a4d99',\r\n            padding: '2.5rem 2rem',\r\n            maxWidth: 420,\r\n            textAlign: 'center',\r\n            position: 'relative'\r\n          }} onClick={e => e.stopPropagation()}>\r\n            <h2 style={{ fontSize: '2rem', color: '#b3e6ff', marginBottom: 16 }}>\r\n              {info === 'core' && 'Odyssey-1 AI Core'}\r\n              {info === 'cage' && 'Quantum Containment Cage'}\r\n              {info === 'planet' && 'Orbiting Data Node'}\r\n            </h2>\r\n            <p style={{ color: '#e0e0ff', fontSize: '1.1rem', marginBottom: 24 }}>\r\n              {info === 'core' && 'The central intelligence of Odyssey-1, glowing with quantum power and insight.'}\r\n              {info === 'cage' && 'A protective quantum lattice, containing and amplifying the AI core\\'s abilities.'}\r\n              {info === 'planet' && 'A data or business process, always in motion around the core, connecting the hive.'}\r\n            </p>\r\n            <button style={{\r\n              position: 'absolute',\r\n              top: 18,\r\n              right: 18,\r\n              background: '#1a4d99',\r\n              color: '#fff',\r\n              border: 'none',\r\n              borderRadius: '50%',\r\n              width: 36,\r\n              height: 36,\r\n              fontSize: 20,\r\n              cursor: 'pointer',\r\n              boxShadow: '0 0 8px #3bb9ff'\r\n            }} onClick={() => setInfo(null)}>&times;</button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"
}