{
  "originalPath": "src\\pages\\Appointments.tsx",
  "timestamp": "2025-10-15T16:14:13.505Z",
  "hash": "d1db8c923d5a42868357e1ec7ae655fa22ab2935aa85284c227a973e0a8a73ab",
  "size": 7358,
  "content": "import React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\nimport {\r\n  Calendar,\r\n  Clock,\r\n  MapPin,\r\n  Users,\r\n  Plus,\r\n  Settings,\r\n  RefreshCw,\r\n  Home,\r\n} from 'lucide-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { AppointmentScheduler } from '@/components/AppointmentScheduler';\r\nimport { GoogleCalendarSync } from '@/components/GoogleCalendarSync';\r\nimport { CalendarSelector } from '@/components/CalendarSelector';\r\nimport { supabase } from '@/lib/supabase';\r\n\r\ninterface Appointment {\r\n  id: string;\r\n  title: string;\r\n  description?: string;\r\n  start_time: string;\r\n  end_time: string;\r\n  location?: string;\r\n  attendees?: string[];\r\n  status: 'scheduled' | 'completed' | 'cancelled';\r\n  reminder_minutes: number;\r\n  created_at: string;\r\n}\r\n\r\nconst Appointments: React.FC = () => {\r\n  const [appointments, setAppointments] = useState<Appointment[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [selectedCalendar, setSelectedCalendar] = useState<string>('');\r\n  const [googleAccessToken, setGoogleAccessToken] = useState<string>('');\r\n  const [activeTab, setActiveTab] = useState('appointments');\r\n\r\n  const loadAppointments = async () => {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('appointments')\r\n        .select('*')\r\n        .order('start_time', { ascending: true });\r\n\r\n      if (error) throw error;\r\n      setAppointments(data || []);\r\n    } catch (error) {\r\n      console.error('Error loading appointments:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadAppointments();\r\n  }, []);\r\n\r\n  const AppointmentCard: React.FC<{ appointment: Appointment }> = ({\r\n    appointment,\r\n  }) => {\r\n    const startTime = new Date(appointment.start_time);\r\n    const endTime = new Date(appointment.end_time);\r\n\r\n    return (\r\n      <div className='border rounded-lg p-4 hover:bg-muted/50 transition-colors'>\r\n        <div className='flex items-start justify-between'>\r\n          <div className='space-y-2'>\r\n            <h3 className='font-semibold'>{appointment.title}</h3>\r\n            {appointment.description && (\r\n              <p className='text-sm text-muted-foreground'>\r\n                {appointment.description}\r\n              </p>\r\n            )}\r\n            <div className='flex items-center gap-4 text-sm text-muted-foreground'>\r\n              <div className='flex items-center gap-1'>\r\n                <Clock className='h-3 w-3' />\r\n                {startTime.toLocaleDateString()}{' '}\r\n                {startTime.toLocaleTimeString()} -{' '}\r\n                {endTime.toLocaleTimeString()}\r\n              </div>\r\n              {appointment.location && (\r\n                <div className='flex items-center gap-1'>\r\n                  <MapPin className='h-3 w-3' />\r\n                  {appointment.location}\r\n                </div>\r\n              )}\r\n              {appointment.attendees && appointment.attendees.length > 0 && (\r\n                <div className='flex items-center gap-1'>\r\n                  <Users className='h-3 w-3' />\r\n                  {appointment.attendees.length} attendee\r\n                  {appointment.attendees.length > 1 ? 's' : ''}\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n          <Badge\r\n            variant={\r\n              appointment.status === 'scheduled'\r\n                ? 'default'\r\n                : appointment.status === 'completed'\r\n                  ? 'secondary'\r\n                  : 'destructive'\r\n            }\r\n          >\r\n            {appointment.status}\r\n          </Badge>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className='container mx-auto p-6 space-y-6'>\r\n      <div className='flex items-center justify-between'>\r\n        <div>\r\n          <h1 className='text-3xl font-bold'>Appointments</h1>\r\n          <p className='text-muted-foreground'>\r\n            Manage your appointments and sync with Google Calendar\r\n          </p>\r\n        </div>\r\n        <div className='flex items-center gap-2'>\r\n          <AppointmentScheduler onAppointmentCreated={loadAppointments} />\r\n          <Link to='/' className='ml-2'>\r\n            <Button variant='outline' className='flex items-center gap-1'>\r\n              <Home className='w-4 h-4' />\r\n              Return Home\r\n            </Button>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n\r\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\r\n        <TabsList className='grid w-full grid-cols-3'>\r\n          <TabsTrigger value='appointments' className='flex items-center gap-2'>\r\n            <Calendar className='h-4 w-4' />\r\n            My Appointments\r\n          </TabsTrigger>\r\n          <TabsTrigger\r\n            value='google-calendar'\r\n            className='flex items-center gap-2'\r\n          >\r\n            <RefreshCw className='h-4 w-4' />\r\n            Google Calendar\r\n          </TabsTrigger>\r\n          <TabsTrigger value='settings' className='flex items-center gap-2'>\r\n            <Settings className='h-4 w-4' />\r\n            Calendar Settings\r\n          </TabsTrigger>\r\n        </TabsList>\r\n\r\n        <TabsContent value='appointments' className='space-y-4'>\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className='flex items-center justify-between'>\r\n                <span>Upcoming Appointments ({appointments.length})</span>\r\n                <Badge variant='outline'>\r\n                  {\r\n                    appointments.filter(apt => apt.status === 'scheduled')\r\n                      .length\r\n                  }{' '}\r\n                  Scheduled\r\n                </Badge>\r\n              </CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className='space-y-4'>\r\n                {appointments.length === 0 ? (\r\n                  <div className='text-center py-8'>\r\n                    <Calendar className='h-12 w-12 mx-auto text-muted-foreground mb-4' />\r\n                    <p className='text-muted-foreground'>\r\n                      No appointments scheduled\r\n                    </p>\r\n                    <p className='text-sm text-muted-foreground'>\r\n                      Create your first appointment to get started\r\n                    </p>\r\n                  </div>\r\n                ) : (\r\n                  appointments.map(appointment => (\r\n                    <AppointmentCard\r\n                      key={appointment.id}\r\n                      appointment={appointment}\r\n                    />\r\n                  ))\r\n                )}\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n\r\n        <TabsContent value='google-calendar' className='space-y-4'>\r\n          <GoogleCalendarSync />\r\n        </TabsContent>\r\n\r\n        <TabsContent value='settings' className='space-y-4'>\r\n          <CalendarSelector\r\n            onCalendarSelect={setSelectedCalendar}\r\n            selectedCalendar={selectedCalendar}\r\n            accessToken={googleAccessToken}\r\n          />\r\n        </TabsContent>\r\n      </Tabs>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Appointments;\r\n"
}