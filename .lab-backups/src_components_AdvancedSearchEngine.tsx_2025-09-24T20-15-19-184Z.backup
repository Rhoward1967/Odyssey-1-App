{
  "originalPath": "src\\components\\AdvancedSearchEngine.tsx",
  "timestamp": "2025-09-24T20:15:19.184Z",
  "hash": "8935ae8d8303b19458908a3c2c1d7902027077346f77e864df7ef412d0a46851",
  "size": 8592,
  "content": "import React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card';\r\nimport { Input } from './ui/input';\r\nimport { Button } from './ui/button';\r\nimport { Badge } from './ui/badge';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';\r\nimport { Checkbox } from './ui/checkbox';\r\nimport { supabase } from '../lib/supabase';\r\n\r\ninterface SearchResult {\r\n  id: string;\r\n  title: string;\r\n  content: string;\r\n  type: string;\r\n  category: string;\r\n  createdAt: string;\r\n  relevanceScore: number;\r\n}\r\n\r\ninterface SearchFilters {\r\n  type: string[];\r\n  category: string[];\r\n  dateRange: string;\r\n  sortBy: string;\r\n}\r\n\r\nexport default function AdvancedSearchEngine() {\r\n  const [query, setQuery] = useState('');\r\n  const [results, setResults] = useState<SearchResult[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [filters, setFilters] = useState<SearchFilters>({\r\n    type: [],\r\n    category: [],\r\n    dateRange: 'all',\r\n    sortBy: 'relevance'\r\n  });\r\n\r\n  const searchTypes = ['document', 'conversation', 'research', 'template'];\r\n  const categories = ['AI', 'Business', 'Research', 'Education', 'Technology'];\r\n  const dateRanges = [\r\n    { value: 'all', label: 'All Time' },\r\n    { value: '24h', label: 'Last 24 Hours' },\r\n    { value: '7d', label: 'Last 7 Days' },\r\n    { value: '30d', label: 'Last 30 Days' },\r\n    { value: '90d', label: 'Last 90 Days' }\r\n  ];\r\n\r\n  const performSearch = async () => {\r\n    if (!query.trim()) return;\r\n    setLoading(true);\r\n    try {\r\n      // Build Supabase query for live search\r\n      let supaQuery = supabase\r\n        .from('search_index')\r\n        .select('*')\r\n        .textSearch('content', query, { type: 'websearch' });\r\n\r\n      // Apply filters\r\n      if (filters.type.length > 0) {\r\n        supaQuery = supaQuery.in('type', filters.type);\r\n      }\r\n      if (filters.category.length > 0) {\r\n        supaQuery = supaQuery.in('category', filters.category);\r\n      }\r\n      if (filters.dateRange !== 'all') {\r\n        const now = new Date();\r\n        let afterDate = null;\r\n        switch (filters.dateRange) {\r\n          case '24h': afterDate = new Date(now.getTime() - 86400000); break;\r\n          case '7d': afterDate = new Date(now.getTime() - 604800000); break;\r\n          case '30d': afterDate = new Date(now.getTime() - 2592000000); break;\r\n          case '90d': afterDate = new Date(now.getTime() - 7776000000); break;\r\n        }\r\n        if (afterDate) {\r\n          supaQuery = supaQuery.gte('createdAt', afterDate.toISOString());\r\n        }\r\n      }\r\n\r\n      // Apply sorting\r\n      if (filters.sortBy === 'date') {\r\n        supaQuery = supaQuery.order('createdAt', { ascending: false });\r\n      } else if (filters.sortBy === 'title') {\r\n        supaQuery = supaQuery.order('title', { ascending: true });\r\n      } else {\r\n        supaQuery = supaQuery.order('relevanceScore', { ascending: false });\r\n      }\r\n\r\n      const { data, error } = await supaQuery;\r\n      if (error) throw error;\r\n      setResults(data || []);\r\n    } catch (error) {\r\n      console.error('Search failed:', error);\r\n      setResults([]);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleFilterChange = (filterType: keyof SearchFilters, value: any) => {\r\n    setFilters(prev => ({\r\n      ...prev,\r\n      [filterType]: value\r\n    }));\r\n  };\r\n\r\n  const toggleArrayFilter = (filterType: 'type' | 'category', value: string) => {\r\n    setFilters(prev => ({\r\n      ...prev,\r\n      [filterType]: prev[filterType].includes(value)\r\n        ? prev[filterType].filter(item => item !== value)\r\n        : [...prev[filterType], value]\r\n    }));\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (query.trim()) {\r\n      const debounceTimer = setTimeout(performSearch, 300);\r\n      return () => clearTimeout(debounceTimer);\r\n    }\r\n  }, [query, filters]);\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Advanced Search Engine</CardTitle>\r\n        </CardHeader>\r\n        <CardContent className=\"space-y-4\">\r\n          <div className=\"flex gap-2\">\r\n            <Input\r\n              placeholder=\"Search across all content...\"\r\n              value={query}\r\n              onChange={(e) => setQuery(e.target.value)}\r\n              className=\"flex-1\"\r\n            />\r\n            <Button onClick={performSearch} disabled={loading}>\r\n              {loading ? 'Searching...' : 'Search'}\r\n            </Button>\r\n          </div>\r\n\r\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\r\n            <div>\r\n              <label className=\"text-sm font-medium mb-2 block\">Content Type</label>\r\n              <div className=\"space-y-2\">\r\n                {searchTypes.map(type => (\r\n                  <div key={type} className=\"flex items-center space-x-2\">\r\n                    <Checkbox\r\n                      checked={filters.type.includes(type)}\r\n                      onCheckedChange={() => toggleArrayFilter('type', type)}\r\n                    />\r\n                    <label className=\"text-sm capitalize\">{type}</label>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n\r\n            <div>\r\n              <label className=\"text-sm font-medium mb-2 block\">Category</label>\r\n              <div className=\"space-y-2\">\r\n                {categories.map(category => (\r\n                  <div key={category} className=\"flex items-center space-x-2\">\r\n                    <Checkbox\r\n                      checked={filters.category.includes(category)}\r\n                      onCheckedChange={() => toggleArrayFilter('category', category)}\r\n                    />\r\n                    <label className=\"text-sm\">{category}</label>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n\r\n            <div>\r\n              <label className=\"text-sm font-medium mb-2 block\">Date Range</label>\r\n              <Select value={filters.dateRange} onValueChange={(value) => handleFilterChange('dateRange', value)}>\r\n                <SelectTrigger>\r\n                  <SelectValue />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  {dateRanges.map(range => (\r\n                    <SelectItem key={range.value} value={range.value}>\r\n                      {range.label}\r\n                    </SelectItem>\r\n                  ))}\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n\r\n            <div>\r\n              <label className=\"text-sm font-medium mb-2 block\">Sort By</label>\r\n              <Select value={filters.sortBy} onValueChange={(value) => handleFilterChange('sortBy', value)}>\r\n                <SelectTrigger>\r\n                  <SelectValue />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"relevance\">Relevance</SelectItem>\r\n                  <SelectItem value=\"date\">Date</SelectItem>\r\n                  <SelectItem value=\"title\">Title</SelectItem>\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Search Results ({results.length})</CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"space-y-4\">\r\n            {results.length === 0 ? (\r\n              <p className=\"text-gray-500 text-center py-8\">\r\n                {query ? 'No results found' : 'Enter a search query to get started'}\r\n              </p>\r\n            ) : (\r\n              results.map((result) => (\r\n                <div key={result.id} className=\"border rounded-lg p-4 hover:bg-gray-50\">\r\n                  <div className=\"flex items-start justify-between mb-2\">\r\n                    <h3 className=\"font-semibold text-lg\">{result.title}</h3>\r\n                    <div className=\"flex gap-2\">\r\n                      <Badge variant=\"outline\">{result.type}</Badge>\r\n                      <Badge variant=\"secondary\">{result.category}</Badge>\r\n                      <Badge variant=\"default\">{Math.round(result.relevanceScore * 100)}%</Badge>\r\n                    </div>\r\n                  </div>\r\n                  <p className=\"text-gray-600 mb-2\">{result.content}</p>\r\n                  <div className=\"text-sm text-gray-500\">\r\n                    {new Date(result.createdAt).toLocaleDateString()}\r\n                  </div>\r\n                </div>\r\n              ))\r\n            )}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}"
}