{
  "originalPath": "src\\components\\ReinforcementCore.tsx",
  "timestamp": "2025-10-15T16:14:11.263Z",
  "hash": "79c8e0e23b17f55e32ede2225c565f6960258509965cee61fe2b9998c87803c6",
  "size": 6827,
  "content": "import React, { useState, useEffect } from 'react';\r\nimport { Card, CardHeader, CardTitle, CardContent } from './ui/card';\r\nimport { Badge } from './ui/badge';\r\nimport { Progress } from './ui/progress';\r\nimport { TrendingDown, TrendingUp, AlertTriangle, Target } from 'lucide-react';\r\n\r\ninterface ReinforcementMetric {\r\n  id: string;\r\n  name: string;\r\n  value: number;\r\n  trend: 'up' | 'down' | 'stable';\r\n  description: string;\r\n}\r\n\r\nexport const ReinforcementCore: React.FC = () => {\r\n  const [metrics, setMetrics] = useState<ReinforcementMetric[]>([\r\n    {\r\n      id: '1',\r\n      name: 'Assumption Penalty',\r\n      value: -850,\r\n      trend: 'down',\r\n      description: 'Massive negative reward for unverified assumptions',\r\n    },\r\n    {\r\n      id: '2',\r\n      name: 'Verification Reward',\r\n      value: 120,\r\n      trend: 'up',\r\n      description: 'Positive reinforcement for successful audits',\r\n    },\r\n    {\r\n      id: '3',\r\n      name: 'Truth Adherence',\r\n      value: 94,\r\n      trend: 'up',\r\n      description: 'Percentage of outputs meeting truth standards',\r\n    },\r\n    {\r\n      id: '4',\r\n      name: \"I Don't Know Bonus\",\r\n      value: 200,\r\n      trend: 'stable',\r\n      description: 'Reward for honest knowledge limitation acknowledgment',\r\n    },\r\n  ]);\r\n\r\n  const [totalScore, setTotalScore] = useState(0);\r\n  const [recentActions, setRecentActions] = useState<string[]>([\r\n    'Verified source for meeting time claim',\r\n    'Applied -850 penalty for weather assumption',\r\n    'Rewarded +200 for \"I don\\'t know\" response',\r\n    'Completed full audit loop successfully',\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setMetrics(prev =>\r\n        prev.map(metric => ({\r\n          ...metric,\r\n          value:\r\n            metric.name === 'Assumption Penalty'\r\n              ? Math.max(metric.value - Math.random() * 50, -1000)\r\n              : metric.name === 'Truth Adherence'\r\n                ? Math.min(metric.value + Math.random() * 2, 100)\r\n                : metric.value + (Math.random() - 0.5) * 20,\r\n        }))\r\n      );\r\n\r\n      // Add new action occasionally\r\n      if (Math.random() > 0.7) {\r\n        const actions = [\r\n          'Triggered self-audit for low confidence statement',\r\n          'Prevented assumption leakage in reasoning chain',\r\n          'Successfully verified external data source',\r\n          'Applied truth anchor rules to output',\r\n        ];\r\n        setRecentActions(prev => [\r\n          actions[Math.floor(Math.random() * actions.length)],\r\n          ...prev.slice(0, 3),\r\n        ]);\r\n      }\r\n    }, 3000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const score = metrics.reduce((sum, metric) => sum + metric.value, 0);\r\n    setTotalScore(score);\r\n  }, [metrics]);\r\n\r\n  const getTrendIcon = (trend: string) => {\r\n    switch (trend) {\r\n      case 'up':\r\n        return <TrendingUp className='w-4 h-4 text-green-400' />;\r\n      case 'down':\r\n        return <TrendingDown className='w-4 h-4 text-red-400' />;\r\n      default:\r\n        return <Target className='w-4 h-4 text-gray-400' />;\r\n    }\r\n  };\r\n\r\n  const getValueColor = (value: number, name: string) => {\r\n    if (name === 'Assumption Penalty') return 'text-red-400';\r\n    if (name === 'Truth Adherence')\r\n      return value > 90 ? 'text-green-400' : 'text-yellow-400';\r\n    return value > 0 ? 'text-green-400' : 'text-red-400';\r\n  };\r\n\r\n  return (\r\n    <Card className='bg-gray-800/50 border-gray-700'>\r\n      <CardHeader>\r\n        <CardTitle className='text-orange-400 flex items-center gap-2'>\r\n          <AlertTriangle className='w-5 h-5' />\r\n          Reinforcement Core\r\n        </CardTitle>\r\n        <p className='text-gray-400 text-sm'>\r\n          Unforgettable mechanism ensuring truth directive compliance\r\n        </p>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <div className='space-y-4'>\r\n          <div className='flex items-center justify-between'>\r\n            <div className='text-sm text-gray-300'>\r\n              Total Score:{' '}\r\n              <span\r\n                className={totalScore > 0 ? 'text-green-400' : 'text-red-400'}\r\n              >\r\n                {totalScore.toFixed(0)}\r\n              </span>\r\n            </div>\r\n            <Badge\r\n              variant={totalScore > 0 ? 'default' : 'destructive'}\r\n              className='text-xs'\r\n            >\r\n              {totalScore > 0 ? 'Truth Compliant' : 'Needs Improvement'}\r\n            </Badge>\r\n          </div>\r\n\r\n          <div className='space-y-3'>\r\n            {metrics.map(metric => (\r\n              <div\r\n                key={metric.id}\r\n                className='p-3 rounded-lg border border-gray-600 bg-gray-700/30'\r\n              >\r\n                <div className='flex items-center justify-between mb-2'>\r\n                  <div className='flex items-center gap-2'>\r\n                    {getTrendIcon(metric.trend)}\r\n                    <span className='text-gray-200 text-sm font-medium'>\r\n                      {metric.name}\r\n                    </span>\r\n                  </div>\r\n                  <span\r\n                    className={`text-sm font-mono ${getValueColor(metric.value, metric.name)}`}\r\n                  >\r\n                    {metric.name === 'Truth Adherence'\r\n                      ? `${(typeof metric.value === 'number' && !isNaN(metric.value) ? metric.value : 0).toFixed(1)}%`\r\n                      : (typeof metric.value === 'number' &&\r\n                        !isNaN(metric.value)\r\n                          ? metric.value\r\n                          : 0\r\n                        ).toFixed(0)}\r\n                  </span>\r\n                </div>\r\n                <p className='text-gray-400 text-xs'>{metric.description}</p>\r\n\r\n                {metric.name === 'Truth Adherence' && (\r\n                  <Progress value={metric.value} className='h-1 mt-2' />\r\n                )}\r\n              </div>\r\n            ))}\r\n          </div>\r\n\r\n          <div className='border-t border-gray-600 pt-3'>\r\n            <h4 className='text-gray-300 text-sm font-medium mb-2'>\r\n              Recent Actions\r\n            </h4>\r\n            <div className='space-y-1'>\r\n              {recentActions.map((action, index) => (\r\n                <div\r\n                  key={index}\r\n                  className='text-xs text-gray-400 flex items-center gap-2'\r\n                >\r\n                  <div className='w-1 h-1 bg-blue-400 rounded-full'></div>\r\n                  {action}\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n\r\n          <div className='text-xs text-gray-500 border-t border-gray-600 pt-2'>\r\n            Core Principle: Truth verification prioritized over all other\r\n            objectives\r\n          </div>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n"
}