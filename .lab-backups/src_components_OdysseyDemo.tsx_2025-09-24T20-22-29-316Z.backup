{
  "originalPath": "src\\components\\OdysseyDemo.tsx",
  "timestamp": "2025-09-24T20:22:29.317Z",
  "hash": "090fd671c2bb95011f46541d5401ea9bae83c1e4866c97a27b87d52e64f218ea",
  "size": 7220,
  "content": "\r\nimport { supabase } from '../lib/supabase';\r\n\r\nconst industries = [\r\n  {\r\n    name: 'Healthcare',\r\n    icon: 'üè•',\r\n    scenario: 'Patient Flow Optimization',\r\n    prompt: 'Analyze patient flow and staff allocation for a hospital. Predict wait time reduction and recommend scheduling improvements.',\r\n    metricsKeys: ['efficiency', 'cost', 'satisfaction']\r\n  },\r\n  {\r\n    name: 'Manufacturing',\r\n    icon: 'üè≠',\r\n    scenario: 'Predictive Maintenance',\r\n    prompt: 'Detect anomalies in assembly line data and predict equipment failure. Recommend maintenance actions to prevent downtime.',\r\n    metricsKeys: ['uptime', 'savings', 'defects']\r\n  },\r\n  {\r\n    name: 'Finance',\r\n    icon: 'üíº',\r\n    scenario: 'Risk Assessment',\r\n    prompt: 'Assess risk in financial transactions, identify fraud patterns, and report compliance improvements.',\r\n    metricsKeys: ['risk', 'compliance', 'accuracy']\r\n  },\r\n  {\r\n    name: 'Government',\r\n    icon: 'üèõÔ∏è',\r\n    scenario: 'Procurement Optimization',\r\n    prompt: 'Analyze vendor proposals for government procurement. Identify optimal bids and contract terms for cost savings and quality.',\r\n    metricsKeys: ['savings', 'time', 'quality']\r\n  }\r\n];\r\n\r\n\r\nexport function OdysseyDemo() {\r\n  const [activeIndustry, setActiveIndustry] = useState(0);\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n  const [showResults, setShowResults] = useState(false);\r\n  const [aiResponse, setAiResponse] = useState('');\r\n  const [metrics, setMetrics] = useState<Record<string, string>>({});\r\n\r\n  // Auto-cycle through industries\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setActiveIndustry(prev => {\r\n        const nextIndex = (prev + 1) % industries.length;\r\n        runDemo(nextIndex);\r\n        return nextIndex;\r\n      });\r\n    }, 10000);\r\n    runDemo(0);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  const runDemo = async (industryIndex: number) => {\r\n    setActiveIndustry(industryIndex);\r\n    setIsProcessing(true);\r\n    setShowResults(false);\r\n    setAiResponse('');\r\n    setMetrics({});\r\n    try {\r\n      // Call live AI backend for demo response\r\n      const { data, error } = await supabase.functions.invoke('ai-assistant-chat', {\r\n        body: {\r\n          message: industries[industryIndex].prompt,\r\n          conversationMode: 'demo',\r\n          industry: industries[industryIndex].name,\r\n          personality: 'showcase'\r\n        }\r\n      });\r\n      if (error) throw error;\r\n      // Expecting response in format: { response: string, metrics?: Record<string, string> }\r\n      setAiResponse(data?.response || 'No response.');\r\n      setMetrics(data?.metrics || {});\r\n    } catch (e) {\r\n      setAiResponse('Error: Unable to fetch live demo.');\r\n      setMetrics({});\r\n    }\r\n    setIsProcessing(false);\r\n    setShowResults(true);\r\n  };\r\n\r\n  return (\r\n    <div className=\"py-16 bg-gradient-to-br from-slate-50 to-blue-50\">\r\n      <div className=\"max-w-6xl mx-auto px-4\">\r\n        <div className=\"text-center mb-12\">\r\n          <Badge className=\"mb-4 bg-blue-100 text-blue-800\">\r\n            <Brain className=\"w-4 h-4 mr-2\" />\r\n            Live AI Demo\r\n          </Badge>\r\n          <h2 className=\"text-4xl font-bold mb-4\">\r\n            Experience ODYSSEY-1 in Action\r\n          </h2>\r\n          <p className=\"text-xl text-gray-600 max-w-3xl mx-auto\">\r\n            See how our AI business operating system transforms operations across industries in real-time\r\n          </p>\r\n        </div>\r\n\r\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\r\n          <Card className=\"border-2 border-blue-200\">\r\n            <CardHeader>\r\n              <CardTitle className=\"flex items-center gap-2\">\r\n                <Zap className=\"w-5 h-5 text-blue-600\" />\r\n                Industry Scenarios\r\n              </CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"grid grid-cols-2 gap-4\">\r\n                {industries.map((industry, index) => (\r\n                  <Button\r\n                    key={index}\r\n                    variant={activeIndustry === index ? \"default\" : \"outline\"}\r\n                    className=\"h-20 flex-col gap-2\"\r\n                    onClick={() => runDemo(index)}\r\n                    disabled={isProcessing}\r\n                  >\r\n                    <span className=\"text-2xl\">{industry.icon}</span>\r\n                    <span className=\"text-sm\">{industry.name}</span>\r\n                  </Button>\r\n                ))}\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card className=\"border-2 border-green-200\">\r\n            <CardHeader>\r\n              <CardTitle className=\"flex items-center gap-2\">\r\n                <BarChart3 className=\"w-5 h-5 text-green-600\" />\r\n                AI Analysis Results\r\n              </CardTitle>\r\n            </CardHeader>\r\n            <CardContent className=\"min-h-[300px]\">\r\n              {isProcessing ? (\r\n                <div className=\"flex flex-col items-center justify-center h-full\">\r\n                  <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mb-4\"></div>\r\n                  <p className=\"text-gray-600\">ODYSSEY-1 AI Processing...</p>\r\n                  <p className=\"text-sm text-gray-500 mt-2\">\r\n                    Analyzing {industries[activeIndustry].scenario}\r\n                  </p>\r\n                </div>\r\n              ) : showResults ? (\r\n                <div className=\"space-y-4\">\r\n                  <div className=\"flex items-center gap-2 mb-4\">\r\n                    <span className=\"text-2xl\">{industries[activeIndustry].icon}</span>\r\n                    <h3 className=\"font-semibold text-lg\">{industries[activeIndustry].name}</h3>\r\n                  </div>\r\n                  <div className=\"bg-blue-50 p-4 rounded-lg\">\r\n                    <p className=\"text-sm text-gray-700\">\r\n                      {aiResponse}\r\n                    </p>\r\n                  </div>\r\n                  <div className=\"grid grid-cols-3 gap-4 mt-4\">\r\n                    {industries[activeIndustry].metricsKeys.map((key) => (\r\n                      <div key={key} className=\"text-center p-3 bg-green-50 rounded-lg\">\r\n                        <div className=\"font-bold text-green-700\">{metrics[key] || '--'}</div>\r\n                        <div className=\"text-xs text-gray-600 capitalize\">{key}</div>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              ) : (\r\n                <div className=\"flex items-center justify-center h-full text-gray-500\">\r\n                  <div className=\"text-center\">\r\n                    <Brain className=\"w-16 h-16 mx-auto mb-4 text-gray-300\" />\r\n                    <p>Select an industry to see ODYSSEY-1 in action</p>\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n\r\n        <div className=\"text-center mt-12\">\r\n          <Button size=\"lg\" className=\"bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700\">\r\n            Start Your ODYSSEY-1 Journey\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}"
}