{
  "originalPath": "src\\components\\AppointmentWidget.tsx",
  "timestamp": "2025-10-15T16:14:06.036Z",
  "hash": "04362e3e1e31bbe4bd2fc5eeb56e97e839ee4cc4c760953f8da78d1c6cd189b2",
  "size": 5936,
  "content": "\r\nimport React, { useState, useEffect, useCallback } from 'react';\r\nimport { createClient } from '@supabase/supabase-js';\r\nimport AppointmentForm from './AppointmentForm';\r\nimport AppointmentList from './AppointmentList';\r\n\r\n// This should be initialized from your central Supabase client instance\r\nconst supabase = createClient(\r\n  import.meta.env.VITE_SUPABASE_URL!,\r\n  import.meta.env.VITE_SUPABASE_ANON_KEY!\r\n);\r\n\r\n// Type definitions\r\ntype Appointment = {\r\n  id: string;\r\n  title: string;\r\n  start_time: string;\r\n  end_time: string;\r\n  status: 'Confirmed' | 'Tentative' | 'Cancelled';\r\n};\r\n\r\nexport default function AppointmentWidget() {\r\n  const [appointments, setAppointments] = useState<Appointment[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  \r\n  // State for managing the form (create vs. edit)\r\n  const [isFormOpen, setIsFormOpen] = useState(false);\r\n  const [editingAppointment, setEditingAppointment] = useState<Appointment | undefined>(undefined);\r\n\r\n  const fetchAppointments = useCallback(async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    const { data, error: fetchError } = await supabase\r\n      .from('appointment')\r\n      .select('*')\r\n      .order('start_time', { ascending: false });\r\n\r\n    if (fetchError) {\r\n      console.error('Error fetching appointments:', fetchError);\r\n      setError(`Failed to load appointments: ${fetchError.message}`);\r\n    } else {\r\n      setAppointments(data || []);\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchAppointments();\r\n  }, [fetchAppointments]);\r\n\r\n  const handleFormSuccess = () => {\r\n    setIsFormOpen(false);\r\n    setEditingAppointment(undefined);\r\n    fetchAppointments(); // Refetch to ensure data consistency\r\n  };\r\n\r\n  const handleEdit = (appointment: Appointment) => {\r\n    setEditingAppointment(appointment);\r\n    setIsFormOpen(true);\r\n  };\r\n\r\n\r\n  // --- OPTIMISTIC SAVE (CREATE & UPDATE) ---\r\n  type AppointmentFormData = Omit<Appointment, 'id'> & { id?: string };\r\n  const handleSaveAppointment = async (formData: AppointmentFormData) => {\r\n    const originalAppointments = [...appointments];\r\n    setIsFormOpen(false);\r\n    setEditingAppointment(undefined);\r\n\r\n    if (formData.id) {\r\n      // --- Optimistic Update ---\r\n      setAppointments(prev => prev.map(app => app.id === formData.id ? { ...app, ...formData } : app));\r\n      const { error: updateError } = await supabase.from('appointment').update(formData).eq('id', formData.id);\r\n      if (updateError) {\r\n        console.error('Failed to update:', updateError);\r\n        setError('Failed to update appointment. Reverting changes.');\r\n        setAppointments(originalAppointments);\r\n      }\r\n    } else {\r\n      // --- Optimistic Create ---\r\n      const tempId = `temp-${Date.now()}`;\r\n      const newAppointment = { ...formData, id: tempId };\r\n      setAppointments(prev => [newAppointment as Appointment, ...prev]);\r\n      const { error: createError } = await supabase.from('appointment').insert([formData]);\r\n      if (createError) {\r\n        console.error('Failed to create:', createError);\r\n        setError('Failed to create appointment. Removing temporary item.');\r\n        setAppointments(originalAppointments);\r\n      } else {\r\n        // Refetch to get the real ID from the server\r\n        fetchAppointments();\r\n      }\r\n    }\r\n  };\r\n\r\n  // --- OPTIMISTIC DELETE IMPLEMENTATION ---\r\n  const handleDelete = async (appointmentId: string) => {\r\n    const originalAppointments = [...appointments];\r\n    setAppointments(prev => prev.filter(app => app.id !== appointmentId));\r\n    const { error: deleteError } = await supabase\r\n      .from('appointment')\r\n      .delete()\r\n      .eq('id', appointmentId);\r\n    if (deleteError) {\r\n      console.error('Failed to delete appointment:', deleteError);\r\n      setError(`Failed to delete. Restoring appointment.`);\r\n      setAppointments(originalAppointments);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-4 md:p-6 bg-gray-100 min-h-screen\">\r\n      <div className=\"max-w-4xl mx-auto\">\r\n        <div className=\"flex justify-between items-center mb-4\">\r\n          <h1 className=\"text-2xl font-bold text-gray-800\">Appointments</h1>\r\n          <button\r\n            onClick={() => {\r\n              setEditingAppointment(undefined);\r\n              setIsFormOpen(true);\r\n            }}\r\n            className=\"px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\r\n          >\r\n            New Appointment\r\n          </button>\r\n        </div>\r\n\r\n        {isFormOpen && (\r\n          <div className=\"mb-6\">\r\n            <AppointmentForm\r\n              onSave={handleSaveAppointment}\r\n              onCancel={() => setIsFormOpen(false)}\r\n              initialData={editingAppointment ? {\r\n                ...editingAppointment,\r\n                start_time: editingAppointment.start_time ? new Date(editingAppointment.start_time) : undefined,\r\n                end_time: editingAppointment.end_time ? new Date(editingAppointment.end_time) : undefined,\r\n              } : undefined}\r\n            />\r\n          </div>\r\n        )}\r\n\r\n        {error && <div className=\"p-3 mb-4 bg-red-100 text-red-700 rounded-lg\">{error}</div>}\r\n\r\n        {loading ? (\r\n          <div className='space-y-3'>\r\n            {[...Array(3)].map((_, i) => (\r\n              <div key={i} className='p-4 bg-white border rounded-lg shadow-sm animate-pulse'>\r\n                <div className='h-5 bg-gray-200 rounded w-1/3 mb-2' />\r\n                <div className='h-4 bg-gray-200 rounded w-2/3' />\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ) : (\r\n          <AppointmentList\r\n            appointments={appointments}\r\n            onEdit={handleEdit}\r\n            onDelete={handleDelete}\r\n          />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"
}