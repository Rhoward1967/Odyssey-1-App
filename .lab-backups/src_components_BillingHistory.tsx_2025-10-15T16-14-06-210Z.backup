{
  "originalPath": "src\\components\\BillingHistory.tsx",
  "timestamp": "2025-10-15T16:14:06.210Z",
  "hash": "8f5caaa584d677b2441b4165cc4b1c3d9697ec4123ade812d07ac5a2e8eeabcc",
  "size": 4949,
  "content": "import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardHeader,\r\n  CardTitle,\r\n} from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Button } from '@/components/ui/button';\r\nimport { supabase } from '@/lib/supabase';\r\nimport { useAuth } from '@/components/AuthProvider';\r\nimport { Receipt, Download, Calendar } from 'lucide-react';\r\n\r\ninterface BillingRecord {\r\n  id: string;\r\n  amount: number;\r\n  status: string;\r\n  plan_id: string;\r\n  created_at: string;\r\n  invoice_url?: string;\r\n}\r\n\r\nconst BillingHistory: React.FC = () => {\r\n  const { user } = useAuth();\r\n  const [billingHistory, setBillingHistory] = useState<BillingRecord[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      fetchBillingHistory();\r\n    }\r\n  }, [user]);\r\n\r\n  const fetchBillingHistory = async () => {\r\n    try {\r\n      // Mock data for demonstration - in production, this would come from Stripe\r\n      const mockData = [\r\n        {\r\n          id: '1',\r\n          amount: 29900,\r\n          status: 'paid',\r\n          plan_id: 'pro',\r\n          created_at: new Date().toISOString(),\r\n          invoice_url: '#',\r\n        },\r\n        {\r\n          id: '2',\r\n          amount: 29900,\r\n          status: 'paid',\r\n          plan_id: 'pro',\r\n          created_at: new Date(\r\n            Date.now() - 30 * 24 * 60 * 60 * 1000\r\n          ).toISOString(),\r\n          invoice_url: '#',\r\n        },\r\n      ];\r\n\r\n      setBillingHistory(mockData);\r\n    } catch (err) {\r\n      console.error('Error fetching billing history:', err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const formatAmount = (amount: number) => {\r\n    const safeAmount =\r\n      typeof amount === 'number' && !isNaN(amount) ? amount : 0;\r\n    return `$${(safeAmount / 100).toFixed(2)}`;\r\n  };\r\n\r\n  const getPlanName = (planId: string) => {\r\n    const plans = {\r\n      basic: 'ODYSSEY Basic',\r\n      pro: 'ODYSSEY Professional',\r\n      enterprise: 'ODYSSEY Enterprise',\r\n    };\r\n    return plans[planId as keyof typeof plans] || planId;\r\n  };\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'paid':\r\n        return 'bg-green-500';\r\n      case 'pending':\r\n        return 'bg-yellow-500';\r\n      case 'failed':\r\n        return 'bg-red-500';\r\n      default:\r\n        return 'bg-gray-500';\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Card className='bg-slate-800/50 border-slate-700'>\r\n        <CardContent className='p-8 text-center'>\r\n          <div className='animate-pulse text-gray-400'>\r\n            Loading billing history...\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Card className='bg-slate-800/50 border-slate-700'>\r\n      <CardHeader>\r\n        <CardTitle className='text-white flex items-center'>\r\n          <Receipt className='w-5 h-5 mr-2 text-blue-500' />\r\n          Billing History\r\n        </CardTitle>\r\n        <CardDescription>\r\n          View your payment history and download invoices\r\n        </CardDescription>\r\n      </CardHeader>\r\n      <CardContent>\r\n        {billingHistory.length === 0 ? (\r\n          <p className='text-gray-400 text-center py-8'>\r\n            No billing history available\r\n          </p>\r\n        ) : (\r\n          <div className='space-y-4'>\r\n            {billingHistory.map(record => (\r\n              <div\r\n                key={record.id}\r\n                className='flex items-center justify-between p-4 bg-slate-700/30 rounded-lg border border-slate-600'\r\n              >\r\n                <div className='flex items-center space-x-4'>\r\n                  <div className='flex items-center space-x-2'>\r\n                    <Calendar className='w-4 h-4 text-gray-400' />\r\n                    <span className='text-white'>\r\n                      {new Date(record.created_at).toLocaleDateString()}\r\n                    </span>\r\n                  </div>\r\n                  <div>\r\n                    <p className='text-white font-medium'>\r\n                      {getPlanName(record.plan_id)}\r\n                    </p>\r\n                    <p className='text-gray-400 text-sm'>\r\n                      {formatAmount(record.amount)}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className='flex items-center space-x-3'>\r\n                  <Badge className={getStatusColor(record.status)}>\r\n                    {record.status}\r\n                  </Badge>\r\n                  {record.invoice_url && (\r\n                    <Button size='sm' variant='outline'>\r\n                      <Download className='w-4 h-4 mr-1' />\r\n                      Invoice\r\n                    </Button>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default BillingHistory;\r\n"
}