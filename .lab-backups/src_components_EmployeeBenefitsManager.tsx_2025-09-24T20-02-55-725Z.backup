{
  "originalPath": "src\\components\\EmployeeBenefitsManager.tsx",
  "timestamp": "2025-09-24T20:02:55.725Z",
  "hash": "ba2a692563ec12a4b88cd13464fb3192f7f7011055e793a610d967fac536df20",
  "size": 7225,
  "content": "import React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card';\r\nimport { Button } from './ui/button';\r\nimport { Badge } from './ui/badge';\r\nimport { Input } from './ui/input';\r\nimport { Label } from './ui/label';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';\r\nimport { supabase } from '../lib/supabase';\r\nimport { Heart, Calendar, DollarSign, Users } from 'lucide-react';\r\n\r\ninterface BenefitPlan {\r\n  id: string;\r\n  name: string;\r\n  type: 'health' | 'dental' | 'vision' | 'life' | '401k';\r\n  employee_cost: number;\r\n  company_contribution: number;\r\n  enrolled_count: number;\r\n  total_employees: number;\r\n}\r\n\r\ninterface LeaveRequest {\r\n  id: string;\r\n  employee_name: string;\r\n  leave_type: string;\r\n  start_date: string;\r\n  end_date: string;\r\n  status: 'pending' | 'approved' | 'denied';\r\n  days_requested: number;\r\n}\r\n\r\nconst EmployeeBenefitsManager: React.FC = () => {\r\n  const [benefitPlans, setBenefitPlans] = useState<BenefitPlan[]>([]);\r\n  const [leaveRequests, setLeaveRequests] = useState<LeaveRequest[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    loadBenefitsData();\r\n  }, []);\r\n\r\n  const loadBenefitsData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      \r\n      // Load benefit plans from Supabase\r\n      const { data: benefitsData, error: benefitsError } = await supabase\r\n        .from('benefit_plans')\r\n        .select('*');\r\n\r\n      if (benefitsError) throw benefitsError;\r\n      setBenefitPlans(benefitsData || []);\r\n\r\n      // Load leave requests from Supabase\r\n      const { data: leaveData, error: leaveError } = await supabase\r\n        .from('leave_requests')\r\n        .select('*')\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (leaveError) throw leaveError;\r\n      setLeaveRequests(leaveData || []);\r\n    } catch (error) {\r\n      console.error('Error loading benefits data:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleLeaveAction = async (requestId: string, action: 'approve' | 'deny') => {\r\n    try {\r\n      const { error } = await supabase\r\n        .from('leave_requests')\r\n        .update({ status: action === 'approve' ? 'approved' : 'denied' })\r\n        .eq('id', requestId);\r\n\r\n      if (error) throw error;\r\n\r\n      setLeaveRequests(prev => \r\n        prev.map(req => \r\n          req.id === requestId ? { ...req, status: action === 'approve' ? 'approved' : 'denied' } : req\r\n        )\r\n      );\r\n    } catch (error) {\r\n      console.error('Error updating leave request:', error);\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"p-6 flex justify-center\">\r\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"p-6 space-y-6\">\r\n      <h1 className=\"text-3xl font-bold\">Benefits & Leave Management</h1>\r\n      \r\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <Heart className=\"h-5 w-5 text-red-500\" />\r\n              Benefit Plans\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent className=\"space-y-4\">\r\n            {benefitPlans.map((plan) => (\r\n              <div key={plan.id} className=\"p-4 border rounded-lg\">\r\n                <div className=\"flex justify-between items-start mb-3\">\r\n                  <h3 className=\"font-semibold\">{plan.name}</h3>\r\n                  <Badge variant=\"outline\">{plan.type}</Badge>\r\n                </div>\r\n                <div className=\"grid grid-cols-2 gap-4 text-sm\">\r\n                  <div>\r\n                    <span className=\"text-gray-600\">Employee Cost:</span>\r\n                    <div className=\"font-medium\">${plan.employee_cost}/month</div>\r\n                  </div>\r\n                  <div>\r\n                    <span className=\"text-gray-600\">Company Pays:</span>\r\n                    <div className=\"font-medium text-green-600\">${plan.company_contribution}/month</div>\r\n                  </div>\r\n                  <div>\r\n                    <span className=\"text-gray-600\">Enrollment:</span>\r\n                    <div className=\"font-medium\">{plan.enrolled_count}/{plan.total_employees}</div>\r\n                  </div>\r\n                  <div>\r\n                    <span className=\"text-gray-600\">Participation:</span>\r\n                    <div className=\"font-medium\">{Math.round((plan.enrolled_count / plan.total_employees) * 100)}%</div>\r\n                  </div>\r\n                </div>\r\n                <Button className=\"w-full mt-3\" size=\"sm\">\r\n                  Manage Enrollment\r\n                </Button>\r\n              </div>\r\n            ))}\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <Calendar className=\"h-5 w-5 text-blue-500\" />\r\n              Leave Requests\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent className=\"space-y-4\">\r\n            {leaveRequests.length === 0 ? (\r\n              <p className=\"text-gray-500 text-center py-4\">No leave requests</p>\r\n            ) : (\r\n              leaveRequests.map((request) => (\r\n                <div key={request.id} className=\"p-4 border rounded-lg\">\r\n                  <div className=\"flex justify-between items-start mb-2\">\r\n                    <h3 className=\"font-semibold\">{request.employee_name}</h3>\r\n                    <Badge \r\n                      variant={request.status === 'approved' ? 'default' : \r\n                              request.status === 'denied' ? 'destructive' : 'secondary'}\r\n                    >\r\n                      {request.status}\r\n                    </Badge>\r\n                  </div>\r\n                  <div className=\"text-sm space-y-1\">\r\n                    <div><strong>Type:</strong> {request.leave_type}</div>\r\n                    <div><strong>Dates:</strong> {new Date(request.start_date).toLocaleDateString()} - {new Date(request.end_date).toLocaleDateString()}</div>\r\n                    <div><strong>Days:</strong> {request.days_requested}</div>\r\n                  </div>\r\n                  {request.status === 'pending' && (\r\n                    <div className=\"flex gap-2 mt-3\">\r\n                      <Button \r\n                        size=\"sm\" \r\n                        onClick={() => handleLeaveAction(request.id, 'approve')}\r\n                        className=\"bg-green-600 hover:bg-green-700\"\r\n                      >\r\n                        Approve\r\n                      </Button>\r\n                      <Button \r\n                        size=\"sm\" \r\n                        variant=\"outline\"\r\n                        onClick={() => handleLeaveAction(request.id, 'deny')}\r\n                      >\r\n                        Deny\r\n                      </Button>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              ))\r\n            )}\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EmployeeBenefitsManager;"
}