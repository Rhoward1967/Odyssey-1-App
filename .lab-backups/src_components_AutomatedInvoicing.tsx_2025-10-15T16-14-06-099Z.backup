{
  "originalPath": "src\\components\\AutomatedInvoicing.tsx",
  "timestamp": "2025-10-15T16:14:06.099Z",
  "hash": "ee5c4443656b528623318960f5f9cccb07b61e7c975ed9a2028f1ac03bb81894",
  "size": 38671,
  "content": "import React, { useState, useEffect, useCallback } from 'react';\r\nimport { useAuth } from './AuthProvider';\r\n// Service type for cleaning/janitorial services/products\r\ntype Service = {\r\n  id: string;\r\n  name: string;\r\n  sku?: string;\r\n  default_rate?: number;\r\n};\r\nimport CustomerProfile, {\r\n  CustomerProfileData,\r\n} from './customers/CustomerProfile';\r\nimport { supabase } from '@/lib/supabase';\r\n\r\n// Use shared supabase client\r\n\r\n// --- Type Definitions based on your template ---\r\ntype CompanyProfile = { company_name: string; address: string };\r\ntype Customer = {\r\n  id: string;\r\n  customer_name: string;\r\n  email?: string;\r\n  address?: string;\r\n  phone?: string;\r\n};\r\ntype LineItem = {\r\n  description: string;\r\n  sku?: string;\r\n  quantity: number;\r\n  rate: number;\r\n  amount: number;\r\n  is_taxable: boolean;\r\n};\r\ntype Invoice = {\r\n  id: string;\r\n  invoice_number: string;\r\n  customer_id: string;\r\n  total_amount: number;\r\n  due_date: string;\r\n  issue_date: string;\r\n  status: 'draft' | 'sent' | 'paid' | 'void';\r\n  line_items: LineItem[];\r\n  po_number?: string;\r\n  notes?: string;\r\n  shipping_amount?: number;\r\n  deposit_amount?: number;\r\n  tax_rate?: number;\r\n  customers: { customer_name: string };\r\n};\r\n\r\n// --- Main Dashboard Component ---\r\nexport default function InvoiceDashboard() {\r\n  const { user, signIn, loading: authLoading } = useAuth();\r\n  const [view, setView] = useState<\r\n    'list' | 'invoice_form' | 'customer_manager'\r\n  >('list');\r\n  const [invoices, setInvoices] = useState<Invoice[]>([]);\r\n  const [customers, setCustomers] = useState<Customer[]>([]);\r\n  const [companyProfile, setCompanyProfile] = useState<CompanyProfile | null>(\r\n    null\r\n  );\r\n  const [editingInvoice, setEditingInvoice] = useState<Partial<Invoice> | null>(\r\n    null\r\n  );\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const fetchData = useCallback(async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const {\r\n        data: { user },\r\n      } = await supabase.auth.getUser();\r\n      if (!user) throw new Error('User not authenticated.');\r\n\r\n      const [invoiceRes, customerRes, profileRes] = await Promise.all([\r\n        supabase\r\n          .from('invoices')\r\n          .select('*, customers(customer_name)')\r\n          .order('created_at', { ascending: false }),\r\n        supabase.from('customers').select('*').order('customer_name'),\r\n        supabase\r\n          .from('company_profiles')\r\n          .select('*')\r\n          .eq('user_id', user.id)\r\n          .single(),\r\n      ]);\r\n\r\n      if (invoiceRes.error) throw invoiceRes.error;\r\n      if (customerRes.error) throw customerRes.error;\r\n      if (profileRes.error && profileRes.error.code !== 'PGRST116')\r\n        throw profileRes.error;\r\n\r\n      setInvoices(invoiceRes.data || []);\r\n      setCustomers(customerRes.data || []);\r\n      setCompanyProfile(profileRes.data);\r\n    } catch (err: any) {\r\n      setError(`Failed to load data: ${err.message}`);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n    const checkAndFetch = async () => {\r\n      const {\r\n        data: { user },\r\n      } = await supabase.auth.getUser();\r\n      if (user && isMounted && view === 'list') {\r\n        fetchData();\r\n      }\r\n    };\r\n    checkAndFetch();\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, [view, fetchData]);\r\n\r\n  const handleDeleteInvoice = async (invoiceId: string) => {\r\n    if (!window.confirm('Are you sure you want to delete this invoice?'))\r\n      return;\r\n    const { error: deleteError } = await supabase\r\n      .from('invoices')\r\n      .delete()\r\n      .eq('id', invoiceId);\r\n    if (deleteError)\r\n      setError(`Failed to delete invoice: ${deleteError.message}`);\r\n    else fetchData();\r\n  };\r\n\r\n  const showForm = (invoice: Partial<Invoice> | null = null) => {\r\n    setEditingInvoice(invoice);\r\n    setView('invoice_form');\r\n  };\r\n\r\n  const handleCustomerAdded = (newCustomer: Customer) => {\r\n    const updatedCustomers = [...customers, newCustomer].sort((a, b) =>\r\n      a.customer_name.localeCompare(b.customer_name)\r\n    );\r\n    setCustomers(updatedCustomers);\r\n  };\r\n\r\n  // Loading timeout fallback\r\n  const [loadingTimeout, setLoadingTimeout] = useState(false);\r\n  useEffect(() => {\r\n    if (loading) {\r\n      const timer = setTimeout(() => setLoadingTimeout(true), 7000);\r\n      return () => clearTimeout(timer);\r\n    } else {\r\n      setLoadingTimeout(false);\r\n    }\r\n  }, [loading]);\r\n\r\n  if (authLoading)\r\n    return (\r\n      <div className='p-8 text-center animate-pulse'>\r\n        Checking authentication...\r\n      </div>\r\n    );\r\n  if (!user) {\r\n    return (\r\n      <div className='p-8 text-center'>\r\n        <div className='mb-4 text-red-700'>\r\n          Not authenticated. Please log in to access invoicing.\r\n        </div>\r\n        <a\r\n          href='/login'\r\n          className='px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700'\r\n        >\r\n          Go to Login\r\n        </a>\r\n      </div>\r\n    );\r\n  }\r\n  if (loading && !loadingTimeout)\r\n    return (\r\n      <div className='p-8 text-center animate-pulse'>\r\n        Loading Invoicing Module...\r\n      </div>\r\n    );\r\n  if (loading && loadingTimeout)\r\n    return (\r\n      <div className='p-8 text-center'>\r\n        <div className='mb-4 animate-pulse'>\r\n          Still loading...\r\n          <br />\r\n          If this takes too long, click below to retry.\r\n        </div>\r\n        <button\r\n          className='px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700'\r\n          onClick={() => {\r\n            setLoading(true);\r\n            setLoadingTimeout(false);\r\n            fetchData();\r\n          }}\r\n        >\r\n          Retry Loading\r\n        </button>\r\n      </div>\r\n    );\r\n\r\n  return (\r\n    <div className='p-4 md:p-6 bg-gray-100'>\r\n      <div className='max-w-7xl mx-auto'>\r\n        {error && (\r\n          <div className='mb-4 p-4 bg-red-100 text-red-800 rounded-lg shadow flex flex-col items-center'>\r\n            <div>{error}</div>\r\n            <button\r\n              className='mt-2 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700'\r\n              onClick={() => fetchData()}\r\n            >\r\n              Retry\r\n            </button>\r\n          </div>\r\n        )}\r\n        {view === 'list' && !error && (\r\n          <InvoiceListView\r\n            invoices={invoices}\r\n            onCreateNew={() => showForm()}\r\n            onEdit={showForm}\r\n            onDelete={handleDeleteInvoice}\r\n            onManageCustomers={() => setView('customer_manager')}\r\n          />\r\n        )}\r\n        {view === 'invoice_form' && !error && (\r\n          <InvoiceForm\r\n            initialInvoice={editingInvoice}\r\n            customers={customers}\r\n            companyProfile={companyProfile}\r\n            onSaveSuccess={() => setView('list')}\r\n            onCancel={() => setView('list')}\r\n            onCustomerAdded={handleCustomerAdded}\r\n          />\r\n        )}\r\n        {view === 'customer_manager' && !error && (\r\n          <CustomerManager\r\n            customers={customers}\r\n            onSaveSuccess={fetchData}\r\n            onBack={() => setView('list')}\r\n          />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// --- Invoice List View ---\r\nfunction InvoiceListView({\r\n  invoices,\r\n  onCreateNew,\r\n  onEdit,\r\n  onDelete,\r\n  onManageCustomers,\r\n}: any) {\r\n  return (\r\n    <div>\r\n      <div className='flex justify-between items-center mb-6'>\r\n        <h1 className='text-3xl font-bold text-gray-900'>Invoices</h1>\r\n        <div className='flex items-center space-x-2'>\r\n          <button\r\n            onClick={onManageCustomers}\r\n            className='px-4 py-2 text-sm font-medium bg-white border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 shadow-sm'\r\n          >\r\n            Manage Customers\r\n          </button>\r\n          <button\r\n            onClick={onCreateNew}\r\n            className='px-5 py-2 text-sm font-medium bg-blue-600 text-white rounded-lg hover:bg-blue-700 shadow-sm'\r\n          >\r\n            Create New Invoice\r\n          </button>\r\n        </div>\r\n      </div>\r\n      {invoices.length === 0 ? (\r\n        <p className='text-center p-12 bg-white rounded-lg shadow'>\r\n          No invoices found. Create one to get started.\r\n        </p>\r\n      ) : (\r\n        <div className='bg-white shadow-md rounded-lg overflow-x-auto'>\r\n          <table className='min-w-full divide-y divide-gray-200'>\r\n            <thead className='bg-gray-50'>\r\n              <tr>\r\n                <th className='px-6 py-3 text-left text-xs font-semibold text-gray-500 uppercase tracking-wider'>\r\n                  Invoice #\r\n                </th>\r\n                <th className='px-6 py-3 text-left text-xs font-semibold text-gray-500 uppercase tracking-wider'>\r\n                  Customer\r\n                </th>\r\n                <th className='px-6 py-3 text-left text-xs font-semibold text-gray-500 uppercase tracking-wider'>\r\n                  Due Date\r\n                </th>\r\n                <th className='px-6 py-3 text-right text-xs font-semibold text-gray-500 uppercase tracking-wider'>\r\n                  Amount\r\n                </th>\r\n                <th className='px-6 py-3 text-left text-xs font-semibold text-gray-500 uppercase tracking-wider'>\r\n                  Status\r\n                </th>\r\n                <th className='px-6 py-3 relative'></th>\r\n              </tr>\r\n            </thead>\r\n            <tbody className='bg-white divide-y divide-gray-200'>\r\n              {invoices.map((invoice: Invoice) => (\r\n                <tr key={invoice.id} className='hover:bg-gray-50'>\r\n                  <td className='px-6 py-4 font-medium text-gray-900'>\r\n                    {invoice.invoice_number}\r\n                  </td>\r\n                  <td className='px-6 py-4 text-gray-600'>\r\n                    {invoice.customers?.customer_name || 'N/A'}\r\n                  </td>\r\n                  <td className='px-6 py-4 text-gray-600'>\r\n                    {invoice.due_date}\r\n                  </td>\r\n                  <td className='px-6 py-4 text-right font-semibold text-gray-900'>\r\n                    ${invoice.total_amount.toFixed(2)}\r\n                  </td>\r\n                  <td className='px-6 py-4'>\r\n                    <span\r\n                      className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${invoice.status === 'paid' ? 'bg-green-100 text-green-800' : invoice.status === 'sent' ? 'bg-blue-100 text-blue-800' : 'bg-yellow-100 text-yellow-800'}`}\r\n                    >\r\n                      {invoice.status}\r\n                    </span>\r\n                  </td>\r\n                  <td className='px-6 py-4 text-right text-sm font-medium'>\r\n                    <button\r\n                      onClick={() => onEdit(invoice)}\r\n                      className='text-indigo-600 hover:text-indigo-900'\r\n                    >\r\n                      Edit\r\n                    </button>\r\n                    <button\r\n                      onClick={() => onDelete(invoice.id)}\r\n                      className='text-red-600 hover:text-red-900 ml-4'\r\n                    >\r\n                      Delete\r\n                    </button>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\n// --- Customer Management View ---\r\nfunction CustomerManager({ customers, onSaveSuccess, onBack }: any) {\r\n  const [form, setForm] = useState({\r\n    name: '',\r\n    email: '',\r\n    address: '',\r\n    phone: '',\r\n  });\r\n  const [isSaving, setIsSaving] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [selectedCustomer, setSelectedCustomer] =\r\n    useState<CustomerProfileData | null>(null);\r\n\r\n  const handleAddCustomer = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    setError(null);\r\n    if (!form.name) return setError('Customer name is required.');\r\n    setIsSaving(true);\r\n    const { error: insertError } = await supabase\r\n      .from('customers')\r\n      .insert([\r\n        {\r\n          customer_name: form.name,\r\n          email: form.email,\r\n          address: form.address,\r\n          phone: form.phone,\r\n        },\r\n      ]);\r\n    setIsSaving(false);\r\n    if (insertError) setError(`Failed to add customer: ${insertError.message}`);\r\n    else {\r\n      setForm({ name: '', email: '', address: '', phone: '' });\r\n      onSaveSuccess();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='flex flex-col md:flex-row gap-8 bg-white p-8 rounded-lg shadow-lg'>\r\n      <div className='md:w-1/3 w-full'>\r\n        <button\r\n          onClick={onBack}\r\n          className='mb-6 text-sm font-medium text-gray-600 hover:text-gray-900 flex items-center'\r\n        >\r\n          <svg\r\n            className='w-4 h-4 mr-2'\r\n            fill='none'\r\n            stroke='currentColor'\r\n            viewBox='0 0 24 24'\r\n          >\r\n            <path\r\n              strokeLinecap='round'\r\n              strokeLinejoin='round'\r\n              strokeWidth='2'\r\n              d='M10 19l-7-7m0 0l7-7m-7 7h18'\r\n            ></path>\r\n          </svg>\r\n          Back to Invoices\r\n        </button>\r\n        <h2 className='text-2xl font-bold text-gray-900 mb-4'>Clients</h2>\r\n        <form\r\n          onSubmit={handleAddCustomer}\r\n          className='p-4 border rounded-lg mb-6 space-y-4 bg-gray-50'\r\n        >\r\n          <h3 className='font-semibold text-lg'>Add New Client</h3>\r\n          <input\r\n            type='text'\r\n            value={form.name}\r\n            onChange={e => setForm({ ...form, name: e.target.value })}\r\n            placeholder='Full Name or Company'\r\n            className='p-2 w-full border rounded-md'\r\n          />\r\n          <input\r\n            type='email'\r\n            value={form.email}\r\n            onChange={e => setForm({ ...form, email: e.target.value })}\r\n            placeholder='Email'\r\n            className='p-2 w-full border rounded-md'\r\n          />\r\n          <input\r\n            type='text'\r\n            value={form.address}\r\n            onChange={e => setForm({ ...form, address: e.target.value })}\r\n            placeholder='Address'\r\n            className='p-2 w-full border rounded-md'\r\n          />\r\n          <input\r\n            type='text'\r\n            value={form.phone}\r\n            onChange={e => setForm({ ...form, phone: e.target.value })}\r\n            placeholder='Phone'\r\n            className='p-2 w-full border rounded-md'\r\n          />\r\n          <button\r\n            type='submit'\r\n            disabled={isSaving}\r\n            className='w-full px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-blue-300'\r\n          >\r\n            {isSaving ? 'Saving...' : 'Add Client'}\r\n          </button>\r\n        </form>\r\n        {error && (\r\n          <div className='mb-4 p-3 bg-red-100 text-red-700 rounded-lg'>\r\n            {error}\r\n          </div>\r\n        )}\r\n        <h3 className='font-bold mb-2 text-lg'>All Clients</h3>\r\n        <ul className='divide-y divide-gray-200 bg-gray-50 rounded-lg overflow-hidden'>\r\n          {customers.map((c: any) => (\r\n            <li\r\n              key={c.id}\r\n              className={`p-3 cursor-pointer hover:bg-blue-50 ${selectedCustomer?.id === c.id ? 'bg-blue-100' : ''}`}\r\n              onClick={() => setSelectedCustomer({ ...c })}\r\n            >\r\n              <div className='font-medium text-gray-900'>{c.customer_name}</div>\r\n              <div className='text-xs text-gray-500'>{c.email}</div>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n      <div className='md:w-2/3 w-full'>\r\n        {selectedCustomer ? (\r\n          <CustomerProfile customer={selectedCustomer} />\r\n        ) : (\r\n          <div className='flex items-center justify-center h-full min-h-[300px] text-gray-400'>\r\n            Select a client to view full profile\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// --- Invoice Form View (Built EXACTLY to your template) ---\r\nfunction InvoiceForm({\r\n  initialInvoice,\r\n  customers,\r\n  companyProfile,\r\n  onSaveSuccess,\r\n  onCancel,\r\n  onCustomerAdded,\r\n}: any) {\r\n  const [isCustomerModalOpen, setIsCustomerModalOpen] = useState(false);\r\n  const [formData, setFormData] = useState({\r\n    customer_id: initialInvoice?.customer_id || '',\r\n    due_date:\r\n      initialInvoice?.due_date || new Date().toISOString().split('T')[0],\r\n    issue_date:\r\n      initialInvoice?.issue_date || new Date().toISOString().split('T')[0],\r\n    line_items: initialInvoice?.line_items || [\r\n      {\r\n        description: '',\r\n        sku: '',\r\n        quantity: 1,\r\n        rate: 0,\r\n        amount: 0,\r\n        is_taxable: true,\r\n      },\r\n    ],\r\n    status: initialInvoice?.status || 'draft',\r\n    po_number: initialInvoice?.po_number || '',\r\n    notes: initialInvoice?.notes || 'Thank You for your Business.',\r\n    shipping_amount: initialInvoice?.shipping_amount || 0,\r\n    deposit_amount: initialInvoice?.deposit_amount || 0,\r\n    tax_rate: initialInvoice?.tax_rate || 8.25,\r\n  });\r\n  const [isSaving, setIsSaving] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  // Service/product catalog state\r\n  const [services, setServices] = useState<Service[]>([]);\r\n  const [isServiceModalOpen, setIsServiceModalOpen] = useState(false);\r\n  const [newService, setNewService] = useState({\r\n    name: '',\r\n    sku: '',\r\n    default_rate: '',\r\n  });\r\n  const [serviceError, setServiceError] = useState<string | null>(null);\r\n\r\n  // Fetch services/products from Supabase\r\n  useEffect(() => {\r\n    const fetchServices = async () => {\r\n      const { data, error } = await supabase\r\n        .from('services')\r\n        .select('*')\r\n        .order('name');\r\n      if (!error) setServices(data || []);\r\n    };\r\n    fetchServices();\r\n  }, []);\r\n\r\n  // Handle line item change, including service selection\r\n  const handleLineItemChange = (\r\n    index: number,\r\n    field: keyof Omit<LineItem, 'amount'>,\r\n    value: any\r\n  ) => {\r\n    const items = [...formData.line_items];\r\n    let updatedItem = { ...items[index], [field]: value };\r\n    if (field === 'description' && value) {\r\n      // If a service is selected by id, auto-fill fields\r\n      const svc = services.find(s => s.id === value);\r\n      if (svc) {\r\n        updatedItem.description = svc.name;\r\n        updatedItem.sku = svc.sku || '';\r\n        updatedItem.rate = svc.default_rate || 0;\r\n      } else {\r\n        updatedItem.description = value; // fallback for manual entry\r\n      }\r\n    }\r\n    if (field === 'quantity' || field === 'rate') {\r\n      updatedItem[field] = parseFloat(value) || 0;\r\n    }\r\n    updatedItem.amount = updatedItem.quantity * updatedItem.rate;\r\n    items[index] = updatedItem;\r\n    setFormData({ ...formData, line_items: items });\r\n  };\r\n\r\n  const addLineItem = () =>\r\n    setFormData({\r\n      ...formData,\r\n      line_items: [\r\n        ...formData.line_items,\r\n        {\r\n          description: '',\r\n          sku: '',\r\n          quantity: 1,\r\n          rate: 0,\r\n          amount: 0,\r\n          is_taxable: true,\r\n        },\r\n      ],\r\n    });\r\n  const removeLineItem = (index: number) =>\r\n    setFormData({\r\n      ...formData,\r\n      line_items: formData.line_items.filter((_, i) => i !== index),\r\n    });\r\n\r\n  const subtotal = formData.line_items.reduce(\r\n    (sum: number, item: LineItem) => sum + item.amount,\r\n    0\r\n  );\r\n  const taxableSubtotal = formData.line_items\r\n    .filter(i => i.is_taxable)\r\n    .reduce((sum: number, item: LineItem) => sum + item.amount, 0);\r\n  const taxAmount = taxableSubtotal * (formData.tax_rate / 100);\r\n  const totalAmount = subtotal + taxAmount + formData.shipping_amount;\r\n  const balanceDue = totalAmount - formData.deposit_amount;\r\n\r\n  const handleSave = async () => {\r\n    if (!formData.customer_id) return setError('Please select a customer.');\r\n    setIsSaving(true);\r\n    const submission = {\r\n      ...formData,\r\n      total_amount: totalAmount,\r\n      invoice_number: initialInvoice?.invoice_number || `INV-${Date.now()}`,\r\n    };\r\n\r\n    const { error: saveError } = initialInvoice?.id\r\n      ? await supabase\r\n          .from('invoices')\r\n          .update(submission)\r\n          .eq('id', initialInvoice.id)\r\n      : await supabase.from('invoices').insert([submission]).select();\r\n\r\n    setIsSaving(false);\r\n    if (saveError) setError(`Failed to save invoice: ${saveError.message}`);\r\n    else onSaveSuccess();\r\n  };\r\n\r\n  const handleNewCustomerSuccess = (newCustomer: Customer) => {\r\n    onCustomerAdded(newCustomer);\r\n    setFormData({ ...formData, customer_id: newCustomer.id });\r\n    setIsCustomerModalOpen(false);\r\n  };\r\n\r\n  // Add new service/product to catalog\r\n  const handleAddService = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    setServiceError(null);\r\n    if (!newService.name) return setServiceError('Service name is required.');\r\n    const { data, error } = await supabase\r\n      .from('services')\r\n      .insert([\r\n        {\r\n          name: newService.name,\r\n          sku: newService.sku,\r\n          default_rate: parseFloat(newService.default_rate) || 0,\r\n        },\r\n      ])\r\n      .select()\r\n      .single();\r\n    if (error) setServiceError(`Failed to add service: ${error.message}`);\r\n    else {\r\n      setServices([...services, data]);\r\n      setNewService({ name: '', sku: '', default_rate: '' });\r\n      setIsServiceModalOpen(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button\r\n        onClick={onCancel}\r\n        className='mb-4 text-sm font-medium text-gray-600 hover:text-gray-900 flex items-center'\r\n      >\r\n        <svg\r\n          className='w-4 h-4 mr-2'\r\n          fill='none'\r\n          stroke='currentColor'\r\n          viewBox='0 0 24 24'\r\n        >\r\n          <path\r\n            strokeLinecap='round'\r\n            strokeLinejoin='round'\r\n            strokeWidth='2'\r\n            d='M10 19l-7-7m0 0l7-7m-7 7h18'\r\n          ></path>\r\n        </svg>\r\n        Back to Invoice List\r\n      </button>\r\n      <div className='bg-white p-8 rounded-lg shadow-lg'>\r\n        <div className='flex justify-between items-start mb-8'>\r\n          <div>\r\n            <h1 className='text-3xl font-bold text-gray-900'>\r\n              {companyProfile?.company_name}\r\n            </h1>\r\n            <p className='text-gray-600 whitespace-pre-line'>\r\n              {companyProfile?.address}\r\n            </p>\r\n          </div>\r\n          <h2 className='text-4xl font-light text-gray-400 uppercase tracking-widest'>\r\n            Invoice\r\n          </h2>\r\n        </div>\r\n        {error && (\r\n          <div className='mb-4 p-3 bg-red-100 text-red-700 rounded-lg'>\r\n            {error}\r\n          </div>\r\n        )}\r\n\r\n        <div className='grid grid-cols-2 gap-8 mb-8 border-b pb-8'>\r\n          <div>\r\n            <label className='block text-sm font-medium text-gray-500 mb-1'>\r\n              Bill To\r\n            </label>\r\n            <div className='flex items-center space-x-2'>\r\n              <select\r\n                value={formData.customer_id}\r\n                onChange={e =>\r\n                  setFormData({ ...formData, customer_id: e.target.value })\r\n                }\r\n                className='p-2 w-full border rounded-md bg-gray-50 flex-grow'\r\n              >\r\n                <option value=''>Select a Customer</option>\r\n                {customers.map((c: Customer) => (\r\n                  <option key={c.id} value={c.id}>\r\n                    {c.customer_name}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n              <button\r\n                onClick={() => setIsCustomerModalOpen(true)}\r\n                className='px-3 py-2 text-sm bg-blue-100 text-blue-800 rounded-md hover:bg-blue-200 font-semibold'\r\n              >\r\n                New\r\n              </button>\r\n            </div>\r\n          </div>\r\n          <div>\r\n            <label className='block text-sm font-medium text-gray-500 mb-1'>\r\n              PO Number\r\n            </label>\r\n            <input\r\n              type='text'\r\n              value={formData.po_number}\r\n              onChange={e =>\r\n                setFormData({ ...formData, po_number: e.target.value })\r\n              }\r\n              className='p-2 w-full border rounded-md'\r\n            />\r\n          </div>\r\n          <div>\r\n            <label className='block text-sm font-medium text-gray-500 mb-1'>\r\n              Invoice Date\r\n            </label>\r\n            <input\r\n              type='date'\r\n              value={formData.issue_date}\r\n              onChange={e =>\r\n                setFormData({ ...formData, issue_date: e.target.value })\r\n              }\r\n              className='p-2 w-full border rounded-md'\r\n            />\r\n          </div>\r\n          <div>\r\n            <label className='block text-sm font-medium text-gray-500 mb-1'>\r\n              Due Date\r\n            </label>\r\n            <input\r\n              type='date'\r\n              value={formData.due_date}\r\n              onChange={e =>\r\n                setFormData({ ...formData, due_date: e.target.value })\r\n              }\r\n              className='p-2 w-full border rounded-md'\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <table className='w-full mb-4'>\r\n          <thead className='border-b-2 border-gray-300'>\r\n            <tr className='text-left text-xs font-semibold text-gray-500 uppercase'>\r\n              <th className='p-2'>Product/Service</th>\r\n              <th className='p-2 w-40'>SKU</th>\r\n              <th className='p-2 w-24 text-right'>Qty</th>\r\n              <th className='p-2 w-32 text-right'>Rate</th>\r\n              <th className='p-2 w-32 text-right'>Amount</th>\r\n              <th className='p-2 w-20 text-center'>Taxable</th>\r\n              <th className='w-10'></th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {formData.line_items.map((item: LineItem, index: number) => (\r\n              <tr key={index}>\r\n                <td>\r\n                  <div className='flex items-center space-x-2'>\r\n                    <select\r\n                      value={\r\n                        services.find(s => s.name === item.description)?.id ||\r\n                        ''\r\n                      }\r\n                      onChange={e =>\r\n                        handleLineItemChange(\r\n                          index,\r\n                          'description',\r\n                          e.target.value\r\n                        )\r\n                      }\r\n                      className='p-2 w-full border-b bg-gray-50'\r\n                    >\r\n                      <option value=''>Select Service/Product</option>\r\n                      {services.map(s => (\r\n                        <option key={s.id} value={s.id}>\r\n                          {s.name}\r\n                        </option>\r\n                      ))}\r\n                    </select>\r\n                    <button\r\n                      type='button'\r\n                      onClick={() => setIsServiceModalOpen(true)}\r\n                      className='text-xs px-2 py-1 bg-blue-100 text-blue-800 rounded hover:bg-blue-200'\r\n                    >\r\n                      New\r\n                    </button>\r\n                  </div>\r\n                  <input\r\n                    type='text'\r\n                    value={item.description}\r\n                    onChange={e =>\r\n                      handleLineItemChange(index, 'description', e.target.value)\r\n                    }\r\n                    className='p-2 w-full border-b mt-1'\r\n                    placeholder='Item or service description'\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <input\r\n                    type='text'\r\n                    value={item.sku || ''}\r\n                    onChange={e =>\r\n                      handleLineItemChange(index, 'sku', e.target.value)\r\n                    }\r\n                    className='p-2 w-full border-b'\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <input\r\n                    type='number'\r\n                    value={item.quantity}\r\n                    onChange={e =>\r\n                      handleLineItemChange(index, 'quantity', e.target.value)\r\n                    }\r\n                    className='p-2 w-full text-right border-b'\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <input\r\n                    type='number'\r\n                    value={item.rate}\r\n                    onChange={e =>\r\n                      handleLineItemChange(index, 'rate', e.target.value)\r\n                    }\r\n                    className='p-2 w-full text-right border-b'\r\n                  />\r\n                </td>\r\n                <td className='p-2 text-right font-medium'>\r\n                  ${item.amount.toFixed(2)}\r\n                </td>\r\n                <td className='p-2 text-center'>\r\n                  <input\r\n                    type='checkbox'\r\n                    checked={item.is_taxable}\r\n                    onChange={e =>\r\n                      handleLineItemChange(\r\n                        index,\r\n                        'is_taxable',\r\n                        e.target.checked\r\n                      )\r\n                    }\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <button\r\n                    onClick={() => removeLineItem(index)}\r\n                    className='text-red-500 p-2 opacity-50 hover:opacity-100'\r\n                  >\r\n                    ✕\r\n                  </button>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n        <button\r\n          onClick={addLineItem}\r\n          className='text-sm text-blue-600 hover:underline mb-8'\r\n        >\r\n          + Add Line Item\r\n        </button>\r\n\r\n        <div className='flex justify-between mt-8'>\r\n          <div className='w-1/2'>\r\n            <label className='block text-sm font-medium text-gray-500 mb-1'>\r\n              Note to customer\r\n            </label>\r\n            <textarea\r\n              value={formData.notes}\r\n              onChange={e =>\r\n                setFormData({ ...formData, notes: e.target.value })\r\n              }\r\n              rows={4}\r\n              className='p-2 w-full border rounded-md'\r\n            ></textarea>\r\n          </div>\r\n          <div className='w-1/3 space-y-2'>\r\n            <div className='flex justify-between'>\r\n              <span>Subtotal</span>\r\n              <span>${subtotal.toFixed(2)}</span>\r\n            </div>\r\n            <div className='flex justify-between items-center'>\r\n              <span>Sales Tax Rate (%)</span>\r\n              <input\r\n                type='number'\r\n                step='0.01'\r\n                value={formData.tax_rate}\r\n                onChange={e =>\r\n                  setFormData({\r\n                    ...formData,\r\n                    tax_rate: parseFloat(e.target.value) || 0,\r\n                  })\r\n                }\r\n                className='p-1 w-24 text-right border rounded-md'\r\n              />\r\n            </div>\r\n            <div className='flex justify-between'>\r\n              <span>Sales Tax</span>\r\n              <span>${taxAmount.toFixed(2)}</span>\r\n            </div>\r\n            <div className='flex justify-between items-center'>\r\n              <span>Shipping</span>\r\n              <input\r\n                type='number'\r\n                value={formData.shipping_amount}\r\n                onChange={e =>\r\n                  setFormData({\r\n                    ...formData,\r\n                    shipping_amount: parseFloat(e.target.value) || 0,\r\n                  })\r\n                }\r\n                className='p-1 w-24 text-right border rounded-md'\r\n              />\r\n            </div>\r\n            <div className='flex justify-between items-center'>\r\n              <span>Deposit</span>\r\n              <input\r\n                type='number'\r\n                value={formData.deposit_amount}\r\n                onChange={e =>\r\n                  setFormData({\r\n                    ...formData,\r\n                    deposit_amount: parseFloat(e.target.value) || 0,\r\n                  })\r\n                }\r\n                className='p-1 w-24 text-right border rounded-md'\r\n              />\r\n            </div>\r\n            <div className='flex justify-between p-2 font-bold text-lg border-t-2 mt-2 pt-2'>\r\n              <span>Balance Due</span>\r\n              <span>${balanceDue.toFixed(2)}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <button\r\n          onClick={handleSave}\r\n          disabled={isSaving}\r\n          className='w-full py-3 mt-8 bg-blue-600 text-white font-bold rounded-lg hover:bg-blue-700 disabled:bg-blue-400'\r\n        >\r\n          {isSaving\r\n            ? 'Saving...'\r\n            : initialInvoice?.id\r\n              ? 'Update Invoice'\r\n              : 'Save Invoice'}\r\n        </button>\r\n      </div>\r\n\r\n      {isCustomerModalOpen && (\r\n        <CustomerModal\r\n          onClose={() => setIsCustomerModalOpen(false)}\r\n          onSaveSuccess={handleNewCustomerSuccess}\r\n        />\r\n      )}\r\n\r\n      {isServiceModalOpen && (\r\n        <div className='fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50'>\r\n          <div className='bg-white p-8 rounded-lg shadow-2xl w-full max-w-md'>\r\n            <h2 className='text-2xl font-bold mb-4'>Add New Service/Product</h2>\r\n            {serviceError && (\r\n              <div className='mb-4 p-3 bg-red-100 text-red-700 rounded-lg'>\r\n                {serviceError}\r\n              </div>\r\n            )}\r\n            <form onSubmit={handleAddService} className='space-y-4'>\r\n              <input\r\n                type='text'\r\n                value={newService.name}\r\n                onChange={e =>\r\n                  setNewService({ ...newService, name: e.target.value })\r\n                }\r\n                placeholder='Service/Product Name'\r\n                className='p-2 w-full border rounded-md'\r\n                required\r\n              />\r\n              <input\r\n                type='text'\r\n                value={newService.sku}\r\n                onChange={e =>\r\n                  setNewService({ ...newService, sku: e.target.value })\r\n                }\r\n                placeholder='SKU (optional)'\r\n                className='p-2 w-full border rounded-md'\r\n              />\r\n              <input\r\n                type='number'\r\n                value={newService.default_rate}\r\n                onChange={e =>\r\n                  setNewService({ ...newService, default_rate: e.target.value })\r\n                }\r\n                placeholder='Default Rate'\r\n                className='p-2 w-full border rounded-md'\r\n              />\r\n              <div className='flex justify-end space-x-2 pt-4'>\r\n                <button\r\n                  type='button'\r\n                  onClick={() => setIsServiceModalOpen(false)}\r\n                  className='px-4 py-2 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300'\r\n                >\r\n                  Cancel\r\n                </button>\r\n                <button\r\n                  type='submit'\r\n                  className='px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700'\r\n                >\r\n                  Add Service\r\n                </button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\n// --- Customer Modal (The Pop-up Form) ---\r\nfunction CustomerModal({\r\n  onClose,\r\n  onSaveSuccess,\r\n}: {\r\n  onClose: () => void;\r\n  onSaveSuccess: (c: Customer) => void;\r\n}) {\r\n  const [form, setForm] = useState({\r\n    name: '',\r\n    email: '',\r\n    address: '',\r\n    phone: '',\r\n  });\r\n  const [isSaving, setIsSaving] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const handleAddCustomer = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    setError(null);\r\n    if (!form.name) return setError('Customer name is required.');\r\n    setIsSaving(true);\r\n\r\n    const { data, error: insertError } = await supabase\r\n      .from('customers')\r\n      .insert([\r\n        {\r\n          customer_name: form.name,\r\n          email: form.email,\r\n          address: form.address,\r\n          phone: form.phone,\r\n        },\r\n      ])\r\n      .select()\r\n      .single();\r\n\r\n    setIsSaving(false);\r\n    if (insertError) {\r\n      setError(`Failed to add customer: ${insertError.message}`);\r\n    } else {\r\n      onSaveSuccess(data);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50'>\r\n      <div className='bg-white p-8 rounded-lg shadow-2xl w-full max-w-md'>\r\n        <h2 className='text-2xl font-bold mb-4'>Add New Customer</h2>\r\n        {error && (\r\n          <div className='mb-4 p-3 bg-red-100 text-red-700 rounded-lg'>\r\n            {error}\r\n          </div>\r\n        )}\r\n        <form onSubmit={handleAddCustomer} className='space-y-4'>\r\n          <input\r\n            type='text'\r\n            value={form.name}\r\n            onChange={e => setForm({ ...form, name: e.target.value })}\r\n            placeholder='Full Name or Company'\r\n            className='p-2 w-full border rounded-md'\r\n            required\r\n          />\r\n          <input\r\n            type='email'\r\n            value={form.email}\r\n            onChange={e => setForm({ ...form, email: e.target.value })}\r\n            placeholder='Email'\r\n            className='p-2 w-full border rounded-md'\r\n          />\r\n          <input\r\n            type='text'\r\n            value={form.address}\r\n            onChange={e => setForm({ ...form, address: e.target.value })}\r\n            placeholder='Address'\r\n            className='p-2 w-full border rounded-md'\r\n          />\r\n          <input\r\n            type='text'\r\n            value={form.phone}\r\n            onChange={e => setForm({ ...form, phone: e.target.value })}\r\n            placeholder='Phone'\r\n            className='p-2 w-full border rounded-md'\r\n          />\r\n          <div className='flex justify-end space-x-2 pt-4'>\r\n            <button\r\n              type='button'\r\n              onClick={onClose}\r\n              className='px-4 py-2 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300'\r\n            >\r\n              Cancel\r\n            </button>\r\n            <button\r\n              type='submit'\r\n              disabled={isSaving}\r\n              className='px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-blue-300'\r\n            >\r\n              {isSaving ? 'Saving...' : 'Add Customer'}\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"
}