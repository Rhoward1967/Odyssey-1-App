{
  "originalPath": "src\\components\\ResearchExportHub.tsx",
  "timestamp": "2025-10-13T18:26:54.574Z",
  "hash": "4e3a9c1abaebedd1654cf12fe86e983b7011494a19c449394f107f35b70e7cae",
  "size": 12098,
  "content": "import { supabase } from '@/lib/supabase';\r\nimport { Download, FileText } from 'lucide-react';\r\nimport { useEffect, useState } from 'react';\r\nimport { Badge } from './ui/badge';\r\nimport { Button } from './ui/button';\r\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card';\r\nimport { Input } from './ui/input';\r\nimport { Label } from './ui/label';\r\nimport { Progress } from './ui/progress';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from './ui/tabs';\r\n\r\nexport default function ResearchExportHub() {\r\n  const [exportProgress, setExportProgress] = useState(0);\r\n  const [isExporting, setIsExporting] = useState(false);\r\n  const [selectedFormat, setSelectedFormat] = useState('');\r\n  const [exportTitle, setExportTitle] = useState('');\r\n\r\n  const [exportFormats, setExportFormats] = useState<any[]>([]);\r\n  const [recentExports, setRecentExports] = useState<any[]>([]);\r\n  const [loadingFormats, setLoadingFormats] = useState(true);\r\n  const [loadingExports, setLoadingExports] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchExportFormats = async () => {\r\n      setLoadingFormats(true);\r\n      try {\r\n        const { data, error } = await supabase.from('export_formats').select('*').order('display_order');\r\n        if (error) throw error;\r\n        setExportFormats(data || []);\r\n      } catch {\r\n        setExportFormats([]);\r\n      } finally {\r\n        setLoadingFormats(false);\r\n      }\r\n    };\r\n    fetchExportFormats();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchRecentExports = async () => {\r\n      setLoadingExports(true);\r\n      try {\r\n        const { data, error } = await supabase.from('research_exports').select('*').order('created_at', { ascending: false }).limit(10);\r\n        if (error) throw error;\r\n        setRecentExports(data || []);\r\n      } catch {\r\n        setRecentExports([]);\r\n      } finally {\r\n        setLoadingExports(false);\r\n      }\r\n    };\r\n    fetchRecentExports();\r\n  }, []);\r\n\r\n  const handleExport = () => {\r\n    if (!selectedFormat || !exportTitle) return;\r\n    \r\n    setIsExporting(true);\r\n    setExportProgress(0);\r\n    \r\n    const interval = setInterval(() => {\r\n      setExportProgress(prev => {\r\n        if (prev >= 100) {\r\n          clearInterval(interval);\r\n          setIsExporting(false);\r\n          return 100;\r\n        }\r\n        return prev + Math.random() * 15;\r\n      });\r\n    }, 300);\r\n  };\r\n\r\n  return (\r\n    <div className=\"max-w-6xl mx-auto space-y-6\">\r\n      <Card className=\"bg-gradient-to-r from-green-600 to-blue-600 text-white\">\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <Download className=\"w-6 h-6\" />\r\n            Research Export Hub\r\n          </CardTitle>\r\n          <p className=\"text-green-100\">\r\n            Transform your research into professional documents, presentations, and shareable content\r\n          </p>\r\n        </CardHeader>\r\n      </Card>\r\n\r\n      <Tabs defaultValue=\"export\" className=\"w-full\">\r\n        <TabsList className=\"grid w-full grid-cols-3\">\r\n          <TabsTrigger value=\"export\">Create Export</TabsTrigger>\r\n          <TabsTrigger value=\"recent\">Recent Exports</TabsTrigger>\r\n          <TabsTrigger value=\"templates\">Templates</TabsTrigger>\r\n        </TabsList>\r\n\r\n        <TabsContent value=\"export\" className=\"space-y-6\">\r\n          {/* Export Configuration */}\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>Configure Your Export</CardTitle>\r\n            </CardHeader>\r\n            <CardContent className=\"space-y-4\">\r\n              <div className=\"grid md:grid-cols-2 gap-4\">\r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"title\">Export Title</Label>\r\n                  <Input\r\n                    id=\"title\"\r\n                    value={exportTitle}\r\n                    onChange={(e) => setExportTitle(e.target.value)}\r\n                    placeholder=\"Enter document title...\"\r\n                  />\r\n                </div>\r\n                <div className=\"space-y-2\">\r\n                  <Label>Export Format</Label>\r\n                  <Select value={selectedFormat} onValueChange={setSelectedFormat}>\r\n                    <SelectTrigger>\r\n                      <SelectValue placeholder=\"Choose format...\" />\r\n                    </SelectTrigger>\r\n                    <SelectContent>\r\n                      {loadingFormats ? (\r\n                        <SelectItem value=\"\" disabled>Loading...</SelectItem>\r\n                      ) : exportFormats.length > 0 ? (\r\n                        exportFormats.map((format) => (\r\n                          <SelectItem key={format.id} value={format.id}>\r\n                            {format.name}\r\n                          </SelectItem>\r\n                        ))\r\n                      ) : (\r\n                        <SelectItem value=\"\" disabled>No formats available</SelectItem>\r\n                      )}\r\n                    </SelectContent>\r\n                  </Select>\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          {/* Format Options */}\r\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n            {loadingFormats ? (\r\n              <div className=\"text-gray-400 col-span-3\">Loading export formats...</div>\r\n            ) : exportFormats.length > 0 ? (\r\n              exportFormats.map((format) => (\r\n                <Card \r\n                  key={format.id} \r\n                  className={`cursor-pointer transition-all hover:shadow-lg ${\r\n                    selectedFormat === format.id ? 'ring-2 ring-blue-500 bg-blue-50' : ''\r\n                  }`}\r\n                  onClick={() => setSelectedFormat(format.id)}\r\n                >\r\n                  <CardContent className=\"p-4\">\r\n                    <div className=\"flex items-center gap-3 mb-3\">\r\n                      <div className=\"p-2 bg-blue-100 rounded-lg text-blue-600\">\r\n                        {/* Optionally render icon if available in backend */}\r\n                        <FileText className=\"w-5 h-5\" />\r\n                      </div>\r\n                      <div>\r\n                        <h3 className=\"font-semibold\">{format.name}</h3>\r\n                        <Badge variant=\"outline\" className=\"text-xs\">\r\n                          {format.estimated_time || format.estimatedTime}\r\n                        </Badge>\r\n                      </div>\r\n                    </div>\r\n                    <p className=\"text-sm text-gray-600 mb-3\">{format.description}</p>\r\n                    <div className=\"space-y-1\">\r\n                      {(format.features || []).map((feature: string, idx: number) => (\r\n                        <div key={idx} className=\"flex items-center gap-2 text-xs text-gray-500\">\r\n                          <div className=\"w-1 h-1 bg-green-500 rounded-full\"></div>\r\n                          {feature}\r\n                        </div>\r\n                      ))}\r\n                    </div>\r\n                  </CardContent>\r\n                </Card>\r\n              ))\r\n            ) : (\r\n              <div className=\"text-gray-400 col-span-3\">No export formats available.</div>\r\n            )}\r\n          </div>\r\n\r\n          {/* Export Button */}\r\n          <Card>\r\n            <CardContent className=\"p-4\">\r\n              {isExporting ? (\r\n                <div className=\"space-y-3\">\r\n                  <div className=\"flex items-center gap-2\">\r\n                    <div className=\"animate-spin w-4 h-4 border-2 border-blue-500 border-t-transparent rounded-full\"></div>\r\n                    <span>Generating your export...</span>\r\n                  </div>\r\n                  <Progress value={exportProgress} />\r\n                  <p className=\"text-sm text-gray-600\">\r\n                    Processing research data, formatting content, generating citations...\r\n                  </p>\r\n                </div>\r\n              ) : (\r\n                <Button \r\n                  onClick={handleExport}\r\n                  disabled={!selectedFormat || !exportTitle}\r\n                  className=\"w-full bg-gradient-to-r from-green-500 to-blue-500 hover:from-green-600 hover:to-blue-600\"\r\n                  size=\"lg\"\r\n                >\r\n                  <Download className=\"w-5 h-5 mr-2\" />\r\n                  Generate Export\r\n                </Button>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"recent\" className=\"space-y-4\">\r\n          <div className=\"grid gap-4\">\r\n            {loadingExports ? (\r\n              <div className=\"text-gray-400\">Loading recent exports...</div>\r\n            ) : recentExports.length > 0 ? (\r\n              recentExports.map((export_: any, idx: number) => (\r\n                <Card key={idx}>\r\n                  <CardContent className=\"p-4\">\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <div className=\"flex items-center gap-3\">\r\n                        <FileText className=\"w-8 h-8 text-blue-500\" />\r\n                        <div>\r\n                          <h3 className=\"font-semibold\">{export_.title}</h3>\r\n                          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\r\n                            <Badge variant=\"outline\">{export_.format}</Badge>\r\n                            <span>{export_.created_at ? new Date(export_.created_at).toLocaleDateString() : ''}</span>\r\n                            <span>{export_.size || ''}</span>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"flex items-center gap-2\">\r\n                        <Badge variant={export_.status === 'completed' ? 'default' : 'secondary'}>\r\n                          {export_.status}\r\n                        </Badge>\r\n                        {export_.status === 'completed' && (\r\n                          <Button size=\"sm\" variant=\"outline\">\r\n                            <Download className=\"w-4 h-4 mr-1\" />\r\n                            Download\r\n                          </Button>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                  </CardContent>\r\n                </Card>\r\n              ))\r\n            ) : (\r\n              <div className=\"text-gray-400\">No recent exports found.</div>\r\n            )}\r\n          </div>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"templates\" className=\"space-y-4\">\r\n          <div className=\"grid md:grid-cols-2 gap-4\">\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle className=\"text-lg\">Academic Templates</CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"space-y-2\">\r\n                  <p className=\"text-sm text-gray-600\">Pre-configured templates for academic writing</p>\r\n                  <div className=\"flex flex-wrap gap-2\">\r\n                    <Badge variant=\"outline\">IEEE Format</Badge>\r\n                    <Badge variant=\"outline\">APA Style</Badge>\r\n                    <Badge variant=\"outline\">MLA Format</Badge>\r\n                  </div>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n            \r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle className=\"text-lg\">Business Templates</CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"space-y-2\">\r\n                  <p className=\"text-sm text-gray-600\">Professional business document formats</p>\r\n                  <div className=\"flex flex-wrap gap-2\">\r\n                    <Badge variant=\"outline\">Executive Summary</Badge>\r\n                    <Badge variant=\"outline\">Market Analysis</Badge>\r\n                    <Badge variant=\"outline\">Technical Spec</Badge>\r\n                  </div>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n        </TabsContent>\r\n      </Tabs>\r\n    </div>\r\n  );\r\n}"
}