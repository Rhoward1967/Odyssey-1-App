{
  "originalPath": "src\\components\\BulkUploadServices.tsx",
  "timestamp": "2025-10-15T16:14:06.270Z",
  "hash": "534f87b5e682753d0ebd51370c23c33365ec1e577fa7a8d25e5bcfaf5e6ee639",
  "size": 4977,
  "content": "import React, { useState } from 'react';\r\nimport * as XLSX from 'xlsx';\r\nimport Papa from 'papaparse';\r\nimport { supabase } from '@/lib/supabase';\r\n\r\n// Define the expected columns for services/products\r\nconst REQUIRED_FIELDS = ['name', 'sku', 'default_rate'];\r\n\r\nexport default function BulkUploadServices({\r\n  table = 'services',\r\n  onComplete,\r\n}: {\r\n  table?: string;\r\n  onComplete?: () => void;\r\n}) {\r\n  const [file, setFile] = useState<File | null>(null);\r\n  const [data, setData] = useState<any[]>([]);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [uploading, setUploading] = useState(false);\r\n  const [preview, setPreview] = useState<any[]>([]);\r\n\r\n  // Parse CSV or Excel\r\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setError(null);\r\n    const f = e.target.files?.[0];\r\n    if (!f) return;\r\n    setFile(f);\r\n    const ext = f.name.split('.').pop()?.toLowerCase();\r\n    if (ext === 'csv') {\r\n      Papa.parse(f, {\r\n        header: true,\r\n        skipEmptyLines: true,\r\n        complete: results => {\r\n          setPreview(results.data);\r\n        },\r\n        error: err => setError('CSV parse error: ' + err.message),\r\n      });\r\n    } else if (ext === 'xlsx' || ext === 'xls') {\r\n      const reader = new FileReader();\r\n      reader.onload = evt => {\r\n        const bstr = evt.target?.result;\r\n        const wb = XLSX.read(bstr, { type: 'binary' });\r\n        const wsname = wb.SheetNames[0];\r\n        const ws = wb.Sheets[wsname];\r\n        const json = XLSX.utils.sheet_to_json(ws, { defval: '' });\r\n        setPreview(json as any[]);\r\n      };\r\n      reader.readAsBinaryString(f);\r\n    } else {\r\n      setError('Unsupported file type. Please upload a CSV or Excel file.');\r\n    }\r\n  };\r\n\r\n  // Validate and upload\r\n  const handleUpload = async () => {\r\n    setError(null);\r\n    if (!preview.length) return setError('No data to upload.');\r\n    // Validate required fields\r\n    const missing = REQUIRED_FIELDS.filter(\r\n      field => !Object.keys(preview[0]).includes(field)\r\n    );\r\n    if (missing.length)\r\n      return setError('Missing required columns: ' + missing.join(', '));\r\n    setUploading(true);\r\n    // Clean and cast data\r\n    const rows = preview.map(row => ({\r\n      name: String(row.name).trim(),\r\n      sku: row.sku ? String(row.sku).trim() : '',\r\n      default_rate: row.default_rate ? Number(row.default_rate) : 0,\r\n    }));\r\n    // Insert in batches (Supabase limit is 500 rows per insert)\r\n    try {\r\n      for (let i = 0; i < rows.length; i += 500) {\r\n        const batch = rows.slice(i, i + 500);\r\n        const { error: upErr } = await supabase.from(table).insert(batch);\r\n        if (upErr) throw upErr;\r\n      }\r\n      setData([]);\r\n      setFile(null);\r\n      setPreview([]);\r\n      if (onComplete) onComplete();\r\n    } catch (err: any) {\r\n      setError('Upload failed: ' + (err.message || err));\r\n    } finally {\r\n      setUploading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='p-4 bg-white rounded shadow max-w-xl mx-auto'>\r\n      <h2 className='text-xl font-bold mb-2'>Bulk Upload Services/Products</h2>\r\n      <input\r\n        type='file'\r\n        accept='.csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel'\r\n        onChange={handleFileChange}\r\n      />\r\n      {error && <div className='mt-2 text-red-600'>{error}</div>}\r\n      {preview.length > 0 && (\r\n        <div className='mt-4'>\r\n          <h3 className='font-semibold mb-2'>\r\n            Preview ({preview.length} rows)\r\n          </h3>\r\n          <div className='overflow-x-auto max-h-64 border rounded'>\r\n            <table className='min-w-full text-xs'>\r\n              <thead>\r\n                <tr>\r\n                  {Object.keys(preview[0]).map(col => (\r\n                    <th key={col} className='px-2 py-1 border-b bg-gray-50'>\r\n                      {col}\r\n                    </th>\r\n                  ))}\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {preview.slice(0, 10).map((row, i) => (\r\n                  <tr key={i} className='odd:bg-gray-50'>\r\n                    {Object.keys(preview[0]).map(col => (\r\n                      <td key={col} className='px-2 py-1 border-b'>\r\n                        {row[col]}\r\n                      </td>\r\n                    ))}\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n            {preview.length > 10 && (\r\n              <div className='text-xs text-gray-500 p-2'>\r\n                Showing first 10 of {preview.length} rows\r\n              </div>\r\n            )}\r\n          </div>\r\n          <button\r\n            onClick={handleUpload}\r\n            disabled={uploading}\r\n            className='mt-4 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 disabled:bg-blue-300'\r\n          >\r\n            {uploading ? 'Uploading...' : 'Upload All'}\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"
}