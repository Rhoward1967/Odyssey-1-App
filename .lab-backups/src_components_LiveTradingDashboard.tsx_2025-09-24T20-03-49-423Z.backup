{
  "originalPath": "src\\components\\LiveTradingDashboard.tsx",
  "timestamp": "2025-09-24T20:03:49.424Z",
  "hash": "d76113b213504d2caecbce06bbf651fa26387040f289fcc470cb71aab8e0c5d7",
  "size": 7056,
  "content": "import React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { TrendingUp, TrendingDown, DollarSign, Activity } from 'lucide-react';\r\nimport { supabase } from '@/lib/supabase';\r\n\r\ninterface Trade {\r\n  id: string;\r\n  symbol: string;\r\n  amount: number;\r\n  price: number;\r\n  type: 'buy' | 'sell';\r\n  status: string;\r\n  timestamp: string;\r\n}\r\n\r\ninterface Portfolio {\r\n  symbol: string;\r\n  balance: number;\r\n  value: number;\r\n  change: number;\r\n}\r\n\r\nexport const LiveTradingDashboard = () => {\r\n  const [portfolio, setPortfolio] = useState<Portfolio[]>([]);\r\n  const [trades, setTrades] = useState<Trade[]>([]);\r\n  const [selectedAsset, setSelectedAsset] = useState('BTC');\r\n  const [tradeAmount, setTradeAmount] = useState('');\r\n  const [isDemo, setIsDemo] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    loadPortfolio();\r\n    loadTrades();\r\n  }, []);\r\n\r\n  const loadPortfolio = async () => {\r\n    try {\r\n      // Query Supabase for live portfolio data\r\n      const { data, error } = await supabase\r\n        .from('user_portfolio')\r\n        .select('*');\r\n      if (error) throw error;\r\n      setPortfolio(data || []);\r\n    } catch (error) {\r\n      console.error('Failed to load portfolio:', error);\r\n      setPortfolio([]);\r\n    }\r\n  };\r\n\r\n  const loadTrades = async () => {\r\n    try {\r\n      // Query Supabase for live trade history\r\n      const { data, error } = await supabase\r\n        .from('trade_history')\r\n        .select('*')\r\n        .order('timestamp', { ascending: false });\r\n      if (error) throw error;\r\n      setTrades(data || []);\r\n    } catch (error) {\r\n      console.error('Failed to load trades:', error);\r\n      setTrades([]);\r\n    }\r\n  };\r\n\r\n  const executeTrade = async (type: 'buy' | 'sell') => {\r\n    if (!tradeAmount) return;\r\n    \r\n    setLoading(true);\r\n    try {\r\n      const { data, error } = await supabase.functions.invoke('uphold-trading-engine', {\r\n        body: {\r\n          action: 'executeTrade',\r\n          symbol: selectedAsset,\r\n          amount: parseFloat(tradeAmount),\r\n          orderType: type\r\n        }\r\n      });\r\n\r\n      if (error) throw error;\r\n\r\n      const newTrade: Trade = {\r\n        id: data.orderId,\r\n        symbol: selectedAsset,\r\n        amount: parseFloat(tradeAmount),\r\n        price: data.price,\r\n        type,\r\n        status: data.status,\r\n        timestamp: data.timestamp\r\n      };\r\n\r\n      setTrades(prev => [newTrade, ...prev]);\r\n      setTradeAmount('');\r\n    } catch (error) {\r\n      console.error('Trade execution failed:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <div className=\"flex items-center justify-between\">\r\n        <h2 className=\"text-3xl font-bold\">Live Trading Dashboard</h2>\r\n        <Badge variant={isDemo ? \"secondary\" : \"default\"}>\r\n          {isDemo ? \"Demo Mode\" : \"Live Trading\"}\r\n        </Badge>\r\n      </div>\r\n\r\n      {/* Portfolio Overview */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n        {portfolio.map((asset) => (\r\n          <Card key={asset.symbol}>\r\n            <CardHeader className=\"pb-2\">\r\n              <CardTitle className=\"text-sm font-medium\">{asset.symbol}</CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold\">{asset.balance}</div>\r\n              <div className=\"flex items-center text-sm text-muted-foreground\">\r\n                <DollarSign className=\"h-4 w-4 mr-1\" />\r\n                ${asset.value.toLocaleString()}\r\n                <div className={`ml-2 flex items-center ${asset.change >= 0 ? 'text-green-600' : 'text-red-600'}`}>\r\n                  {asset.change >= 0 ? <TrendingUp className=\"h-3 w-3\" /> : <TrendingDown className=\"h-3 w-3\" />}\r\n                  {Math.abs(asset.change)}%\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        ))}\r\n      </div>\r\n\r\n      {/* Trading Interface */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center\">\r\n            <Activity className=\"h-5 w-5 mr-2\" />\r\n            Execute Trade\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent className=\"space-y-4\">\r\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n            <div>\r\n              <label className=\"text-sm font-medium\">Asset</label>\r\n              <select \r\n                className=\"w-full mt-1 p-2 border rounded-md\"\r\n                value={selectedAsset}\r\n                onChange={(e) => setSelectedAsset(e.target.value)}\r\n              >\r\n                <option value=\"BTC\">Bitcoin (BTC)</option>\r\n                <option value=\"ETH\">Ethereum (ETH)</option>\r\n                <option value=\"LTC\">Litecoin (LTC)</option>\r\n              </select>\r\n            </div>\r\n            <div>\r\n              <label className=\"text-sm font-medium\">Amount</label>\r\n              <Input\r\n                type=\"number\"\r\n                placeholder=\"0.00\"\r\n                value={tradeAmount}\r\n                onChange={(e) => setTradeAmount(e.target.value)}\r\n              />\r\n            </div>\r\n            <div className=\"flex items-end space-x-2\">\r\n              <Button \r\n                onClick={() => executeTrade('buy')}\r\n                disabled={loading || !tradeAmount}\r\n                className=\"bg-green-600 hover:bg-green-700\"\r\n              >\r\n                Buy\r\n              </Button>\r\n              <Button \r\n                onClick={() => executeTrade('sell')}\r\n                disabled={loading || !tradeAmount}\r\n                variant=\"destructive\"\r\n              >\r\n                Sell\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Recent Trades */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Recent Trades</CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"space-y-2\">\r\n            {trades.map((trade) => (\r\n              <div key={trade.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\r\n                <div className=\"flex items-center space-x-3\">\r\n                  <Badge variant={trade.type === 'buy' ? 'default' : 'destructive'}>\r\n                    {trade.type.toUpperCase()}\r\n                  </Badge>\r\n                  <span className=\"font-medium\">{trade.symbol}</span>\r\n                  <span>{trade.amount}</span>\r\n                </div>\r\n                <div className=\"text-right\">\r\n                  <div className=\"font-medium\">${trade.price.toLocaleString()}</div>\r\n                  <div className=\"text-sm text-muted-foreground\">{trade.status}</div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n};"
}