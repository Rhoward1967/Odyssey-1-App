{
  "originalPath": "src\\components\\AIExpertAdvisor.tsx",
  "timestamp": "2025-10-15T16:14:05.798Z",
  "hash": "94d6fe7c3d121b90a0897eb385a8dba9f104186ba67de6d238afbb20d576e1e9",
  "size": 8579,
  "content": "import React, { useState } from 'react';\r\nimport { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';\r\nimport { Brain, Sparkles } from 'lucide-react';\r\n\r\ninterface AIExpertAdvisorProps {\r\n  name?: string;\r\n  specialty?: string;\r\n  avatarUrl?: string;\r\n  message?: string;\r\n}\r\n\r\nconst defaultMessage = `Hello! I'm your AI Expert Advisor. I can provide insights, answer questions, and help you make smarter trading decisions. Ask me about market trends, trading strategies, or anything AI-related!`;\r\n\r\n\r\nconst AIExpertAdvisor: React.FC<AIExpertAdvisorProps> = ({\r\n  name = 'Dr. Athena',\r\n  specialty = 'AI & Quantitative Trading',\r\n  avatarUrl,\r\n  message = defaultMessage,\r\n}) => {\r\n  const [chat, setChat] = useState<Array<{ sender: 'user' | 'ai'; text: string }>>([\r\n    { sender: 'ai', text: message }\r\n  ]);\r\n  const [input, setInput] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [aiProvider, setAIProvider] = useState<'openai' | 'anthropic' | 'gemini'>('openai');\r\n  // Connect to Google Gemini API\r\n  const getGeminiResponse = async (userMsg: string) => {\r\n    const apiKey = import.meta.env.VITE_GEMINI_API_KEY;\r\n    // Gemini expects a different payload structure\r\n    const systemPrompt = `You are Dr. Athena, an expert AI trading advisor. Give concise, actionable, and friendly advice about crypto trading, strategies, and market trends.`;\r\n    const history = chat.filter(m => m.sender === 'user' || m.sender === 'ai').map(m => ({\r\n      role: m.sender === 'user' ? 'user' : 'model',\r\n      parts: [{ text: m.text }]\r\n    }));\r\n    const res = await fetch('https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=' + apiKey, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        contents: [\r\n          { role: 'user', parts: [{ text: systemPrompt }] },\r\n          ...history,\r\n          { role: 'user', parts: [{ text: userMsg }] }\r\n        ],\r\n        generationConfig: {\r\n          maxOutputTokens: 120,\r\n          temperature: 0.7\r\n        }\r\n      })\r\n    });\r\n    const data = await res.json();\r\n    if (data.candidates && data.candidates[0]?.content?.parts && data.candidates[0].content.parts[0]?.text) {\r\n      return data.candidates[0].content.parts[0].text.trim();\r\n    } else {\r\n      return 'Sorry, I could not get a response from Gemini.';\r\n    }\r\n  };\r\n\r\n  // Connect to OpenAI API\r\n  const getOpenAIResponse = async (userMsg: string) => {\r\n    const apiKey = import.meta.env.VITE_OPENAI_API_KEY;\r\n    const res = await fetch('https://api.openai.com/v1/chat/completions', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${apiKey}`,\r\n      },\r\n      body: JSON.stringify({\r\n        model: 'gpt-3.5-turbo',\r\n        messages: [\r\n          { role: 'system', content: `You are Dr. Athena, an expert AI trading advisor. Give concise, actionable, and friendly advice about crypto trading, strategies, and market trends.` },\r\n          ...chat.filter(m => m.sender === 'user' || m.sender === 'ai').map(m => ({\r\n            role: m.sender === 'user' ? 'user' : 'assistant',\r\n            content: m.text\r\n          })),\r\n          { role: 'user', content: userMsg }\r\n        ],\r\n        max_tokens: 120,\r\n        temperature: 0.7\r\n      })\r\n    });\r\n    const data = await res.json();\r\n    if (data.choices && data.choices[0]?.message?.content) {\r\n      return data.choices[0].message.content.trim();\r\n    } else {\r\n      return 'Sorry, I could not get a response from OpenAI.';\r\n    }\r\n  };\r\n\r\n  // Connect to Anthropic Claude API\r\n  const getAnthropicResponse = async (userMsg: string) => {\r\n    const apiKey = import.meta.env.VITE_ANTHROPIC_API_KEY;\r\n    const systemPrompt = `You are Dr. Athena, an expert AI trading advisor. Give concise, actionable, and friendly advice about crypto trading, strategies, and market trends.`;\r\n    const messages = [\r\n      { role: 'user', content: userMsg }\r\n    ];\r\n    const res = await fetch('https://api.anthropic.com/v1/messages', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'x-api-key': apiKey,\r\n        'anthropic-version': '2023-06-01',\r\n      },\r\n      body: JSON.stringify({\r\n        model: 'claude-3-haiku-20240307',\r\n        max_tokens: 120,\r\n        system: systemPrompt,\r\n        messages: [\r\n          ...chat.filter(m => m.sender === 'user' || m.sender === 'ai').map(m => ({\r\n            role: m.sender === 'user' ? 'user' : 'assistant',\r\n            content: m.text\r\n          })),\r\n          { role: 'user', content: userMsg }\r\n        ]\r\n      })\r\n    });\r\n    const data = await res.json();\r\n    if (data.content && Array.isArray(data.content) && data.content[0]?.text) {\r\n      return data.content[0].text.trim();\r\n    } else {\r\n      return 'Sorry, I could not get a response from Anthropic.';\r\n    }\r\n  };\r\n\r\n  // Unified handler\r\n  const getAIResponse = async (userMsg: string) => {\r\n    setLoading(true);\r\n    try {\r\n      let response = '';\r\n      if (aiProvider === 'openai') {\r\n        response = await getOpenAIResponse(userMsg);\r\n      } else if (aiProvider === 'anthropic') {\r\n        response = await getAnthropicResponse(userMsg);\r\n      } else {\r\n        response = await getGeminiResponse(userMsg);\r\n      }\r\n      setLoading(false);\r\n      return response;\r\n    } catch (err) {\r\n      setLoading(false);\r\n      return 'Error connecting to AI backend.';\r\n    }\r\n  };\r\n\r\n  const handleSend = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    if (!input.trim()) return;\r\n    const userMsg = input.trim();\r\n    setChat(prev => [...prev, { sender: 'user', text: userMsg }]);\r\n    setInput('');\r\n    const aiMsg = await getAIResponse(userMsg);\r\n    setChat(prev => [...prev, { sender: 'ai', text: aiMsg }]);\r\n  };\r\n\r\n  return (\r\n    <Card className=\"bg-gradient-to-br from-blue-50 to-purple-100 border-blue-200 shadow-lg\">\r\n      <CardHeader className=\"flex flex-row items-center gap-4 pb-2\">\r\n        {avatarUrl ? (\r\n          <img src={avatarUrl} alt={name} className=\"w-12 h-12 rounded-full border-2 border-blue-300\" />\r\n        ) : (\r\n          <div className=\"w-12 h-12 flex items-center justify-center rounded-full bg-blue-200\">\r\n            <Brain className=\"w-7 h-7 text-blue-700\" />\r\n          </div>\r\n        )}\r\n        <div>\r\n          <CardTitle className=\"text-lg font-bold flex items-center gap-2\">\r\n            {name} <Sparkles className=\"w-4 h-4 text-purple-500\" />\r\n          </CardTitle>\r\n          <div className=\"text-xs text-blue-700 font-medium\">{specialty}</div>\r\n        </div>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <div className=\"flex items-center gap-2 mb-2\">\r\n          <span className=\"text-xs text-gray-600\">AI Provider:</span>\r\n          <select\r\n            className=\"rounded border border-blue-200 px-2 py-1 text-xs focus:outline-none focus:ring-2 focus:ring-blue-300\"\r\n            value={aiProvider}\r\n            onChange={e => setAIProvider(e.target.value as 'openai' | 'anthropic' | 'gemini')}\r\n            disabled={loading}\r\n          >\r\n            <option value=\"openai\">OpenAI</option>\r\n            <option value=\"anthropic\">Anthropic</option>\r\n            <option value=\"gemini\">Gemini</option>\r\n          </select>\r\n        </div>\r\n        <div className=\"max-h-40 overflow-y-auto mb-2 space-y-2\">\r\n          {chat.map((msg, idx) => (\r\n            <div key={idx} className={msg.sender === 'ai' ? 'text-blue-900' : 'text-right'}>\r\n              <span className={msg.sender === 'ai' ? 'bg-blue-100 px-2 py-1 rounded-lg inline-block' : 'bg-purple-100 px-2 py-1 rounded-lg inline-block'}>\r\n                {msg.text}\r\n              </span>\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <form onSubmit={handleSend} className=\"flex gap-2 mt-2\">\r\n          <input\r\n            className=\"flex-1 rounded border border-blue-200 px-2 py-1 text-sm focus:outline-none focus:ring-2 focus:ring-blue-300\"\r\n            placeholder=\"Ask the AI advisor...\"\r\n            value={input}\r\n            onChange={e => setInput(e.target.value)}\r\n            disabled={loading}\r\n          />\r\n          <button\r\n            type=\"submit\"\r\n            className=\"bg-blue-600 text-white px-3 py-1 rounded disabled:opacity-50\"\r\n            disabled={loading || !input.trim()}\r\n          >\r\n            {loading ? '...' : 'Send'}\r\n          </button>\r\n        </form>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default AIExpertAdvisor;\r\n"
}