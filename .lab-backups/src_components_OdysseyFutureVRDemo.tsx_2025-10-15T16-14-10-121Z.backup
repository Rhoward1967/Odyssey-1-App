{
  "originalPath": "src\\components\\OdysseyFutureVRDemo.tsx",
  "timestamp": "2025-10-15T16:14:10.121Z",
  "hash": "f56e4e7011879043f5a3061cd1ed2800c8ac3031051e0bbd9f8f81da988bf811",
  "size": 5437,
  "content": "import React, { useRef, useEffect, useState } from 'react';\r\n\r\n// This VR demo uses A-Frame for a futuristic, space-time themed experience\r\n// Make sure aframe is loaded in index.html\r\n\r\nconst elements = [\r\n  {\r\n    id: 'ai-core',\r\n    label: 'AI Core',\r\n    color: '#00fff7',\r\n    position: '0 1.6 -3',\r\n    geometry: 'icosahedron',\r\n    scale: '1.2 1.2 1.2',\r\n    glow: true,\r\n    info: 'The Odyssey-1 AI Core: Quantum intelligence at the heart of the future.'\r\n  },\r\n  {\r\n    id: 'time-stream',\r\n    label: 'Time Stream',\r\n    color: '#ff00e6',\r\n    position: '-2 1.2 -4',\r\n    geometry: 'torus',\r\n    scale: '0.7 0.7 0.7',\r\n    glow: true,\r\n    info: 'Time Stream: Visualizes the flow of data and decisions across time.'\r\n  },\r\n  {\r\n    id: 'business-hub',\r\n    label: 'Business Hub',\r\n    color: '#ffe600',\r\n    position: '2 1.2 -4',\r\n    geometry: 'octahedron',\r\n    scale: '0.9 0.9 0.9',\r\n    glow: true,\r\n    info: 'Business Hub: The future of enterprise, powered by Odyssey-1.'\r\n  },\r\n  {\r\n    id: 'cosmic-portal',\r\n    label: 'Cosmic Portal',\r\n    color: '#7c3aed',\r\n    position: '0 0.5 -6',\r\n    geometry: 'ring',\r\n    scale: '2 2 2',\r\n    glow: false,\r\n    info: 'Cosmic Portal: Gateway to infinite possibilities.'\r\n  }\r\n];\r\n\r\nexport default function OdysseyFutureVRDemo() {\r\n  const [active, setActive] = useState(null);\r\n  const infoPanelRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (active && infoPanelRef.current) {\r\n      infoPanelRef.current.scrollIntoView({ behavior: 'smooth', block: 'start' });\r\n    }\r\n  }, [active]);\r\n\r\n  useEffect(() => {\r\n    // Attach click handlers after scene is rendered\r\n    const handleClick = (id) => () => setActive(id);\r\n    const interval = setInterval(() => {\r\n      const sceneEl = document.querySelector('a-scene');\r\n      if (!sceneEl) return;\r\n      elements.forEach(el => {\r\n        const entity = sceneEl.querySelector(`#${el.id}`);\r\n        if (entity) {\r\n          entity.addEventListener('click', handleClick(el.id));\r\n        }\r\n      });\r\n      clearInterval(interval);\r\n    }, 500);\r\n    return () => {\r\n      const sceneEl = document.querySelector('a-scene');\r\n      if (!sceneEl) return;\r\n      elements.forEach(el => {\r\n        const entity = sceneEl.querySelector(`#${el.id}`);\r\n        if (entity) entity.replaceWith(entity.cloneNode(true));\r\n      });\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"relative w-full h-[70vh] overflow-hidden rounded-xl my-12 shadow-2xl border border-blue-400/30\">\r\n      <a-scene {...({ embedded: true, style: { width: '100%', height: '100%' } } as any)}>\r\n        {/* Cosmic background */}\r\n        <a-sky {...({ color: '#0a0026' } as any)}></a-sky>\r\n        {/* Animated stars */}\r\n        <a-entity {...({ particleSystem: 'preset: dust; color: #fff, #00fff7, #ff00e6; size: 1; count: 2000' } as any)}></a-entity>\r\n        {/* Orbiting data rings */}\r\n        <a-entity {...({ id: 'data-orbit', animation: 'property: rotation; to: 0 360 0; loop: true; dur: 12000; easing: linear', position: '0 1.6 -3' } as any)}>\r\n          <a-torus {...({ color: '#00fff7', radius: '1.7', radiusTubular: '0.03', segmentsRadial: '36', segmentsTubular: '12', opacity: '0.5', transparent: true } as any)}></a-torus>\r\n          <a-torus {...({ color: '#ff00e6', radius: '2.1', radiusTubular: '0.02', segmentsRadial: '36', segmentsTubular: '12', opacity: '0.3', transparent: true } as any)}></a-torus>\r\n        </a-entity>\r\n        {/* Futuristic elements */}\r\n        {elements.map(el => (\r\n          <a-entity\r\n            key={el.id}\r\n            id={el.id}\r\n            className=\"interactable\"\r\n            {...({\r\n              geometry: `primitive: ${el.geometry}`,\r\n              position: el.position,\r\n              scale: el.scale,\r\n              material: `color: ${el.color}; emissive: ${el.glow ? el.color : '#000'}; emissiveIntensity: ${el.glow ? 0.7 : 0.1}; metalness: 0.8; roughness: 0.2; opacity: 0.95; transparent: true; shader: standard`,\r\n              animation: 'property: rotation; to: 0 360 0; loop: true; dur: 9000; easing: linear',\r\n              shadow: true\r\n            } as any)}\r\n          >\r\n            <a-text {...({ value: el.label, align: 'center', position: '0 1 0', color: '#fff', width: '3' } as any)} />\r\n          </a-entity>\r\n        ))}\r\n        {/* Holographic grid floor */}\r\n        <a-grid {...({ color: '#00fff7', opacity: '0.15', width: '30', height: '30', position: '0 0 -4', rotation: '-90 0 0' } as any)}></a-grid>\r\n      </a-scene>\r\n      {active && (\r\n        <div\r\n          ref={infoPanelRef}\r\n          className=\"absolute top-0 left-0 w-full h-full bg-black/80 backdrop-blur-sm flex items-center justify-center p-4 z-10\"\r\n          onClick={() => setActive(null)}\r\n        >\r\n          <div className=\"info-panel rounded-lg shadow-2xl p-6 max-w-xl w-full text-gray-100 relative\" onClick={e => e.stopPropagation()}>\r\n            <h2 className=\"text-2xl font-bold text-blue-400 mb-4\">{elements.find(e => e.id === active)?.label}</h2>\r\n            <p className=\"text-gray-300 mb-4 text-sm\">{elements.find(e => e.id === active)?.info}</p>\r\n            <button\r\n              className=\"absolute top-4 right-4 px-3 py-1 bg-blue-600 hover:bg-blue-700 text-white rounded-full shadow-md transition-colors duration-200\"\r\n              onClick={() => setActive(null)}\r\n            >\r\n              X\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"
}