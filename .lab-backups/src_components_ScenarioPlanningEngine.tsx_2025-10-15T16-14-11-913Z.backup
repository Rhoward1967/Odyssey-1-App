{
  "originalPath": "src\\components\\ScenarioPlanningEngine.tsx",
  "timestamp": "2025-10-15T16:14:11.913Z",
  "hash": "0db4c3de9366ea7396e72cb34ad0d0e3ade89ab10b5826b507b176eb128cc7e0",
  "size": 8707,
  "content": "import React, { useEffect, useState } from 'react';\r\nimport { supabase } from '../lib/supabase';\r\nimport { Badge } from './ui/badge';\r\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card';\r\nimport { Progress } from './ui/progress';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from './ui/tabs';\r\n\r\ninterface Scenario {\r\n  id: string;\r\n  name: string;\r\n  type: 'what_if' | 'stress_test' | 'optimization' | 'regulatory';\r\n  status: 'running' | 'completed' | 'failed';\r\n  progress: number;\r\n  variables: Record<string, number>;\r\n  outcomes: {\r\n    probability: number;\r\n    impact: number;\r\n    recommendation: string;\r\n    roi: number;\r\n  };\r\n}\r\n\r\ninterface RegulatorySimulation {\r\n  scenario: string;\r\n  compliance: number;\r\n  adaptationCost: number;\r\n  timeToImplement: number;\r\n  riskLevel: 'low' | 'medium' | 'high';\r\n}\r\n\r\nexport const ScenarioPlanningEngine: React.FC = () => {\r\n  const [scenarios, setScenarios] = useState<Scenario[]>([]);\r\n  const [regulatorySimulations, setRegulatorySimulations] = useState<\r\n    RegulatorySimulation[]\r\n  >([]);\r\n  const [economicModels, setEconomicModels] = useState<any>({});\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchScenarioData = async () => {\r\n      setLoading(true);\r\n      try {\r\n        const { data, error } = await supabase.functions.invoke(\r\n          'advanced-simulation-processor',\r\n          {\r\n            body: { simulationType: 'scenario_planning', parameters: {} },\r\n          }\r\n        );\r\n        if (error) throw error;\r\n        setRegulatorySimulations(data?.regulatorySimulations || []);\r\n        setEconomicModels(data?.economicModels || {});\r\n        setScenarios(data?.scenarios || []);\r\n      } catch (err) {\r\n        setRegulatorySimulations([]);\r\n        setEconomicModels({});\r\n        setScenarios([]);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    fetchScenarioData();\r\n  }, []);\r\n\r\n  const generateRecommendation = (type: string): string => {\r\n    const recommendations = {\r\n      what_if: 'Increase bid buffer by 15% to account for risk factors',\r\n      stress_test: 'Diversify supplier base to reduce single points of failure',\r\n      optimization: 'Focus resources on high-probability opportunities',\r\n      regulatory: 'Begin compliance preparation 60 days early',\r\n    };\r\n    return (\r\n      recommendations[type as keyof typeof recommendations] ||\r\n      'Monitor situation closely'\r\n    );\r\n  };\r\n\r\n  // Optionally, add functions to trigger new simulations via backend if needed\r\n  // For now, all data is loaded from backend on mount\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className='p-8 text-center text-white'>\r\n        Loading scenario planning data...\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <Card className='bg-gradient-to-br from-violet-900 to-purple-900 border-violet-500'>\r\n      <CardHeader>\r\n        <CardTitle className='text-white flex items-center gap-2'>\r\n          ðŸŽ¯ Scenario Planning Engine\r\n          <Badge\r\n            variant='outline'\r\n            className='text-violet-400 border-violet-400'\r\n          >\r\n            {scenarios.filter(s => s.status === 'running').length} Running\r\n          </Badge>\r\n        </CardTitle>\r\n      </CardHeader>\r\n      <CardContent className='text-white'>\r\n        <Tabs defaultValue='scenarios' className='w-full'>\r\n          <TabsList className='grid w-full grid-cols-3'>\r\n            <TabsTrigger value='scenarios'>Scenarios</TabsTrigger>\r\n            <TabsTrigger value='regulatory'>Regulatory</TabsTrigger>\r\n            <TabsTrigger value='economic'>Economic</TabsTrigger>\r\n          </TabsList>\r\n\r\n          <TabsContent value='scenarios' className='space-y-4'>\r\n            <div className='space-y-3'>\r\n              {scenarios.map(scenario => (\r\n                <div key={scenario.id} className='bg-black/20 p-3 rounded-lg'>\r\n                  <div className='flex justify-between items-center mb-2'>\r\n                    <span className='text-sm font-medium'>{scenario.name}</span>\r\n                    <Badge\r\n                      variant={\r\n                        scenario.status === 'completed'\r\n                          ? 'default'\r\n                          : 'secondary'\r\n                      }\r\n                    >\r\n                      {scenario.status}\r\n                    </Badge>\r\n                  </div>\r\n                  <Progress value={scenario.progress} className='mb-2' />\r\n                  {scenario.status === 'completed' && (\r\n                    <div className='text-xs space-y-1 text-gray-300'>\r\n                      <div>\r\n                        Probability:{' '}\r\n                        {(scenario.outcomes.probability * 100).toFixed(1)}%\r\n                      </div>\r\n                      <div>ROI: {scenario.outcomes.roi.toFixed(1)}x</div>\r\n                      <div className='text-violet-300'>\r\n                        {scenario.outcomes.recommendation}\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              ))}\r\n            </div>\r\n\r\n            {/*\r\n            <div className=\"flex gap-2\">\r\n              <Button \r\n                size=\"sm\" \r\n                className=\"bg-violet-600 hover:bg-violet-700\"\r\n                disabled\r\n              >\r\n                What-If Analysis\r\n              </Button>\r\n              <Button \r\n                size=\"sm\" \r\n                className=\"bg-purple-600 hover:bg-purple-700\"\r\n                disabled\r\n              >\r\n                Stress Test\r\n              </Button>\r\n            </div>\r\n            */}\r\n          </TabsContent>\r\n\r\n          <TabsContent value='regulatory' className='space-y-4'>\r\n            {regulatorySimulations.map((sim, index) => (\r\n              <div key={index} className='bg-black/20 p-3 rounded-lg'>\r\n                <div className='flex justify-between items-center mb-2'>\r\n                  <span className='text-sm font-medium'>{sim.scenario}</span>\r\n                  <Badge\r\n                    variant={\r\n                      sim.riskLevel === 'low' ? 'default' : 'destructive'\r\n                    }\r\n                  >\r\n                    {sim.riskLevel.toUpperCase()}\r\n                  </Badge>\r\n                </div>\r\n                <div className='text-xs space-y-1 text-gray-300'>\r\n                  <div>\r\n                    Compliance:{' '}\r\n                    {(typeof sim.compliance === 'number' &&\r\n                    !isNaN(sim.compliance)\r\n                      ? sim.compliance * 100\r\n                      : 0\r\n                    ).toFixed(1)}\r\n                    %\r\n                  </div>\r\n                  <div>Cost: ${sim.adaptationCost.toLocaleString()}</div>\r\n                  <div>Timeline: {sim.timeToImplement} days</div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </TabsContent>\r\n\r\n          <TabsContent value='economic' className='space-y-4'>\r\n            <div className='grid grid-cols-2 gap-4'>\r\n              <div className='bg-black/20 p-3 rounded-lg'>\r\n                <div className='text-sm font-medium mb-1'>Inflation Impact</div>\r\n                <div className='text-xl font-bold text-red-400'>\r\n                  {(typeof economicModels.inflationImpact === 'number' &&\r\n                  !isNaN(economicModels.inflationImpact)\r\n                    ? economicModels.inflationImpact * 100\r\n                    : 0\r\n                  ).toFixed(1)}\r\n                  %\r\n                </div>\r\n              </div>\r\n              <div className='bg-black/20 p-3 rounded-lg'>\r\n                <div className='text-sm font-medium mb-1'>\r\n                  Market Volatility\r\n                </div>\r\n                <div className='text-xl font-bold text-orange-400'>\r\n                  {(economicModels.marketVolatility * 100).toFixed(1)}%\r\n                </div>\r\n              </div>\r\n              <div className='bg-black/20 p-3 rounded-lg'>\r\n                <div className='text-sm font-medium mb-1'>Sector Growth</div>\r\n                <div className='text-xl font-bold text-green-400'>\r\n                  {(economicModels.sectorGrowth * 100).toFixed(1)}%\r\n                </div>\r\n              </div>\r\n              <div className='bg-black/20 p-3 rounded-lg'>\r\n                <div className='text-sm font-medium mb-1'>\r\n                  Competition Index\r\n                </div>\r\n                <div className='text-xl font-bold text-blue-400'>\r\n                  {economicModels.competitionIndex.toFixed(2)}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </TabsContent>\r\n        </Tabs>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n"
}