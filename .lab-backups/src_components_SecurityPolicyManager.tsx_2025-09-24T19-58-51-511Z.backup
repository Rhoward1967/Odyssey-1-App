{
  "originalPath": "src\\components\\SecurityPolicyManager.tsx",
  "timestamp": "2025-09-24T19:58:51.511Z",
  "hash": "bb6c558a107e741853bef71aef0b6aa089d513c9958a552ecbd50059d28033a1",
  "size": 10519,
  "content": "import React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\nimport { Shield, Lock, Key, Users, AlertTriangle, CheckCircle } from 'lucide-react';\r\nimport { supabase } from '@/lib/supabase';\r\n\r\ninterface SecurityPolicy {\r\n  id: string;\r\n  table: string;\r\n  name: string;\r\n  command: string;\r\n  roles: string[];\r\n  status: 'active' | 'inactive' | 'conflicted';\r\n  lastModified: Date;\r\n}\r\n\r\ninterface SecurityIssue {\r\n  type: 'duplicate_policy' | 'missing_policy' | 'overpermissive' | 'performance';\r\n  severity: 'high' | 'medium' | 'low';\r\n  description: string;\r\n  table: string;\r\n  recommendation: string;\r\n}\r\n\r\nexport function SecurityPolicyManager() {\r\n  const [policies, setPolicies] = useState<SecurityPolicy[]>([]);\r\n  const [issues, setIssues] = useState<SecurityIssue[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [selectedTable, setSelectedTable] = useState<string>('all');\r\n\r\n  const loadPolicies = async () => {\r\n    setLoading(true);\r\n    try {\r\n      // Query Supabase for security policies\r\n      const { data: policyData, error: policyError } = await supabase\r\n        .from('security_policies')\r\n        .select('*');\r\n\r\n      if (policyError) throw policyError;\r\n\r\n      // Map backend data to SecurityPolicy interface\r\n      const policies: SecurityPolicy[] = (policyData || []).map((p: any) => ({\r\n        id: p.id,\r\n        table: p.table,\r\n        name: p.name,\r\n        command: p.command,\r\n        roles: p.roles || [],\r\n        status: p.status,\r\n        lastModified: p.last_modified ? new Date(p.last_modified) : new Date()\r\n      }));\r\n      setPolicies(policies);\r\n\r\n      // Query Supabase for security issues\r\n      const { data: issueData, error: issueError } = await supabase\r\n        .from('security_issues')\r\n        .select('*');\r\n\r\n      if (issueError) throw issueError;\r\n\r\n      const issues: SecurityIssue[] = (issueData || []).map((i: any) => ({\r\n        type: i.type,\r\n        severity: i.severity,\r\n        description: i.description,\r\n        table: i.table,\r\n        recommendation: i.recommendation\r\n      }));\r\n      setIssues(issues);\r\n    } catch (error) {\r\n      console.error('Failed to load policies:', error);\r\n      setPolicies([]);\r\n      setIssues([]);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fixIssue = async (issue: SecurityIssue) => {\r\n    try {\r\n      console.log('Fixing security issue:', issue.type, 'on table:', issue.table);\r\n      // Implementation would fix the specific issue\r\n      await loadPolicies(); // Refresh after fix\r\n    } catch (error) {\r\n      console.error('Fix failed:', error);\r\n    }\r\n  };\r\n\r\n  const createOptimizedPolicy = async (table: string) => {\r\n    try {\r\n      console.log('Creating optimized policy for table:', table);\r\n      // Implementation would create new optimized policy\r\n      await loadPolicies();\r\n    } catch (error) {\r\n      console.error('Policy creation failed:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadPolicies();\r\n  }, []);\r\n\r\n  const filteredPolicies = selectedTable === 'all' \r\n    ? policies \r\n    : policies.filter(p => p.table === selectedTable);\r\n\r\n  const tables = [...new Set(policies.map(p => p.table))];\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <Shield className=\"h-5 w-5\" />\r\n            Security Policy Manager\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <Tabs defaultValue=\"policies\" className=\"w-full\">\r\n            <TabsList className=\"grid w-full grid-cols-3\">\r\n              <TabsTrigger value=\"policies\">Policies</TabsTrigger>\r\n              <TabsTrigger value=\"issues\">Issues</TabsTrigger>\r\n              <TabsTrigger value=\"audit\">Audit</TabsTrigger>\r\n            </TabsList>\r\n\r\n            <TabsContent value=\"policies\" className=\"space-y-4\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <div className=\"flex items-center gap-4\">\r\n                  <Button onClick={loadPolicies} disabled={loading}>\r\n                    {loading ? 'Loading...' : 'Refresh Policies'}\r\n                  </Button>\r\n                  <select \r\n                    value={selectedTable} \r\n                    onChange={(e) => setSelectedTable(e.target.value)}\r\n                    className=\"px-3 py-1 border rounded\"\r\n                  >\r\n                    <option value=\"all\">All Tables</option>\r\n                    {tables.map(table => (\r\n                      <option key={table} value={table}>{table}</option>\r\n                    ))}\r\n                  </select>\r\n                </div>\r\n                <Badge variant=\"outline\">\r\n                  {filteredPolicies.length} Policies\r\n                </Badge>\r\n              </div>\r\n\r\n              <div className=\"space-y-2\">\r\n                {filteredPolicies.map((policy) => (\r\n                  <Card key={policy.id}>\r\n                    <CardContent className=\"pt-4\">\r\n                      <div className=\"flex items-center justify-between\">\r\n                        <div className=\"space-y-1\">\r\n                          <div className=\"flex items-center gap-2\">\r\n                            <Lock className=\"h-4 w-4\" />\r\n                            <span className=\"font-medium\">{policy.name}</span>\r\n                            <Badge variant={policy.status === 'active' ? 'default' : 'secondary'}>\r\n                              {policy.status}\r\n                            </Badge>\r\n                          </div>\r\n                          <div className=\"text-sm text-muted-foreground\">\r\n                            Table: {policy.table} | Command: {policy.command} | Roles: {policy.roles.join(', ')}\r\n                          </div>\r\n                        </div>\r\n                        <Button size=\"sm\" variant=\"outline\">\r\n                          Edit Policy\r\n                        </Button>\r\n                      </div>\r\n                    </CardContent>\r\n                  </Card>\r\n                ))}\r\n              </div>\r\n            </TabsContent>\r\n\r\n            <TabsContent value=\"issues\" className=\"space-y-4\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <h3 className=\"text-lg font-medium\">Security Issues</h3>\r\n                <Badge variant={issues.length > 0 ? 'destructive' : 'default'}>\r\n                  {issues.length} Issues\r\n                </Badge>\r\n              </div>\r\n\r\n              <div className=\"space-y-4\">\r\n                {issues.map((issue, index) => (\r\n                  <Card key={index} className=\"border-l-4 border-l-red-500\">\r\n                    <CardContent className=\"pt-4\">\r\n                      <div className=\"flex items-start justify-between\">\r\n                        <div className=\"space-y-2\">\r\n                          <div className=\"flex items-center gap-2\">\r\n                            <AlertTriangle className=\"h-4 w-4 text-red-500\" />\r\n                            <span className=\"font-medium\">{issue.description}</span>\r\n                            <Badge variant={issue.severity === 'high' ? 'destructive' : 'secondary'}>\r\n                              {issue.severity}\r\n                            </Badge>\r\n                          </div>\r\n                          <p className=\"text-sm text-muted-foreground\">\r\n                            Table: {issue.table}\r\n                          </p>\r\n                          <p className=\"text-sm\">\r\n                            <strong>Recommendation:</strong> {issue.recommendation}\r\n                          </p>\r\n                        </div>\r\n                        <Button size=\"sm\" onClick={() => fixIssue(issue)}>\r\n                          Fix Issue\r\n                        </Button>\r\n                      </div>\r\n                    </CardContent>\r\n                  </Card>\r\n                ))}\r\n\r\n                {issues.length === 0 && (\r\n                  <div className=\"text-center py-8\">\r\n                    <CheckCircle className=\"h-12 w-12 text-green-500 mx-auto mb-2\" />\r\n                    <p className=\"text-muted-foreground\">No security issues found</p>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </TabsContent>\r\n\r\n            <TabsContent value=\"audit\" className=\"space-y-4\">\r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                <Card>\r\n                  <CardHeader>\r\n                    <CardTitle className=\"text-base\">Policy Coverage</CardTitle>\r\n                  </CardHeader>\r\n                  <CardContent>\r\n                    <div className=\"space-y-2\">\r\n                      <div className=\"flex justify-between\">\r\n                        <span>Tables with RLS</span>\r\n                        <span className=\"font-medium\">12/15</span>\r\n                      </div>\r\n                      <div className=\"flex justify-between\">\r\n                        <span>Optimized Policies</span>\r\n                        <span className=\"font-medium\">8/12</span>\r\n                      </div>\r\n                      <div className=\"flex justify-between\">\r\n                        <span>Performance Issues</span>\r\n                        <span className=\"font-medium text-red-500\">3</span>\r\n                      </div>\r\n                    </div>\r\n                  </CardContent>\r\n                </Card>\r\n\r\n                <Card>\r\n                  <CardHeader>\r\n                    <CardTitle className=\"text-base\">Quick Actions</CardTitle>\r\n                  </CardHeader>\r\n                  <CardContent className=\"space-y-2\">\r\n                    <Button className=\"w-full\" size=\"sm\">\r\n                      Run Full Security Audit\r\n                    </Button>\r\n                    <Button className=\"w-full\" size=\"sm\" variant=\"outline\">\r\n                      Export Policy Report\r\n                    </Button>\r\n                    <Button className=\"w-full\" size=\"sm\" variant=\"outline\">\r\n                      Backup Current Policies\r\n                    </Button>\r\n                  </CardContent>\r\n                </Card>\r\n              </div>\r\n            </TabsContent>\r\n          </Tabs>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}"
}