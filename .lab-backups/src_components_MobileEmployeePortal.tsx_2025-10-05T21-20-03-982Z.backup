{
  "originalPath": "src\\components\\MobileEmployeePortal.tsx",
  "timestamp": "2025-10-05T21:20:03.982Z",
  "hash": "5b87325afc3a5217cb09c1ccf0ca4df9ca2b0fdcb0eca9e58137ecd58433336c",
  "size": 13537,
  "content": "import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Calendar,\r\n  MapPin,\r\n  AlertTriangle,\r\n  Clock,\r\n  Phone,\r\n  FileText,\r\n} from 'lucide-react';\r\nimport { Button } from './ui/button';\r\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card';\r\nimport { Badge } from './ui/badge';\r\nimport { supabase } from '@/lib/supabase';\r\n\r\ninterface Assignment {\r\n  id: string;\r\n  date: string;\r\n  startTime: string;\r\n  endTime: string;\r\n  location: string;\r\n  address: string;\r\n  clientName: string;\r\n  serviceType: string;\r\n  priority: 'low' | 'medium' | 'high' | 'critical';\r\n  hazardWarnings: string[];\r\n  specialInstructions: string;\r\n  equipmentNeeded: string[];\r\n  contactNumber: string;\r\n  notes: string;\r\n  status: 'scheduled' | 'in_progress' | 'completed';\r\n}\r\n\r\nexport default function MobileEmployeePortal() {\r\n  const [assignments, setAssignments] = useState<Assignment[]>([]);\r\n  const [selectedDate, setSelectedDate] = useState(new Date());\r\n  const [selectedAssignment, setSelectedAssignment] =\r\n    useState<Assignment | null>(null);\r\n  const [currentEmployee] = useState({ id: '1', name: 'John Doe' }); // Would come from auth\r\n\r\n  useEffect(() => {\r\n    loadAssignments();\r\n\r\n    // Real-time subscription for schedule changes\r\n    const subscription = supabase\r\n      .channel('employee_assignments')\r\n      .on(\r\n        'postgres_changes',\r\n        {\r\n          event: '*',\r\n          schema: 'public',\r\n          table: 'employee_assignments',\r\n          filter: `employee_id=eq.${currentEmployee.id}`,\r\n        },\r\n        payload => {\r\n          console.log('Schedule updated!', payload);\r\n          loadAssignments();\r\n          // Show notification\r\n          if ('Notification' in window) {\r\n            new Notification('Schedule Updated', {\r\n              body: 'Your work schedule has been modified. Check your assignments.',\r\n              icon: '/icon-192x192.png',\r\n            });\r\n          }\r\n        }\r\n      )\r\n      .subscribe();\r\n\r\n    return () => {\r\n      subscription.unsubscribe();\r\n    };\r\n  }, [currentEmployee.id]);\r\n\r\n  const loadAssignments = async () => {\r\n    // Mock data - would come from Supabase\r\n    const mockAssignments: Assignment[] = [\r\n      {\r\n        id: '1',\r\n        date: new Date().toISOString().split('T')[0],\r\n        startTime: '08:00',\r\n        endTime: '16:00',\r\n        location: 'Federal Building Complex',\r\n        address: '123 Government Ave, Washington DC 20001',\r\n        clientName: 'GSA - General Services Administration',\r\n        serviceType: 'Deep Clean & Sanitization',\r\n        priority: 'high',\r\n        hazardWarnings: [\r\n          'Asbestos present in basement',\r\n          'Chemical storage area - Level 3',\r\n        ],\r\n        specialInstructions:\r\n          'Security clearance required. Badge in at main desk. No photos allowed.',\r\n        equipmentNeeded: [\r\n          'HEPA vacuum',\r\n          'Chemical suits',\r\n          'Respirators',\r\n          'Biohazard bags',\r\n        ],\r\n        contactNumber: '(202) 555-0123',\r\n        notes:\r\n          'Emergency cleaning after incident. Full PPE mandatory. Report to Site Supervisor immediately.',\r\n        status: 'scheduled',\r\n      },\r\n    ];\r\n    setAssignments(mockAssignments);\r\n  };\r\n\r\n  const getDaysInMonth = (date: Date) => {\r\n    const year = date.getFullYear();\r\n    const month = date.getMonth();\r\n    const daysInMonth = new Date(year, month + 1, 0).getDate();\r\n    const firstDay = new Date(year, month, 1).getDay();\r\n\r\n    const days = [];\r\n    for (let i = 0; i < firstDay; i++) days.push(null);\r\n    for (let day = 1; day <= daysInMonth; day++) {\r\n      days.push(new Date(year, month, day));\r\n    }\r\n    return days;\r\n  };\r\n\r\n  const getAssignmentsForDate = (date: Date) => {\r\n    const dateStr = date.toISOString().split('T')[0];\r\n    return assignments.filter(a => a.date === dateStr);\r\n  };\r\n\r\n  const getPriorityColor = (priority: string) => {\r\n    switch (priority) {\r\n      case 'critical':\r\n        return 'bg-red-500';\r\n      case 'high':\r\n        return 'bg-orange-500';\r\n      case 'medium':\r\n        return 'bg-yellow-500';\r\n      default:\r\n        return 'bg-green-500';\r\n    }\r\n  };\r\n\r\n  if (selectedAssignment) {\r\n    return (\r\n      <div className='min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-indigo-900 p-4'>\r\n        <Card className='bg-black/20 backdrop-blur-sm border-white/10'>\r\n          <CardHeader>\r\n            <div className='flex items-center justify-between'>\r\n              <CardTitle className='text-white flex items-center gap-2'>\r\n                <FileText className='h-5 w-5' />\r\n                Assignment Details\r\n              </CardTitle>\r\n              <Button\r\n                variant='outline'\r\n                onClick={() => setSelectedAssignment(null)}\r\n                className='text-white border-white/20'\r\n              >\r\n                Back to Calendar\r\n              </Button>\r\n            </div>\r\n          </CardHeader>\r\n          <CardContent className='space-y-6'>\r\n            {/* Priority Banner */}\r\n            <div\r\n              className={`p-4 rounded-lg ${getPriorityColor(selectedAssignment.priority)}`}\r\n            >\r\n              <div className='flex items-center gap-2 text-white font-bold'>\r\n                <AlertTriangle className='h-5 w-5' />\r\n                {selectedAssignment.priority.toUpperCase()} PRIORITY\r\n              </div>\r\n            </div>\r\n\r\n            {/* Basic Info */}\r\n            <div className='grid grid-cols-1 md:grid-cols-2 gap-4'>\r\n              <div className='space-y-2'>\r\n                <label className='text-gray-300 text-sm'>Date & Time</label>\r\n                <div className='text-white font-medium'>\r\n                  {new Date(selectedAssignment.date).toLocaleDateString()}\r\n                </div>\r\n                <div className='text-white'>\r\n                  {selectedAssignment.startTime} - {selectedAssignment.endTime}\r\n                </div>\r\n              </div>\r\n              <div className='space-y-2'>\r\n                <label className='text-gray-300 text-sm'>Client</label>\r\n                <div className='text-white font-medium'>\r\n                  {selectedAssignment.clientName}\r\n                </div>\r\n                <div className='text-gray-300'>\r\n                  {selectedAssignment.serviceType}\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Location */}\r\n            <div className='space-y-2'>\r\n              <label className='text-gray-300 text-sm flex items-center gap-2'>\r\n                <MapPin className='h-4 w-4' />\r\n                Location & Address\r\n              </label>\r\n              <div className='text-white font-medium'>\r\n                {selectedAssignment.location}\r\n              </div>\r\n              <div className='text-gray-300'>{selectedAssignment.address}</div>\r\n              <Button className='bg-blue-600 hover:bg-blue-700 mt-2'>\r\n                Open in Maps\r\n              </Button>\r\n            </div>\r\n\r\n            {/* Hazard Warnings */}\r\n            {selectedAssignment.hazardWarnings.length > 0 && (\r\n              <div className='space-y-2'>\r\n                <label className='text-red-400 text-sm flex items-center gap-2'>\r\n                  <AlertTriangle className='h-4 w-4' />\r\n                  HAZARD WARNINGS\r\n                </label>\r\n                <div className='space-y-2'>\r\n                  {selectedAssignment.hazardWarnings.map((warning, index) => (\r\n                    <div\r\n                      key={index}\r\n                      className='bg-red-500/20 border border-red-400 p-3 rounded-lg'\r\n                    >\r\n                      <div className='text-red-200 font-medium'>{warning}</div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            {/* Equipment Needed */}\r\n            <div className='space-y-2'>\r\n              <label className='text-gray-300 text-sm'>\r\n                Equipment Required\r\n              </label>\r\n              <div className='flex flex-wrap gap-2'>\r\n                {selectedAssignment.equipmentNeeded.map((item, index) => (\r\n                  <Badge\r\n                    key={index}\r\n                    variant='secondary'\r\n                    className='bg-blue-500/20 text-blue-200'\r\n                  >\r\n                    {item}\r\n                  </Badge>\r\n                ))}\r\n              </div>\r\n            </div>\r\n\r\n            {/* Special Instructions */}\r\n            <div className='space-y-2'>\r\n              <label className='text-gray-300 text-sm'>\r\n                Special Instructions\r\n              </label>\r\n              <div className='bg-yellow-500/20 border border-yellow-400 p-3 rounded-lg'>\r\n                <div className='text-yellow-200'>\r\n                  {selectedAssignment.specialInstructions}\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Contact */}\r\n            <div className='space-y-2'>\r\n              <label className='text-gray-300 text-sm flex items-center gap-2'>\r\n                <Phone className='h-4 w-4' />\r\n                Emergency Contact\r\n              </label>\r\n              <div className='flex items-center gap-2'>\r\n                <div className='text-white font-medium'>\r\n                  {selectedAssignment.contactNumber}\r\n                </div>\r\n                <Button size='sm' className='bg-green-600 hover:bg-green-700'>\r\n                  Call Now\r\n                </Button>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Notes */}\r\n            <div className='space-y-2'>\r\n              <label className='text-gray-300 text-sm'>Additional Notes</label>\r\n              <div className='bg-white/5 p-3 rounded-lg'>\r\n                <div className='text-white'>{selectedAssignment.notes}</div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Action Buttons */}\r\n            <div className='flex gap-2 pt-4'>\r\n              <Button className='flex-1 bg-green-600 hover:bg-green-700'>\r\n                Start Assignment\r\n              </Button>\r\n              <Button variant='outline' className='border-white/20 text-white'>\r\n                Report Issue\r\n              </Button>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className='min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-indigo-900 p-4'>\r\n      <Card className='bg-black/20 backdrop-blur-sm border-white/10'>\r\n        <CardHeader>\r\n          <CardTitle className='text-white flex items-center gap-2'>\r\n            <Calendar className='h-5 w-5' />\r\n            My Work Schedule - {currentEmployee.name}\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          {/* Calendar Grid */}\r\n          <div className='grid grid-cols-7 gap-1 bg-gradient-to-br from-slate-900 via-blue-900 to-indigo-900 rounded-lg'>\r\n            {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(day => (\r\n              <div\r\n                key={day}\r\n                className='text-center text-white font-medium p-2 text-sm'\r\n              >\r\n                {day}\r\n              </div>\r\n            ))}\r\n\r\n            {getDaysInMonth(selectedDate).map((day, index) => {\r\n              const dayAssignments = day ? getAssignmentsForDate(day) : [];\r\n              return (\r\n                <div\r\n                  key={index}\r\n                  className={`min-h-[80px] border border-white/10 rounded-lg p-1 ${\r\n                    day ? 'bg-white/5' : ''\r\n                  }`}\r\n                >\r\n                  {day && (\r\n                    <>\r\n                      <div className='text-white text-sm font-medium mb-1'>\r\n                        {day.getDate()}\r\n                      </div>\r\n                      <div className='space-y-1'>\r\n                        {dayAssignments.map(assignment => (\r\n                          <div\r\n                            key={assignment.id}\r\n                            onClick={() => setSelectedAssignment(assignment)}\r\n                            className={`text-xs p-1 rounded cursor-pointer border-l-2 ${\r\n                              assignment.priority === 'critical'\r\n                                ? 'bg-red-500/20 border-red-400'\r\n                                : assignment.priority === 'high'\r\n                                  ? 'bg-orange-500/20 border-orange-400'\r\n                                  : assignment.priority === 'medium'\r\n                                    ? 'bg-yellow-500/20 border-yellow-400'\r\n                                    : 'bg-green-500/20 border-green-400'\r\n                            }`}\r\n                          >\r\n                            <div className='text-white font-medium truncate'>\r\n                              {assignment.startTime}\r\n                            </div>\r\n                            <div className='text-gray-300 truncate'>\r\n                              {assignment.location}\r\n                            </div>\r\n                            {assignment.hazardWarnings.length > 0 && (\r\n                              <AlertTriangle className='h-3 w-3 text-red-400 mt-1' />\r\n                            )}\r\n                          </div>\r\n                        ))}\r\n                      </div>\r\n                    </>\r\n                  )}\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n"
}