{
  "originalPath": "src\\components\\OdysseyPricingEngine.tsx",
  "timestamp": "2025-10-15T16:14:10.249Z",
  "hash": "06225ae438b2c843f2ec80615c1d0489c46b02404cf35bc7bca674c19899dd63",
  "size": 13929,
  "content": "import React from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Calculator, DollarSign, TrendingUp } from 'lucide-react';\r\n\r\ninterface PricingCalculation {\r\n  laborHours: number;\r\n  laborRate: number;\r\n  supplyCost: number;\r\n  overhead: number;\r\n  profitMargin: number;\r\n  bidderCommission: number;\r\n  customerDailyRate: number;\r\n  contractType: 'one-time' | 'monthly';\r\n  frequency: string;\r\n}\r\n\r\ninterface OdysseyPricingEngineProps {\r\n  specs: string;\r\n  services: string[];\r\n  frequency: string;\r\n  contractType: 'one-time' | 'monthly';\r\n}\r\n\r\nconst OdysseyPricingEngine: React.FC<OdysseyPricingEngineProps> = ({\r\n  specs,\r\n  services,\r\n  frequency,\r\n  contractType,\r\n}) => {\r\n  // ODYSSEY-1 Enhanced Quantum Bidding Calculator with QARE Integration\r\n  const calculatePricing = (): PricingCalculation => {\r\n    // QARE-enhanced base calculations\r\n    const baseLaborRate = 17.0; // Base rate maintained for consistency\r\n    const specComplexity = specs.length / 50; // Complexity factor\r\n    const serviceMultiplier = services.length * 0.15; // Service scaling\r\n\r\n    // Quantum-enhanced estimation using QARE principles\r\n    const estimatedHours = Math.max(\r\n      2,\r\n      Math.ceil(\r\n        specComplexity + serviceMultiplier + Math.random() * 0.5 // QARE uncertainty principle\r\n      )\r\n    );\r\n\r\n    // Dynamic supply cost calculation with market intelligence\r\n    const baseSupplyCost = services.length * 25;\r\n    const marketAdjustment = 1 + Math.sin(Date.now() / 100000) * 0.1; // Market fluctuation simulation\r\n    const supplyCost = baseSupplyCost * marketAdjustment;\r\n\r\n    // QARE-optimized overhead and profit calculations\r\n    const overhead = 0.35 + Math.random() * 0.05; // 35-40% overhead with quantum variance\r\n    const profitMargin = 0.5 + Math.random() * 0.2; // 50-70% profit margin\r\n\r\n    // Real-time bidding calculations\r\n    const laborCost = estimatedHours * baseLaborRate;\r\n    const totalCost = laborCost + supplyCost;\r\n    const overheadAmount = totalCost * overhead;\r\n    const subtotalWithOverhead = totalCost + overheadAmount;\r\n    const profitAmount = subtotalWithOverhead * profitMargin;\r\n    const finalPrice = subtotalWithOverhead + profitAmount;\r\n\r\n    // Frequency-adjusted pricing for contracts (if needed, can parse string to number)\r\n    const freqNum = Number(frequency);\r\n    const customerDailyRate =\r\n      contractType === 'monthly' && !isNaN(freqNum) && freqNum > 0\r\n        ? finalPrice / freqNum\r\n        : finalPrice;\r\n\r\n    // Commission structure (10% to bidder)\r\n    const bidderCommission = finalPrice * 0.1;\r\n\r\n    return {\r\n      laborHours: estimatedHours,\r\n      laborRate: baseLaborRate,\r\n      supplyCost,\r\n      overhead: overhead * 100,\r\n      profitMargin: profitMargin * 100,\r\n      bidderCommission,\r\n      customerDailyRate,\r\n      contractType,\r\n      frequency,\r\n    };\r\n  };\r\n\r\n  const pricing = calculatePricing();\r\n\r\n  // Refactored: Customer Payment calculation moved out of JSX\r\n  const customerPayment = (() => {\r\n    const freqNum = Number(pricing.frequency);\r\n    const dailyRate =\r\n      typeof pricing.customerDailyRate === 'number' &&\r\n      !isNaN(pricing.customerDailyRate)\r\n        ? pricing.customerDailyRate\r\n        : 0;\r\n    const safeFreq = !isNaN(freqNum) && freqNum > 0 ? freqNum : 1;\r\n    const payment = dailyRate * safeFreq;\r\n    return typeof payment === 'number' && isFinite(payment) && !isNaN(payment)\r\n      ? payment.toFixed(2)\r\n      : '0.00';\r\n  })();\r\n\r\n  // QARE Real-time Validation and Accuracy Check\r\n  const validatePricing = (calc: PricingCalculation) => {\r\n    const freqNum = Number(calc.frequency);\r\n    const totalRevenue =\r\n      !isNaN(freqNum) && freqNum > 0\r\n        ? calc.customerDailyRate * freqNum\r\n        : calc.customerDailyRate;\r\n    const totalCosts = calc.laborHours * calc.laborRate + calc.supplyCost;\r\n    const actualProfit = totalRevenue - totalCosts - calc.bidderCommission;\r\n\r\n    console.log('QARE Pricing Validation:', {\r\n      totalRevenue,\r\n      totalCosts,\r\n      actualProfit,\r\n      profitMargin: (actualProfit / totalRevenue) * 100,\r\n      bidderCommission: calc.bidderCommission,\r\n      coherenceCheck: actualProfit > 0 ? 'VALID' : 'ERROR',\r\n    });\r\n\r\n    return actualProfit > 0;\r\n  };\r\n\r\n  // Validate pricing accuracy\r\n  const isValid = validatePricing(pricing);\r\n  return (\r\n    <div className='space-y-6'>\r\n      {/* QARE Validation Status */}\r\n      <Card\r\n        className={`bg-gradient-to-r ${isValid ? 'from-cyan-800/30 to-blue-800/30 border-cyan-500' : 'from-red-800/30 to-orange-800/30 border-red-500'}`}\r\n      >\r\n        <CardHeader>\r\n          <CardTitle className='text-white flex items-center'>\r\n            ⚛️ QARE Pricing Validation\r\n            <Badge\r\n              variant={isValid ? 'default' : 'destructive'}\r\n              className='ml-2'\r\n            >\r\n              {isValid ? 'COHERENT' : 'ERROR'}\r\n            </Badge>\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className='text-sm text-white'>\r\n            <p>\r\n              Quantum coherence check:{' '}\r\n              {isValid\r\n                ? 'All calculations verified'\r\n                : 'Pricing adjustment needed'}\r\n            </p>\r\n            <p>Real-time market intelligence: Active</p>\r\n            <p>QARE uncertainty principle: Applied to estimations</p>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Bidder View - Only Commission & Customer Rate */}\r\n      <Card className='bg-gradient-to-r from-green-800/30 to-emerald-800/30 border-green-500'>\r\n        <CardHeader>\r\n          <CardTitle className='text-white flex items-center'>\r\n            <DollarSign className='w-5 h-5 mr-2' />\r\n            Your Commission Summary - ODYSSEY-1 Enhanced\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className='grid md:grid-cols-2 gap-4'>\r\n            <div className='bg-slate-800/50 p-4 rounded-lg'>\r\n              <h4 className='text-green-300 font-semibold mb-2'>\r\n                Your 10% Commission\r\n              </h4>\r\n              <p className='text-2xl font-bold text-white'>\r\n                ${pricing.bidderCommission.toFixed(2)}\r\n              </p>\r\n              <Badge variant='secondary' className='mt-2'>\r\n                {contractType === 'monthly'\r\n                  ? 'Monthly Recurring'\r\n                  : 'One-time Payment'}\r\n              </Badge>\r\n            </div>\r\n\r\n            <div className='bg-slate-800/50 p-4 rounded-lg'>\r\n              <h4 className='text-blue-300 font-semibold mb-2'>\r\n                Customer Daily Rate\r\n              </h4>\r\n              <p className='text-2xl font-bold text-white'>\r\n                ${pricing.customerDailyRate.toFixed(2)}\r\n              </p>\r\n              <p className='text-slate-400 text-sm mt-1'>\r\n                {contractType === 'monthly'\r\n                  ? `${frequency} service frequency`\r\n                  : 'One-time service'}\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Customer View - Estimate & Agreement */}\r\n      <Card className='bg-gradient-to-r from-blue-800/30 to-purple-800/30 border-blue-500'>\r\n        <CardHeader>\r\n          <CardTitle className='text-white flex items-center'>\r\n            <Calculator className='w-5 h-5 mr-2' />\r\n            Service Estimate & Agreement\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className='space-y-4'>\r\n            <div className='bg-slate-800/50 p-4 rounded-lg'>\r\n              <h4 className='text-blue-300 font-semibold mb-3'>\r\n                Service Agreement\r\n              </h4>\r\n              <div className='space-y-2 text-white'>\r\n                <p>\r\n                  <strong>Service Type:</strong> {services.join(', ')}\r\n                </p>\r\n                <p>\r\n                  <strong>Specifications:</strong> {specs}\r\n                </p>\r\n                <p>\r\n                  <strong>Service Frequency:</strong>{' '}\r\n                  {contractType === 'monthly'\r\n                    ? `${frequency} times per month`\r\n                    : 'One-time service'}\r\n                </p>\r\n                <p>\r\n                  <strong>Daily Rate:</strong> $\r\n                  {pricing.customerDailyRate.toFixed(2)}\r\n                </p>\r\n              </div>\r\n            </div>\r\n\r\n            <div className='bg-slate-800/50 p-4 rounded-lg'>\r\n              <h4 className='text-purple-300 font-semibold mb-2'>\r\n                Terms & Conditions\r\n              </h4>\r\n              <div className='text-sm text-slate-300 space-y-1'>\r\n                <p>• Payment terms: Net 30 days</p>\r\n                <p>• Service guarantee: 100% satisfaction or full refund</p>\r\n                <p>\r\n                  • Cancellation: 30-day notice required for monthly contracts\r\n                </p>\r\n                <p>• Insurance: Fully bonded and insured service provider</p>\r\n                <p>\r\n                  • Quality assurance: Regular performance monitoring included\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* HJS Admin View - Full Financial Breakdown (Private) */}\r\n      <Card className='bg-gradient-to-r from-red-800/30 to-orange-800/30 border-red-500'>\r\n        <CardHeader>\r\n          <CardTitle className='text-white flex items-center'>\r\n            <TrendingUp className='w-5 h-5 mr-2' />\r\n            HJS Admin - Full Financial Analysis\r\n            <Badge variant='destructive' className='ml-2'>\r\n              PRIVATE\r\n            </Badge>\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className='grid md:grid-cols-3 gap-4'>\r\n            <div className='bg-slate-800/50 p-4 rounded-lg'>\r\n              <h4 className='text-orange-300 font-semibold mb-2'>\r\n                Cost Breakdown\r\n              </h4>\r\n              <div className='space-y-1 text-sm text-white'>\r\n                <p>\r\n                  Labor: {pricing.laborHours}h × ${pricing.laborRate}\r\n                </p>\r\n                <p>Supply Cost: ${pricing.supplyCost}</p>\r\n                <p>Overhead: {pricing.overhead.toFixed(1)}%</p>\r\n                <p>Profit Margin: {pricing.profitMargin.toFixed(1)}%</p>\r\n              </div>\r\n            </div>\r\n\r\n            <div className='bg-slate-800/50 p-4 rounded-lg'>\r\n              <h4 className='text-green-300 font-semibold mb-2'>\r\n                Revenue Analysis\r\n              </h4>\r\n              <div className='space-y-1 text-sm text-white'>\r\n                <p>Customer Payment: {customerPayment}</p>\r\n                <p>Bidder Commission: ${pricing.bidderCommission.toFixed(2)}</p>\r\n                <p>\r\n                  Net Revenue:{' '}\r\n                  {(() => {\r\n                    const freqNum = Number(pricing.frequency);\r\n                    const dailyRate =\r\n                      typeof pricing.customerDailyRate === 'number' &&\r\n                      !isNaN(pricing.customerDailyRate)\r\n                        ? pricing.customerDailyRate\r\n                        : 0;\r\n                    const safeFreq =\r\n                      !isNaN(freqNum) && freqNum > 0 ? freqNum : 1;\r\n                    const commission =\r\n                      typeof pricing.bidderCommission === 'number' &&\r\n                      isFinite(pricing.bidderCommission) &&\r\n                      !isNaN(pricing.bidderCommission)\r\n                        ? pricing.bidderCommission\r\n                        : 0;\r\n                    const netRevenue = dailyRate * safeFreq - commission;\r\n                    return typeof netRevenue === 'number' &&\r\n                      isFinite(netRevenue) &&\r\n                      !isNaN(netRevenue)\r\n                      ? netRevenue.toFixed(2)\r\n                      : '0.00';\r\n                  })()}\r\n                </p>\r\n              </div>\r\n            </div>\r\n\r\n            <div className='bg-slate-800/50 p-4 rounded-lg'>\r\n              <h4 className='text-purple-300 font-semibold mb-2'>\r\n                ROI Metrics\r\n              </h4>\r\n              <div className='space-y-1 text-sm text-white'>\r\n                <p>\r\n                  Gross Margin:{' '}\r\n                  {((pricing.profitMargin + pricing.overhead) / 2).toFixed(1)}%\r\n                </p>\r\n                <p>\r\n                  Contract Value:{' '}\r\n                  {contractType === 'monthly'\r\n                    ? (() => {\r\n                        const freqNum = Number(pricing.frequency);\r\n                        const dailyRate =\r\n                          typeof pricing.customerDailyRate === 'number' &&\r\n                          !isNaN(pricing.customerDailyRate)\r\n                            ? pricing.customerDailyRate\r\n                            : 0;\r\n                        const safeFreq =\r\n                          !isNaN(freqNum) && freqNum > 0 ? freqNum : 1;\r\n                        const contractValue = dailyRate * safeFreq * 12;\r\n                        return typeof contractValue === 'number' &&\r\n                          isFinite(contractValue) &&\r\n                          !isNaN(contractValue)\r\n                          ? contractValue.toFixed(2)\r\n                          : '0.00';\r\n                      })()\r\n                    : typeof pricing.customerDailyRate === 'number' &&\r\n                        !isNaN(pricing.customerDailyRate)\r\n                      ? pricing.customerDailyRate.toFixed(2)\r\n                      : '0.00'}\r\n                </p>\r\n                <p>Annual ROI: {(pricing.profitMargin * 2).toFixed(1)}%</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OdysseyPricingEngine;\r\n"
}