{
  "originalPath": "src\\components\\BudgetLimitManager.tsx",
  "timestamp": "2025-10-15T16:14:06.252Z",
  "hash": "4da4ae7c0f87b2c48d708140258085dd56c610b12d6c1abf75e0958afffe3cbc",
  "size": 9353,
  "content": "import React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Alert, AlertDescription } from '@/components/ui/alert';\r\nimport { Progress } from '@/components/ui/progress';\r\nimport { supabase } from '@/lib/supabase';\r\nimport { AlertTriangle, DollarSign, Calendar } from 'lucide-react';\r\n\r\ninterface BudgetLimit {\r\n  id: string;\r\n  category: string;\r\n  monthly_limit: number;\r\n  current_spending: number;\r\n  alert_threshold: number;\r\n}\r\n\r\nexport default function BudgetLimitManager() {\r\n  const [budgetLimits, setBudgetLimits] = useState<BudgetLimit[]>([]);\r\n  const [monthlyBudget, setMonthlyBudget] = useState<number>(1000);\r\n  const [totalSpending, setTotalSpending] = useState<number>(0);\r\n  const [newCategory, setNewCategory] = useState('');\r\n  const [newLimit, setNewLimit] = useState('');\r\n\r\n  useEffect(() => {\r\n    fetchBudgetData();\r\n  }, []);\r\n\r\n  const fetchBudgetData = async () => {\r\n    try {\r\n      // Get current month spending\r\n      const startOfMonth = new Date();\r\n      startOfMonth.setDate(1);\r\n      startOfMonth.setHours(0, 0, 0, 0);\r\n\r\n      const { data: transactions } = await supabase\r\n        .from('spending_transactions')\r\n        .select('amount, category')\r\n        .gte('created_at', startOfMonth.toISOString());\r\n\r\n      // Calculate spending by category\r\n      const spendingByCategory =\r\n        transactions?.reduce(\r\n          (acc, t) => {\r\n            acc[t.category] = (acc[t.category] || 0) + t.amount;\r\n            return acc;\r\n          },\r\n          {} as Record<string, number>\r\n        ) || {};\r\n\r\n      const total = Object.values(spendingByCategory).reduce(\r\n        (sum, amount) => sum + amount,\r\n        0\r\n      );\r\n      setTotalSpending(total);\r\n\r\n      // Get budget categories\r\n      const { data: categories } = await supabase\r\n        .from('spending_categories')\r\n        .select('*');\r\n\r\n      const limits =\r\n        categories?.map(cat => ({\r\n          id: cat.id,\r\n          category: cat.name,\r\n          monthly_limit: cat.budget_limit || 200,\r\n          current_spending: spendingByCategory[cat.name] || 0,\r\n          alert_threshold: 80,\r\n        })) || [];\r\n\r\n      setBudgetLimits(limits);\r\n    } catch (error) {\r\n      console.error('Error fetching budget data:', error);\r\n    }\r\n  };\r\n\r\n  const addBudgetLimit = async () => {\r\n    if (!newCategory || !newLimit) return;\r\n\r\n    try {\r\n      await supabase.from('spending_categories').insert([\r\n        {\r\n          name: newCategory,\r\n          budget_limit: parseFloat(newLimit),\r\n          color: '#3B82F6',\r\n        },\r\n      ]);\r\n\r\n      setNewCategory('');\r\n      setNewLimit('');\r\n      fetchBudgetData();\r\n    } catch (error) {\r\n      console.error('Error adding budget limit:', error);\r\n    }\r\n  };\r\n\r\n  const safeTotalSpending =\r\n    typeof totalSpending === 'number' && isFinite(totalSpending)\r\n      ? totalSpending\r\n      : 0;\r\n  const safeMonthlyBudget =\r\n    typeof monthlyBudget === 'number' &&\r\n    isFinite(monthlyBudget) &&\r\n    monthlyBudget > 0\r\n      ? monthlyBudget\r\n      : 1;\r\n  const budgetUsedPercentage = (safeTotalSpending / safeMonthlyBudget) * 100;\r\n  const isOverBudget = budgetUsedPercentage > 100;\r\n  const isNearLimit = budgetUsedPercentage > 80;\r\n\r\n  return (\r\n    <div className='space-y-6'>\r\n      {/* Monthly Budget Overview */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className='flex items-center gap-2'>\r\n            <DollarSign className='h-5 w-5' />\r\n            Monthly Budget Limit: $1,000.00\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className='space-y-4'>\r\n            <div className='flex justify-between text-sm'>\r\n              <span>\r\n                Spent:{' '}\r\n                {isFinite(safeTotalSpending)\r\n                  ? safeTotalSpending.toFixed(2)\r\n                  : '0.00'}\r\n              </span>\r\n              <span>\r\n                Remaining:{' '}\r\n                {isFinite(safeMonthlyBudget - safeTotalSpending)\r\n                  ? (safeMonthlyBudget - safeTotalSpending).toFixed(2)\r\n                  : '0.00'}\r\n              </span>\r\n            </div>\r\n            <Progress\r\n              value={Math.min(budgetUsedPercentage, 100)}\r\n              className={`h-3 ${isOverBudget ? 'bg-red-100' : isNearLimit ? 'bg-yellow-100' : 'bg-green-100'}`}\r\n            />\r\n            {isOverBudget && (\r\n              <Alert className='border-red-200 bg-red-50'>\r\n                <AlertTriangle className='h-4 w-4 text-red-600' />\r\n                <AlertDescription className='text-red-800'>\r\n                  Budget exceeded by{' '}\r\n                  {isFinite(safeTotalSpending - safeMonthlyBudget)\r\n                    ? (safeTotalSpending - safeMonthlyBudget).toFixed(2)\r\n                    : '0.00'}\r\n                </AlertDescription>\r\n              </Alert>\r\n            )}\r\n            {isNearLimit && !isOverBudget && (\r\n              <Alert className='border-yellow-200 bg-yellow-50'>\r\n                <AlertTriangle className='h-4 w-4 text-yellow-600' />\r\n                <AlertDescription className='text-yellow-800'>\r\n                  Approaching budget limit (\r\n                  {isFinite(budgetUsedPercentage)\r\n                    ? budgetUsedPercentage.toFixed(1)\r\n                    : '0.0'}\r\n                  % used)\r\n                </AlertDescription>\r\n              </Alert>\r\n            )}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Weekly Review Reminder */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className='flex items-center gap-2'>\r\n            <Calendar className='h-5 w-5' />\r\n            Weekly Budget Review\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <p className='text-sm text-gray-600 mb-4'>\r\n            Next review scheduled for every Monday at 9:00 AM to assess spending\r\n            and adjust limits.\r\n          </p>\r\n          <Button variant='outline' size='sm'>\r\n            Schedule Review Meeting\r\n          </Button>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Add New Budget Category */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Add Budget Category</CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className='grid grid-cols-2 gap-4'>\r\n            <div>\r\n              <Label htmlFor='category'>Category Name</Label>\r\n              <Input\r\n                id='category'\r\n                value={newCategory}\r\n                onChange={e => setNewCategory(e.target.value)}\r\n                placeholder='e.g., AI Development, Marketing'\r\n              />\r\n            </div>\r\n            <div>\r\n              <Label htmlFor='limit'>Monthly Limit ($)</Label>\r\n              <Input\r\n                id='limit'\r\n                type='number'\r\n                value={newLimit}\r\n                onChange={e => setNewLimit(e.target.value)}\r\n                placeholder='200'\r\n              />\r\n            </div>\r\n          </div>\r\n          <Button onClick={addBudgetLimit} className='mt-4'>\r\n            Add Budget Limit\r\n          </Button>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Category Budget Status */}\r\n      <div className='grid gap-4'>\r\n        {budgetLimits.map(limit => {\r\n          const currentSpending =\r\n            typeof limit.current_spending === 'number' &&\r\n            isFinite(limit.current_spending)\r\n              ? limit.current_spending\r\n              : 0;\r\n          const monthlyLimit =\r\n            typeof limit.monthly_limit === 'number' &&\r\n            isFinite(limit.monthly_limit) &&\r\n            limit.monthly_limit > 0\r\n              ? limit.monthly_limit\r\n              : 1;\r\n          const percentage = (currentSpending / monthlyLimit) * 100;\r\n          const isOverLimit = percentage > 100;\r\n          const isNearThreshold = percentage > limit.alert_threshold;\r\n\r\n          return (\r\n            <Card key={limit.id}>\r\n              <CardContent className='pt-4'>\r\n                <div className='flex justify-between items-center mb-2'>\r\n                  <h4 className='font-medium'>{limit.category}</h4>\r\n                  <span className='text-sm text-gray-600'>\r\n                    {isFinite(currentSpending)\r\n                      ? currentSpending.toFixed(2)\r\n                      : '0.00'}{' '}\r\n                    /{' '}\r\n                    {isFinite(monthlyLimit) ? monthlyLimit.toFixed(2) : '0.00'}\r\n                  </span>\r\n                </div>\r\n                <Progress\r\n                  value={Math.min(percentage, 100)}\r\n                  className={`h-2 ${isOverLimit ? 'bg-red-100' : isNearThreshold ? 'bg-yellow-100' : 'bg-green-100'}`}\r\n                />\r\n                {isOverLimit && (\r\n                  <p className='text-xs text-red-600 mt-1'>\r\n                    Over budget by{' '}\r\n                    {isFinite(currentSpending - monthlyLimit)\r\n                      ? (currentSpending - monthlyLimit).toFixed(2)\r\n                      : '0.00'}\r\n                  </p>\r\n                )}\r\n              </CardContent>\r\n            </Card>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"
}