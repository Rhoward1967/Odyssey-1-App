{
  "originalPath": "src\\components\\RateLimitManager.tsx",
  "timestamp": "2025-09-24T20:17:22.084Z",
  "hash": "4cc8f230d46ef5d826ea15490b6901733801de82a02617d440ec0a8490f8ac21",
  "size": 10615,
  "content": "import React, { useState, useEffect } from 'react';\r\nimport { useAuth } from './AuthProvider';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Progress } from '@/components/ui/progress';\r\nimport { Alert, AlertDescription } from '@/components/ui/alert';\r\nimport { supabase } from '@/lib/supabase';\r\nimport { \r\n  Shield, \r\n  Clock, \r\n  AlertTriangle, \r\n  CheckCircle, \r\n  BarChart3,\r\n  Settings,\r\n  Zap,\r\n  Users\r\n} from 'lucide-react';\r\n\r\ninterface RateLimitStatus {\r\n  tier: 'default' | 'premium' | 'admin';\r\n  limit: number;\r\n  remaining: number;\r\n  resetTime: number;\r\n  isLimited: boolean;\r\n}\r\n\r\ninterface RateLimitConfig {\r\n  endpoint: string;\r\n  limit: number;\r\n  window: string;\r\n  enabled: boolean;\r\n}\r\n\r\nexport const RateLimitManager: React.FC = () => {\r\n  const { user } = useAuth();\r\n  const [status, setStatus] = useState<RateLimitStatus | null>(null);\r\n  const [configs, setConfigs] = useState<RateLimitConfig[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [testEndpoint, setTestEndpoint] = useState('');\r\n\r\n  useEffect(() => {\r\n    loadRateLimitStatus();\r\n    loadConfigurations();\r\n  }, [user]);\r\n\r\n  const loadRateLimitStatus = async () => {\r\n    try {\r\n      const { data, error } = await supabase.functions.invoke('api-rate-limiter', {\r\n        body: {\r\n          endpoint: 'status-check',\r\n          userRole: user?.role,\r\n          userId: user?.id\r\n        }\r\n      });\r\n\r\n      if (error) throw error;\r\n\r\n      setStatus({\r\n        tier: data.tier,\r\n        limit: data.limit,\r\n        remaining: data.remaining,\r\n        resetTime: data.resetTime,\r\n        isLimited: !data.success\r\n      });\r\n    } catch (error) {\r\n      console.error('Error loading rate limit status:', error);\r\n    }\r\n  };\r\n\r\n  const loadConfigurations = async () => {\r\n    setLoading(true);\r\n    try {\r\n      // Fetch live rate limit configs from Supabase table 'api_rate_limits'\r\n      const { data, error } = await supabase\r\n        .from('api_rate_limits')\r\n        .select('*');\r\n      if (error) throw error;\r\n      setConfigs(data || []);\r\n    } catch (error) {\r\n      console.error('Error loading rate limit configs:', error);\r\n      setConfigs([]);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const testRateLimit = async () => {\r\n    if (!testEndpoint) return;\r\n    \r\n    try {\r\n      const { data, error } = await supabase.functions.invoke('api-rate-limiter', {\r\n        body: {\r\n          endpoint: testEndpoint,\r\n          userRole: user?.role,\r\n          userId: user?.id\r\n        }\r\n      });\r\n\r\n      if (error) throw error;\r\n      \r\n      setStatus({\r\n        tier: data.tier,\r\n        limit: data.limit,\r\n        remaining: data.remaining,\r\n        resetTime: data.resetTime,\r\n        isLimited: !data.success\r\n      });\r\n    } catch (error) {\r\n      console.error('Error testing rate limit:', error);\r\n    }\r\n  };\r\n\r\n  const getTierColor = (tier: string) => {\r\n    switch (tier) {\r\n      case 'admin': return 'bg-purple-100 text-purple-800';\r\n      case 'premium': return 'bg-gold-100 text-gold-800';\r\n      default: return 'bg-blue-100 text-blue-800';\r\n    }\r\n  };\r\n\r\n  const getTierIcon = (tier: string) => {\r\n    switch (tier) {\r\n      case 'admin': return <Shield className=\"h-4 w-4\" />;\r\n      case 'premium': return <Zap className=\"h-4 w-4\" />;\r\n      default: return <Users className=\"h-4 w-4\" />;\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"flex items-center justify-center p-8\">\r\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <div className=\"flex items-center justify-between\">\r\n        <h2 className=\"text-2xl font-bold flex items-center gap-2\">\r\n          <Shield className=\"h-6 w-6 text-blue-600\" />\r\n          API Rate Limiting\r\n        </h2>\r\n        <Button onClick={loadRateLimitStatus} variant=\"outline\" size=\"sm\">\r\n          Refresh Status\r\n        </Button>\r\n      </div>\r\n\r\n      {/* Current Status */}\r\n      {status && (\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <BarChart3 className=\"h-5 w-5\" />\r\n              Current Rate Limit Status\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent className=\"space-y-4\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div className=\"flex items-center gap-3\">\r\n                <Badge className={getTierColor(status.tier)}>\r\n                  {getTierIcon(status.tier)}\r\n                  {status.tier.toUpperCase()} Tier\r\n                </Badge>\r\n                <span className=\"text-sm text-gray-600\">\r\n                  {status.remaining} / {status.limit} requests remaining\r\n                </span>\r\n              </div>\r\n              <div className=\"flex items-center gap-2\">\r\n                {status.isLimited ? (\r\n                  <AlertTriangle className=\"h-5 w-5 text-red-500\" />\r\n                ) : (\r\n                  <CheckCircle className=\"h-5 w-5 text-green-500\" />\r\n                )}\r\n                <span className={status.isLimited ? 'text-red-600' : 'text-green-600'}>\r\n                  {status.isLimited ? 'Rate Limited' : 'Active'}\r\n                </span>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"space-y-2\">\r\n              <div className=\"flex justify-between text-sm\">\r\n                <span>Usage</span>\r\n                <span>{Math.round(((status.limit - status.remaining) / status.limit) * 100)}%</span>\r\n              </div>\r\n              <Progress \r\n                value={((status.limit - status.remaining) / status.limit) * 100} \r\n                className=\"h-2\"\r\n              />\r\n            </div>\r\n\r\n            <div className=\"flex items-center gap-2 text-sm text-gray-600\">\r\n              <Clock className=\"h-4 w-4\" />\r\n              <span>\r\n                Resets: {new Date(status.resetTime * 1000).toLocaleTimeString()}\r\n              </span>\r\n            </div>\r\n\r\n            {status.isLimited && (\r\n              <Alert variant=\"destructive\">\r\n                <AlertTriangle className=\"h-4 w-4\" />\r\n                <AlertDescription>\r\n                  Rate limit exceeded. Please wait until reset time or upgrade your tier.\r\n                </AlertDescription>\r\n              </Alert>\r\n            )}\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n\r\n      {/* Rate Limit Test */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <Settings className=\"h-5 w-5\" />\r\n            Test Rate Limit\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent className=\"space-y-4\">\r\n          <div className=\"flex gap-2\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Enter endpoint to test (e.g., /api/ai-chat)\"\r\n              value={testEndpoint}\r\n              onChange={(e) => setTestEndpoint(e.target.value)}\r\n              className=\"flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n            />\r\n            <Button onClick={testRateLimit} disabled={!testEndpoint}>\r\n              Test Endpoint\r\n            </Button>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Configuration */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <Settings className=\"h-5 w-5\" />\r\n            Rate Limit Configuration\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"space-y-4\">\r\n            {configs.map((config, index) => (\r\n              <div key={index} className=\"flex items-center justify-between p-4 border rounded-lg\">\r\n                <div className=\"flex-1\">\r\n                  <div className=\"flex items-center gap-3\">\r\n                    <code className=\"bg-gray-100 px-2 py-1 rounded text-sm\">\r\n                      {config.endpoint}\r\n                    </code>\r\n                    <Badge variant={config.enabled ? 'default' : 'secondary'}>\r\n                      {config.enabled ? 'Enabled' : 'Disabled'}\r\n                    </Badge>\r\n                  </div>\r\n                  <p className=\"text-sm text-gray-600 mt-1\">\r\n                    {config.limit} requests per {config.window}\r\n                  </p>\r\n                </div>\r\n                <div className=\"flex gap-2\">\r\n                  <Button variant=\"outline\" size=\"sm\">\r\n                    Edit\r\n                  </Button>\r\n                  <Button \r\n                    variant={config.enabled ? 'destructive' : 'default'} \r\n                    size=\"sm\"\r\n                  >\r\n                    {config.enabled ? 'Disable' : 'Enable'}\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Tier Information */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Rate Limit Tiers</CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n            <div className=\"p-4 border rounded-lg\">\r\n              <div className=\"flex items-center gap-2 mb-2\">\r\n                <Users className=\"h-5 w-5 text-blue-600\" />\r\n                <h3 className=\"font-medium\">Default</h3>\r\n              </div>\r\n              <p className=\"text-2xl font-bold mb-1\">100</p>\r\n              <p className=\"text-sm text-gray-600\">requests/hour</p>\r\n            </div>\r\n            <div className=\"p-4 border rounded-lg\">\r\n              <div className=\"flex items-center gap-2 mb-2\">\r\n                <Zap className=\"h-5 w-5 text-yellow-600\" />\r\n                <h3 className=\"font-medium\">Premium</h3>\r\n              </div>\r\n              <p className=\"text-2xl font-bold mb-1\">1,000</p>\r\n              <p className=\"text-sm text-gray-600\">requests/hour</p>\r\n            </div>\r\n            <div className=\"p-4 border rounded-lg\">\r\n              <div className=\"flex items-center gap-2 mb-2\">\r\n                <Shield className=\"h-5 w-5 text-purple-600\" />\r\n                <h3 className=\"font-medium\">Admin</h3>\r\n              </div>\r\n              <p className=\"text-2xl font-bold mb-1\">10,000</p>\r\n              <p className=\"text-sm text-gray-600\">requests/hour</p>\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n};"
}