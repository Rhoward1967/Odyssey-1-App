{
  "originalPath": "src\\components\\UserLoginPortal.tsx",
  "timestamp": "2025-10-15T16:14:13.180Z",
  "hash": "4cfde61c0e86988d2ab4fa510677b5ca8addd916148e0591b8782acb3fc8d05d",
  "size": 5479,
  "content": "import React, { useState } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Label } from '@/components/ui/label';\r\nimport { useAuth } from '@/components/AuthProvider';\r\nimport { Shield, Eye, EyeOff, LogIn, UserPlus } from 'lucide-react';\r\n\r\nconst UserLoginPortal: React.FC = () => {\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [name, setName] = useState('');\r\n  const [isSignUp, setIsSignUp] = useState(false);\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const [error, setError] = useState('');\r\n  \r\n  const { user, signIn, signUp, signOut, loading } = useAuth();\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    setError('');\r\n\r\n    try {\r\n      if (isSignUp) {\r\n        await signUp(email, password, name);\r\n      } else {\r\n        await signIn(email, password);\r\n      }\r\n    } catch (err: any) {\r\n      setError(err.message || 'Authentication failed');\r\n    }\r\n  };\r\n\r\n  if (user && !loading) {\r\n    return (\r\n      <div className=\"max-w-2xl mx-auto space-y-6\">\r\n        <Card className=\"bg-slate-800/50 border-slate-700\">\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center gap-2 text-white\">\r\n              <Shield className=\"h-5 w-5\" />\r\n              User Portal - Logged In\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent className=\"space-y-4\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <p className=\"text-white font-medium\">{user.user_metadata?.name || user.email}</p>\r\n                <p className=\"text-gray-400 text-sm\">{user.email}</p>\r\n              </div>\r\n            </div>\r\n            <Button \r\n              onClick={signOut}\r\n              variant=\"outline\" \r\n              className=\"w-full border-slate-600 text-gray-300 hover:bg-slate-700\"\r\n            >\r\n              Sign Out\r\n            </Button>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"max-w-md mx-auto\">\r\n      <Card className=\"bg-slate-800/50 border-slate-700\">\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2 text-white text-center\">\r\n            {isSignUp ? <UserPlus className=\"h-5 w-5\" /> : <LogIn className=\"h-5 w-5\" />}\r\n            {isSignUp ? 'Create Account' : 'Sign In'}\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\r\n            {isSignUp && (\r\n              <div className=\"space-y-2\">\r\n                <Label htmlFor=\"name\" className=\"text-gray-300\">Full Name</Label>\r\n                <Input\r\n                  id=\"name\"\r\n                  value={name}\r\n                  onChange={(e) => setName(e.target.value)}\r\n                  className=\"bg-slate-700 border-slate-600 text-white\"\r\n                  required={isSignUp}\r\n                />\r\n              </div>\r\n            )}\r\n            \r\n            <div className=\"space-y-2\">\r\n              <Label htmlFor=\"email\" className=\"text-gray-300\">Email</Label>\r\n              <Input\r\n                id=\"email\"\r\n                type=\"email\"\r\n                value={email}\r\n                onChange={(e) => setEmail(e.target.value)}\r\n                className=\"bg-slate-700 border-slate-600 text-white\"\r\n                required\r\n              />\r\n            </div>\r\n\r\n            <div className=\"space-y-2\">\r\n              <Label htmlFor=\"password\" className=\"text-gray-300\">Password</Label>\r\n              <div className=\"relative\">\r\n                <Input\r\n                  id=\"password\"\r\n                  type={showPassword ? 'text' : 'password'}\r\n                  value={password}\r\n                  onChange={(e) => setPassword(e.target.value)}\r\n                  className=\"bg-slate-700 border-slate-600 text-white pr-10\"\r\n                  required\r\n                />\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={() => setShowPassword(!showPassword)}\r\n                  className=\"absolute right-3 top-3 text-gray-400 hover:text-white\"\r\n                >\r\n                  {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\r\n                </button>\r\n              </div>\r\n            </div>\r\n\r\n            {error && (\r\n              <div className=\"bg-red-500/20 border border-red-500 text-red-400 px-4 py-2 rounded-lg text-sm\">\r\n                {error}\r\n              </div>\r\n            )}\r\n\r\n            <Button\r\n              type=\"submit\"\r\n              disabled={loading}\r\n              className=\"w-full bg-purple-600 hover:bg-purple-700\"\r\n            >\r\n              {loading ? 'Please wait...' : (isSignUp ? 'Create Account' : 'Sign In')}\r\n            </Button>\r\n\r\n            <div className=\"text-center\">\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => setIsSignUp(!isSignUp)}\r\n                className=\"text-purple-400 hover:text-purple-300 text-sm\"\r\n              >\r\n                {isSignUp ? 'Already have an account? Sign in' : \"Don't have an account? Sign up\"}\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserLoginPortal;"
}