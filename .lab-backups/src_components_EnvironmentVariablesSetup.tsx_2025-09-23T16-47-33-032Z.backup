{
  "originalPath": "src\\components\\EnvironmentVariablesSetup.tsx",
  "timestamp": "2025-09-23T16:47:33.032Z",
  "hash": "e37469c4f0bbf81dac5728897463a8d093efb95c0d4946dfbaf3aa6191735dd5",
  "size": 6335,
  "content": "import React, { useState } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card';\r\nimport { Button } from './ui/button';\r\nimport { Input } from './ui/input';\r\nimport { Label } from './ui/label';\r\nimport { Badge } from './ui/badge';\r\nimport { Copy, Check, Eye, EyeOff, AlertTriangle, CheckCircle } from 'lucide-react';\r\n\r\ninterface EnvVariable {\r\n  key: string;\r\n  value: string;\r\n  required: boolean;\r\n  description: string;\r\n  platform: 'vercel' | 'github' | 'supabase' | 'all';\r\n}\r\n\r\nexport default function EnvironmentVariablesSetup() {\r\n  const [envVars, setEnvVars] = useState<EnvVariable[]>([\r\n    { key: 'VITE_SUPABASE_URL', value: 'your_supabase_project_url_here', required: true, description: 'Supabase project URL', platform: 'all' },\r\n    { key: 'VITE_SUPABASE_ANON_KEY', value: 'your_supabase_anon_key_here', required: true, description: 'Supabase anonymous key', platform: 'all' },\r\n    { key: 'VERCEL_TOKEN', value: '', required: true, description: 'Vercel deployment token', platform: 'github' },\r\n    { key: 'VERCEL_ORG_ID', value: '', required: true, description: 'Vercel organization ID', platform: 'github' },\r\n    { key: 'VERCEL_PROJECT_ID', value: '', required: true, description: 'Vercel project ID', platform: 'github' },\r\n    { key: 'SUPABASE_ACCESS_TOKEN', value: '', required: false, description: 'Supabase CLI access token', platform: 'github' }\r\n  ]);\r\n\r\n  const [showValues, setShowValues] = useState<Record<string, boolean>>({});\r\n  const [copiedKey, setCopiedKey] = useState<string>('');\r\n\r\n  const updateEnvVar = (key: string, value: string) => {\r\n    setEnvVars(prev => prev.map(env => \r\n      env.key === key ? { ...env, value } : env\r\n    ));\r\n  };\r\n\r\n  const copyToClipboard = (text: string, key: string) => {\r\n    navigator.clipboard.writeText(text);\r\n    setCopiedKey(key);\r\n    setTimeout(() => setCopiedKey(''), 2000);\r\n  };\r\n\r\n  const toggleShowValue = (key: string) => {\r\n    setShowValues(prev => ({ ...prev, [key]: !prev[key] }));\r\n  };\r\n\r\n  const getStatusBadge = (envVar: EnvVariable) => {\r\n    const hasValue = envVar.value.trim() !== '';\r\n    if (envVar.required && !hasValue) {\r\n      return <Badge variant=\"destructive\" className=\"ml-2\">Required</Badge>;\r\n    }\r\n    if (hasValue) {\r\n      return <Badge variant=\"default\" className=\"ml-2 bg-green-600\">Set</Badge>;\r\n    }\r\n    return <Badge variant=\"secondary\" className=\"ml-2\">Optional</Badge>;\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <Card className=\"bg-black/20 backdrop-blur-sm border-blue-500/30\">\r\n        <CardHeader>\r\n          <CardTitle className=\"text-white flex items-center gap-2\">\r\n            <AlertTriangle className=\"h-6 w-6 text-yellow-400\" />\r\n            Environment Variables Setup\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent className=\"space-y-6\">\r\n          {envVars.map((envVar) => (\r\n            <div key={envVar.key} className=\"space-y-2\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <Label className=\"text-white font-medium\">\r\n                  {envVar.key}\r\n                  {getStatusBadge(envVar)}\r\n                </Label>\r\n                <Badge variant=\"outline\" className=\"text-xs\">\r\n                  {envVar.platform}\r\n                </Badge>\r\n              </div>\r\n              <p className=\"text-sm text-gray-300\">{envVar.description}</p>\r\n              <div className=\"flex gap-2\">\r\n                <div className=\"relative flex-1\">\r\n                  <Input\r\n                    type={showValues[envVar.key] ? \"text\" : \"password\"}\r\n                    value={envVar.value}\r\n                    onChange={(e) => updateEnvVar(envVar.key, e.target.value)}\r\n                    className=\"bg-black/30 border-gray-600 text-white pr-20\"\r\n                    placeholder={`Enter ${envVar.key}`}\r\n                  />\r\n                  <div className=\"absolute right-2 top-1/2 -translate-y-1/2 flex gap-1\">\r\n                    <Button\r\n                      size=\"sm\"\r\n                      variant=\"ghost\"\r\n                      onClick={() => toggleShowValue(envVar.key)}\r\n                      className=\"h-6 w-6 p-0 text-gray-400 hover:text-white\"\r\n                    >\r\n                      {showValues[envVar.key] ? <EyeOff className=\"h-3 w-3\" /> : <Eye className=\"h-3 w-3\" />}\r\n                    </Button>\r\n                    <Button\r\n                      size=\"sm\"\r\n                      variant=\"ghost\"\r\n                      onClick={() => copyToClipboard(envVar.value, envVar.key)}\r\n                      className=\"h-6 w-6 p-0 text-gray-400 hover:text-white\"\r\n                    >\r\n                      {copiedKey === envVar.key ? <Check className=\"h-3 w-3\" /> : <Copy className=\"h-3 w-3\" />}\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </CardContent>\r\n      </Card>\r\n\r\n      <Card className=\"bg-black/20 backdrop-blur-sm border-green-500/30\">\r\n        <CardHeader>\r\n          <CardTitle className=\"text-white flex items-center gap-2\">\r\n            <CheckCircle className=\"h-6 w-6 text-green-400\" />\r\n            Setup Instructions\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent className=\"space-y-4\">\r\n          <div className=\"space-y-2\">\r\n            <h4 className=\"text-white font-medium\">1. GitHub Secrets</h4>\r\n            <p className=\"text-sm text-gray-300\">Go to your GitHub repo → Settings → Secrets and variables → Actions</p>\r\n            <p className=\"text-sm text-gray-300\">Add VERCEL_TOKEN, VERCEL_ORG_ID, VERCEL_PROJECT_ID</p>\r\n          </div>\r\n          <div className=\"space-y-2\">\r\n            <h4 className=\"text-white font-medium\">2. Vercel Environment Variables</h4>\r\n            <p className=\"text-sm text-gray-300\">In Vercel dashboard → Project Settings → Environment Variables</p>\r\n            <p className=\"text-sm text-gray-300\">Add VITE_SUPABASE_URL and VITE_SUPABASE_ANON_KEY</p>\r\n          </div>\r\n          <div className=\"space-y-2\">\r\n            <h4 className=\"text-white font-medium\">3. Local Development</h4>\r\n            <p className=\"text-sm text-gray-300\">Create .env file in project root with VITE_ prefixed variables</p>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}"
}