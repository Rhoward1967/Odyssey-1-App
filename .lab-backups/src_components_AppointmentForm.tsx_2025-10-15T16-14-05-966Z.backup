{
  "originalPath": "src\\components\\AppointmentForm.tsx",
  "timestamp": "2025-10-15T16:14:05.966Z",
  "hash": "1b5b4241b66aba7d597e9208f797d2c09701dd2b7fb5aeb0b26c5f4193f3cc88",
  "size": 6165,
  "content": "\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { createClient } from '@supabase/supabase-js';\r\n\r\n// This should be initialized from your central Supabase client instance\r\nconst supabase = createClient(\r\n  import.meta.env.VITE_SUPABASE_URL!,\r\n  import.meta.env.VITE_SUPABASE_ANON_KEY!\r\n);\r\n\r\n// Expanded Type definitions to include ID for updates\r\ntype Appointment = {\r\n  id?: string; // ID is optional for new appointments, required for updates\r\n  title?: string;\r\n  start_time?: Date;\r\n  end_time?: Date;\r\n  status?: 'Confirmed' | 'Tentative' | 'Cancelled';\r\n};\r\n\r\n\r\ntype AppointmentFormProps = {\r\n  onSave: (data: {\r\n    title: string;\r\n    start_time: string;\r\n    end_time: string;\r\n    status: 'Confirmed' | 'Tentative' | 'Cancelled';\r\n  }) => void | Promise<void>;\r\n  onCancel: () => void;\r\n  initialData?: Appointment;\r\n};\r\n\r\nexport default function AppointmentForm({ onSave, onCancel, initialData = {} }: AppointmentFormProps) {\r\n  const [formData, setFormData] = useState({\r\n    title: initialData.title || '',\r\n    start_time: initialData.start_time ? new Date(initialData.start_time).toISOString().slice(0, 16) : '',\r\n    end_time: initialData.end_time ? new Date(initialData.end_time).toISOString().slice(0, 16) : '',\r\n    status: initialData.status || 'Confirmed',\r\n  });\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  // Effect to update form when initialData changes (for editing)\r\n  useEffect(() => {\r\n    setFormData({\r\n      title: initialData.title || '',\r\n      start_time: initialData.start_time ? new Date(initialData.start_time).toISOString().slice(0, 16) : '',\r\n      end_time: initialData.end_time ? new Date(initialData.end_time).toISOString().slice(0, 16) : '',\r\n      status: initialData.status || 'Confirmed',\r\n    });\r\n  }, [initialData]);\r\n\r\n  const validateForm = (): boolean => {\r\n    if (!formData.title.trim()) {\r\n      setError('Title is required.');\r\n      return false;\r\n    }\r\n    if (!formData.start_time || !formData.end_time) {\r\n      setError('Both start and end times are required.');\r\n      return false;\r\n    }\r\n    if (new Date(formData.end_time) <= new Date(formData.start_time)) {\r\n      setError('End time must be after the start time.');\r\n      return false;\r\n    }\r\n    setError(null);\r\n    return true;\r\n  };\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    if (!validateForm()) {\r\n      return;\r\n    }\r\n    setIsLoading(true);\r\n    try {\r\n      await onSave({\r\n        title: formData.title,\r\n        start_time: new Date(formData.start_time).toISOString(),\r\n        end_time: new Date(formData.end_time).toISOString(),\r\n        status: formData.status as 'Confirmed' | 'Tentative' | 'Cancelled',\r\n      });\r\n    } catch (err: any) {\r\n      setError(err?.message || 'Failed to save appointment.');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\r\n    const { name, value } = e.target;\r\n    setFormData(prev => ({ ...prev, [name]: value }));\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className=\"space-y-4 p-4 border rounded-lg bg-white shadow-sm\">\r\n      {error && <div className=\"p-3 bg-red-100 text-red-700 rounded-lg\">{error}</div>}\r\n      <div>\r\n        <label htmlFor=\"title\" className=\"block text-sm font-medium text-gray-700\">Title</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"title\"\r\n          name=\"title\"\r\n          value={formData.title}\r\n          onChange={handleChange}\r\n          className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\"\r\n        />\r\n      </div>\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n        <div>\r\n          <label htmlFor=\"start_time\" className=\"block text-sm font-medium text-gray-700\">Start Time</label>\r\n          <input\r\n            type=\"datetime-local\"\r\n            id=\"start_time\"\r\n            name=\"start_time\"\r\n            value={formData.start_time}\r\n            onChange={handleChange}\r\n            className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\"\r\n          />\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"end_time\" className=\"block text-sm font-medium text-gray-700\">End Time</label>\r\n          <input\r\n            type=\"datetime-local\"\r\n            id=\"end_time\"\r\n            name=\"end_time\"\r\n            value={formData.end_time}\r\n            onChange={handleChange}\r\n            className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\"\r\n          />\r\n        </div>\r\n      </div>\r\n      <div>\r\n        <label htmlFor=\"status\" className=\"block text-sm font-medium text-gray-700\">Status</label>\r\n        <select\r\n          id=\"status\"\r\n          name=\"status\"\r\n          value={formData.status}\r\n          onChange={handleChange}\r\n          className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\"\r\n        >\r\n          <option value=\"Confirmed\">Confirmed</option>\r\n          <option value=\"Tentative\">Tentative</option>\r\n          <option value=\"Cancelled\">Cancelled</option>\r\n        </select>\r\n      </div>\r\n      <div className=\"flex gap-2\">\r\n        <button type=\"submit\" disabled={isLoading} className=\"inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:bg-indigo-300\">\r\n          {isLoading ? 'Saving...' : 'Save Appointment'}\r\n        </button>\r\n        <button type=\"button\" onClick={onCancel} className=\"inline-flex justify-center py-2 px-4 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\">\r\n          Cancel\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n\r\n"
}