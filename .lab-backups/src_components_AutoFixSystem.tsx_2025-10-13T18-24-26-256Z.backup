{
  "originalPath": "src\\components\\AutoFixSystem.tsx",
  "timestamp": "2025-10-13T18:24:26.256Z",
  "hash": "9dd1e27a0344ed3cac7c27a226c27e17934a167adf18e10c33fcaea38df10b9b",
  "size": 9219,
  "content": "import React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card';\r\nimport { Button } from './ui/button';\r\nimport { Badge } from './ui/badge';\r\nimport { Progress } from './ui/progress';\r\nimport { \r\n  Wrench, \r\n  CheckCircle, \r\n  AlertTriangle, \r\n  RefreshCw, \r\n  Play,\r\n  Pause,\r\n  Settings,\r\n  Zap,\r\n  Shield,\r\n  Code\r\n} from 'lucide-react';\r\n\r\ninterface AutoFixIssue {\r\n  id: string;\r\n  type: 'deployment' | 'environment' | 'build' | 'security';\r\n  severity: 'critical' | 'high' | 'medium' | 'low';\r\n  description: string;\r\n  autoFixable: boolean;\r\n  status: 'detected' | 'fixing' | 'fixed' | 'failed';\r\n  solution?: string;\r\n}\r\n\r\nexport default function AutoFixSystem() {\r\n  const [issues, setIssues] = useState<AutoFixIssue[]>([\r\n    {\r\n      id: '1',\r\n      type: 'deployment',\r\n      severity: 'critical',\r\n      description: 'Missing VERCEL_TOKEN in GitHub secrets',\r\n      autoFixable: false,\r\n      status: 'detected',\r\n      solution: 'Add VERCEL_TOKEN to GitHub repository secrets'\r\n    },\r\n    {\r\n      id: '2',\r\n      type: 'environment',\r\n      severity: 'high',\r\n      description: 'VITE_SUPABASE_URL not set in production',\r\n      autoFixable: true,\r\n      status: 'detected',\r\n      solution: 'Auto-configure from detected Supabase project'\r\n    },\r\n    {\r\n      id: '3',\r\n      type: 'build',\r\n      severity: 'medium',\r\n      description: 'TypeScript strict mode warnings',\r\n      autoFixable: true,\r\n      status: 'fixed',\r\n      solution: 'Applied type fixes and null checks'\r\n    },\r\n    {\r\n      id: '4',\r\n      type: 'security',\r\n      severity: 'high',\r\n      description: 'Exposed API keys in client code',\r\n      autoFixable: true,\r\n      status: 'fixing',\r\n      solution: 'Moving sensitive keys to server-side environment'\r\n    }\r\n  ]);\r\n\r\n  const [autoFixEnabled, setAutoFixEnabled] = useState(true);\r\n  const [isScanning, setIsScanning] = useState(false);\r\n\r\n  const runAutoFix = async (issueId: string) => {\r\n    setIssues(prev => prev.map(issue => \r\n      issue.id === issueId \r\n        ? { ...issue, status: 'fixing' }\r\n        : issue\r\n    ));\r\n\r\n    // Simulate auto-fix process\r\n    await new Promise(resolve => setTimeout(resolve, 3000));\r\n\r\n    setIssues(prev => prev.map(issue => \r\n      issue.id === issueId \r\n        ? { ...issue, status: Math.random() > 0.2 ? 'fixed' : 'failed' }\r\n        : issue\r\n    ));\r\n  };\r\n\r\n  const runFullScan = async () => {\r\n    setIsScanning(true);\r\n    await new Promise(resolve => setTimeout(resolve, 5000));\r\n    \r\n    // Add new detected issues\r\n    const newIssue: AutoFixIssue = {\r\n      id: Date.now().toString(),\r\n      type: 'build',\r\n      severity: 'low',\r\n      description: 'Unused imports detected in 3 files',\r\n      autoFixable: true,\r\n      status: 'detected',\r\n      solution: 'Remove unused import statements'\r\n    };\r\n    \r\n    setIssues(prev => [...prev, newIssue]);\r\n    setIsScanning(false);\r\n  };\r\n\r\n  const getSeverityColor = (severity: string) => {\r\n    const colors = {\r\n      critical: 'bg-red-600',\r\n      high: 'bg-orange-600',\r\n      medium: 'bg-yellow-600',\r\n      low: 'bg-blue-600'\r\n    };\r\n    return colors[severity as keyof typeof colors];\r\n  };\r\n\r\n  const getTypeIcon = (type: string) => {\r\n    const icons = {\r\n      deployment: <Zap className=\"h-4 w-4\" />,\r\n      environment: <Settings className=\"h-4 w-4\" />,\r\n      build: <Code className=\"h-4 w-4\" />,\r\n      security: <Shield className=\"h-4 w-4\" />\r\n    };\r\n    return icons[type as keyof typeof icons];\r\n  };\r\n\r\n  const getStatusBadge = (status: string) => {\r\n    const variants = {\r\n      detected: 'bg-yellow-600',\r\n      fixing: 'bg-blue-600',\r\n      fixed: 'bg-green-600',\r\n      failed: 'bg-red-600'\r\n    };\r\n    return <Badge className={variants[status as keyof typeof variants]}>{status}</Badge>;\r\n  };\r\n\r\n  const criticalIssues = issues.filter(i => i.severity === 'critical').length;\r\n  const autoFixableIssues = issues.filter(i => i.autoFixable && i.status === 'detected').length;\r\n  const fixedIssues = issues.filter(i => i.status === 'fixed').length;\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <Card className=\"bg-black/20 backdrop-blur-sm border-orange-500/30\">\r\n        <CardHeader>\r\n          <div className=\"flex items-center justify-between\">\r\n            <CardTitle className=\"text-white flex items-center gap-2\">\r\n              <Wrench className=\"h-6 w-6 text-orange-400\" />\r\n              Auto-Fix System\r\n            </CardTitle>\r\n            <div className=\"flex items-center gap-2\">\r\n              <Button\r\n                onClick={() => setAutoFixEnabled(!autoFixEnabled)}\r\n                size=\"sm\"\r\n                variant={autoFixEnabled ? \"default\" : \"outline\"}\r\n                className={autoFixEnabled ? \"bg-green-600 hover:bg-green-700\" : \"\"}\r\n              >\r\n                {autoFixEnabled ? <Play className=\"h-4 w-4 mr-2\" /> : <Pause className=\"h-4 w-4 mr-2\" />}\r\n                {autoFixEnabled ? 'Enabled' : 'Disabled'}\r\n              </Button>\r\n              <Button\r\n                onClick={runFullScan}\r\n                disabled={isScanning}\r\n                size=\"sm\"\r\n                className=\"bg-blue-600 hover:bg-blue-700\"\r\n              >\r\n                <RefreshCw className={`h-4 w-4 mr-2 ${isScanning ? 'animate-spin' : ''}`} />\r\n                Scan\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\r\n            <Card className=\"bg-black/30 border-red-500/30\">\r\n              <CardContent className=\"p-4\">\r\n                <div className=\"flex items-center gap-2\">\r\n                  <AlertTriangle className=\"h-5 w-5 text-red-400\" />\r\n                  <div>\r\n                    <p className=\"text-sm text-gray-300\">Critical Issues</p>\r\n                    <p className=\"text-2xl font-bold text-white\">{criticalIssues}</p>\r\n                  </div>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n            \r\n            <Card className=\"bg-black/30 border-blue-500/30\">\r\n              <CardContent className=\"p-4\">\r\n                <div className=\"flex items-center gap-2\">\r\n                  <Wrench className=\"h-5 w-5 text-blue-400\" />\r\n                  <div>\r\n                    <p className=\"text-sm text-gray-300\">Auto-Fixable</p>\r\n                    <p className=\"text-2xl font-bold text-white\">{autoFixableIssues}</p>\r\n                  </div>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n            \r\n            <Card className=\"bg-black/30 border-green-500/30\">\r\n              <CardContent className=\"p-4\">\r\n                <div className=\"flex items-center gap-2\">\r\n                  <CheckCircle className=\"h-5 w-5 text-green-400\" />\r\n                  <div>\r\n                    <p className=\"text-sm text-gray-300\">Fixed</p>\r\n                    <p className=\"text-2xl font-bold text-white\">{fixedIssues}</p>\r\n                  </div>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n\r\n          <div className=\"space-y-4\">\r\n            {issues.map((issue) => (\r\n              <Card key={issue.id} className=\"bg-black/30 border-gray-600/30\">\r\n                <CardContent className=\"p-4\">\r\n                  <div className=\"flex items-center justify-between\">\r\n                    <div className=\"flex items-center gap-3\">\r\n                      {getTypeIcon(issue.type)}\r\n                      <div className=\"flex-1\">\r\n                        <div className=\"flex items-center gap-2 mb-1\">\r\n                          <h4 className=\"text-white font-medium\">{issue.description}</h4>\r\n                          <Badge className={getSeverityColor(issue.severity)}>\r\n                            {issue.severity}\r\n                          </Badge>\r\n                        </div>\r\n                        {issue.solution && (\r\n                          <p className=\"text-sm text-gray-300\">{issue.solution}</p>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"flex items-center gap-2\">\r\n                      {getStatusBadge(issue.status)}\r\n                      {issue.autoFixable && issue.status === 'detected' && (\r\n                        <Button\r\n                          onClick={() => runAutoFix(issue.id)}\r\n                          size=\"sm\"\r\n                          className=\"bg-orange-600 hover:bg-orange-700\"\r\n                        >\r\n                          <Wrench className=\"h-3 w-3 mr-1\" />\r\n                          Fix\r\n                        </Button>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                  {issue.status === 'fixing' && (\r\n                    <div className=\"mt-3\">\r\n                      <Progress value={66} className=\"h-2\" />\r\n                      <p className=\"text-xs text-gray-400 mt-1\">Applying fix...</p>\r\n                    </div>\r\n                  )}\r\n                </CardContent>\r\n              </Card>\r\n            ))}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}"
}