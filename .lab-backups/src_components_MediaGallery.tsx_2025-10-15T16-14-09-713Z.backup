{
  "originalPath": "src\\components\\MediaGallery.tsx",
  "timestamp": "2025-10-15T16:14:09.713Z",
  "hash": "3aad39bb808476e48653918321b2ab023c4007b76cc528bff1da7b364518450f",
  "size": 9146,
  "content": "import React, { useEffect, useState } from 'react';\r\nimport { supabase } from '@/lib/supabaseClient';\r\nimport { Heart, MessageCircle, Share2, Download, Upload, Eye, ArrowLeft } from 'lucide-react';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\r\n\r\ninterface MediaGalleryProps {\r\n  onBack?: () => void;\r\n}\r\n\r\ninterface MediaItem {\r\n  id: string;\r\n  user_id: string;\r\n  title: string;\r\n  description?: string;\r\n  file_url: string;\r\n  file_type: string;\r\n  likes_count: number;\r\n  comments_count: number;\r\n  views_count: number;\r\n  created_at: string;\r\n  profiles: {\r\n    full_name: string;\r\n    avatar_url?: string;\r\n  };\r\n  user_liked?: boolean;\r\n}\r\n\r\nexport default function MediaGallery({ onBack }: MediaGalleryProps = {}) {\r\n  const [mediaItems, setMediaItems] = useState<MediaItem[]>([]);\r\n\r\n  useEffect(() => {\r\n    // Fetch the public URL for the Howard Janitorial commercial from Supabase Storage\r\n    const fetchVideo = async () => {\r\n      // Use the exact filename as in Supabase Storage\r\n      const videoPath = 'HowardJanitorial ADVERTISEMENT TV.mp4';\r\n      const { data } = supabase.storage.from('media-workstation').getPublicUrl(videoPath);\r\n      setMediaItems([\r\n        {\r\n          id: 'howard-janitorial',\r\n          user_id: '0',\r\n          title: 'Howard Janitorial Commercial',\r\n          description: 'Our official commercial!',\r\n          file_url: data.publicUrl,\r\n          file_type: 'video',\r\n          likes_count: 0,\r\n          comments_count: 0,\r\n          views_count: 0,\r\n          created_at: new Date().toISOString(),\r\n          profiles: { full_name: 'Howard Janitorial' },\r\n          user_liked: false\r\n        }\r\n      ]);\r\n    };\r\n    fetchVideo();\r\n  }, []);\r\n  const [isUploading, setIsUploading] = useState(false);\r\n\r\n  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const file = event.target.files?.[0];\r\n    if (!file) return;\r\n\r\n    setIsUploading(true);\r\n    setTimeout(() => {\r\n      const newItem: MediaItem = {\r\n        id: Date.now().toString(),\r\n        user_id: '1',\r\n        title: file.name.split('.')[0],\r\n        description: '',\r\n        file_url: URL.createObjectURL(file),\r\n        file_type: file.type.startsWith('image/') ? 'image' : 'video',\r\n        likes_count: 0,\r\n        comments_count: 0,\r\n        views_count: 0,\r\n        created_at: new Date().toISOString(),\r\n        profiles: { full_name: 'You' },\r\n        user_liked: false\r\n      };\r\n      setMediaItems(prev => [newItem, ...prev]);\r\n      setIsUploading(false);\r\n    }, 2000);\r\n  };\r\n\r\n  const toggleLike = (itemId: string) => {\r\n    setMediaItems(prev => prev.map(item => \r\n      item.id === itemId \r\n        ? { \r\n            ...item, \r\n            user_liked: !item.user_liked,\r\n            likes_count: item.user_liked ? item.likes_count - 1 : item.likes_count + 1\r\n          }\r\n        : item\r\n    ));\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50 p-4 max-w-md mx-auto\">\r\n      {/* Mobile-Optimized Header */}\r\n      {onBack && (\r\n        <div className=\"flex items-center gap-3 mb-4 bg-white rounded-lg p-3 shadow-sm\">\r\n          <Button\r\n            onClick={onBack}\r\n            variant=\"ghost\"\r\n            size=\"sm\"\r\n            className=\"p-2\"\r\n          >\r\n            <ArrowLeft className=\"w-4 h-4\" />\r\n          </Button>\r\n          <h2 className=\"text-lg font-semibold text-gray-900 flex-1\">Media Gallery</h2>\r\n        </div>\r\n      )}\r\n      \r\n      {/* Mobile Upload Section */}\r\n      <div className=\"bg-gradient-to-r from-purple-50 to-blue-50 rounded-lg p-4 mb-4\">\r\n        <div className=\"text-center\">\r\n          <h3 className=\"text-base font-semibold text-gray-900 mb-2\">Share Media</h3>\r\n          <p className=\"text-sm text-gray-600 mb-3\">Share photos and videos</p>\r\n          <input\r\n            type=\"file\"\r\n            id=\"media-upload\"\r\n            className=\"hidden\"\r\n            onChange={handleFileUpload}\r\n            accept=\"image/*,video/*\"\r\n          />\r\n          <Button\r\n            onClick={() => document.getElementById('media-upload')?.click()}\r\n            disabled={isUploading}\r\n            className=\"w-full bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700\"\r\n            size=\"sm\"\r\n          >\r\n            <Upload className=\"w-4 h-4 mr-2\" />\r\n            {isUploading ? 'Uploading...' : 'Upload Media'}\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Mobile-Optimized Media Grid */}\r\n      <div className=\"space-y-4\">\r\n        {mediaItems.map((item) => (\r\n          <div key={item.id} className=\"bg-white rounded-lg shadow-sm overflow-hidden\">\r\n            {/* User Info Header */}\r\n            <div className=\"p-3 border-b border-gray-100\">\r\n              <div className=\"flex items-center gap-3\">\r\n                <Avatar className=\"w-8 h-8\">\r\n                  <AvatarFallback className=\"text-xs\">\r\n                    {item.profiles?.full_name?.charAt(0) || 'U'}\r\n                  </AvatarFallback>\r\n                </Avatar>\r\n                <div className=\"flex-1 min-w-0\">\r\n                  <p className=\"font-medium text-sm text-gray-900 truncate\">\r\n                    {item.profiles?.full_name || 'User'}\r\n                  </p>\r\n                  <p className=\"text-xs text-gray-500\">\r\n                    {new Date(item.created_at).toLocaleDateString()}\r\n                  </p>\r\n                </div>\r\n                <div className=\"bg-gray-100 text-gray-600 px-2 py-1 rounded text-xs flex items-center gap-1\">\r\n                  <Eye className=\"w-3 h-3\" />\r\n                  {item.views_count}\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Media Content */}\r\n            <div className=\"relative bg-gray-100\">\r\n              {item.file_type === 'video' ? (\r\n                <video\r\n                  src={item.file_url}\r\n                  controls\r\n                  loop\r\n                  muted\r\n                  className=\"w-full h-64 object-cover bg-black\"\r\n                  style={{ background: '#000' }}\r\n                  preload=\"metadata\"\r\n                  poster=\"/placeholder.svg\"\r\n                  onError={e => {\r\n                    const target = e.target as HTMLVideoElement;\r\n                    target.style.display = 'none';\r\n                    const fallback = document.createElement('div');\r\n                    fallback.textContent = 'Video failed to load.';\r\n                    fallback.style.background = '#222';\r\n                    fallback.style.color = '#fff';\r\n                    fallback.style.width = '100%';\r\n                    fallback.style.height = '16rem';\r\n                    fallback.style.display = 'flex';\r\n                    fallback.style.alignItems = 'center';\r\n                    fallback.style.justifyContent = 'center';\r\n                    fallback.style.fontSize = '1.1rem';\r\n                    target.parentElement?.appendChild(fallback);\r\n                  }}\r\n                >\r\n                  Sorry, your browser does not support embedded videos.\r\n                </video>\r\n              ) : (\r\n                <img\r\n                  src={item.file_url}\r\n                  alt={item.title}\r\n                  className=\"w-full h-64 object-cover\"\r\n                  loading=\"lazy\"\r\n                />\r\n              )}\r\n            </div>\r\n\r\n            {/* Content & Actions */}\r\n            <div className=\"p-3\">\r\n              <h4 className=\"font-medium text-gray-900 mb-1 text-sm\">{item.title}</h4>\r\n              {item.description && (\r\n                <p className=\"text-sm text-gray-600 mb-3 line-clamp-2\">{item.description}</p>\r\n              )}\r\n\r\n              {/* Mobile Actions */}\r\n              <div className=\"flex items-center justify-between pt-2 border-t border-gray-100\">\r\n                <div className=\"flex items-center gap-4\">\r\n                  <button\r\n                    onClick={() => toggleLike(item.id)}\r\n                    className=\"flex items-center gap-1 text-sm text-gray-600 hover:text-red-600 transition-colors active:scale-95\"\r\n                  >\r\n                    <Heart className={`w-4 h-4 ${item.user_liked ? 'fill-red-600 text-red-600' : ''}`} />\r\n                    <span className=\"text-xs\">{item.likes_count}</span>\r\n                  </button>\r\n                  <div className=\"flex items-center gap-1 text-sm text-gray-600\">\r\n                    <MessageCircle className=\"w-4 h-4\" />\r\n                    <span className=\"text-xs\">{item.comments_count}</span>\r\n                  </div>\r\n                </div>\r\n                <div className=\"flex items-center gap-1\">\r\n                  <Button size=\"sm\" variant=\"ghost\" className=\"p-2\">\r\n                    <Share2 className=\"w-4 h-4\" />\r\n                  </Button>\r\n                  <Button size=\"sm\" variant=\"ghost\" className=\"p-2\">\r\n                    <Download className=\"w-4 h-4\" />\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}"
}