{
  "originalPath": "src\\components\\RealDatabaseIntegration.tsx",
  "timestamp": "2025-09-24T20:33:46.586Z",
  "hash": "8b6b1cbb310354340322bcce0bce63eab84832c95e82951a205e1495302eb92a",
  "size": 14094,
  "content": "import React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport { Database, Server, Activity, Settings, Plus, Search, Filter, Download } from 'lucide-react';\r\nimport { supabase } from '@/lib/supabase';\r\n\r\ninterface DatabaseConnection {\r\n  id: string;\r\n  name: string;\r\n  type: string;\r\n  status: 'connected' | 'disconnected' | 'error';\r\n  lastSync: string;\r\n  tables: number;\r\n  records: number;\r\n}\r\n\r\ninterface QueryResult {\r\n  id: string;\r\n  query: string;\r\n  results: any[];\r\n  executedAt: string;\r\n  duration: number;\r\n}\r\n\r\nexport default function RealDatabaseIntegration() {\r\n  const [connections, setConnections] = useState<DatabaseConnection[]>([\r\n    {\r\n      id: '1',\r\n      name: 'Supabase Main',\r\n      type: 'PostgreSQL',\r\n      status: 'connected',\r\n      lastSync: '2 mins ago',\r\n      tables: 15,\r\n      records: 12543\r\n    },\r\n    {\r\n      id: '2',\r\n      name: 'Research Database',\r\n      type: 'Vector DB',\r\n      status: 'connected',\r\n      lastSync: '5 mins ago',\r\n      tables: 8,\r\n      records: 8921\r\n    }\r\n  ]);\r\n\r\n  const [queryHistory, setQueryHistory] = useState<QueryResult[]>([]);\r\n  const [currentQuery, setCurrentQuery] = useState('');\r\n  const [isExecuting, setIsExecuting] = useState(false);\r\n  const [queryResults, setQueryResults] = useState<any[]>([]);\r\n\r\n  useEffect(() => {\r\n    // Test connection to Supabase\r\n    testDatabaseConnection();\r\n  }, []);\r\n\r\n  const testDatabaseConnection = async () => {\r\n    try {\r\n      const { data, error } = await supabase.from('conversations').select('count');\r\n      if (!error) {\r\n        console.log('Database connection successful');\r\n      }\r\n    } catch (error) {\r\n      console.error('Database connection failed:', error);\r\n    }\r\n  };\r\n\r\n  const executeQuery = async () => {\r\n    if (!currentQuery.trim()) return;\r\n    \r\n    setIsExecuting(true);\r\n    const startTime = Date.now();\r\n    \r\n    try {\r\n      // Parse and execute the query (simplified for demo)\r\n      let results: any[] = [];\r\n      \r\n      if (currentQuery.toLowerCase().includes('conversations')) {\r\n        const { data, error } = await supabase.from('conversations').select('*').limit(10);\r\n        if (!error) results = data || [];\r\n      } else if (currentQuery.toLowerCase().includes('users')) {\r\n        const { data, error } = await supabase.from('users').select('*').limit(10);\r\n        if (!error) results = data || [];\r\n      } else {\r\n        // No supported table/query matched; return empty results and set error message\r\n        setQueryResults([]);\r\n        setQueryHistory(prev => [\r\n          {\r\n            id: Date.now().toString(),\r\n            query: currentQuery,\r\n            results: [],\r\n            executedAt: new Date().toLocaleTimeString(),\r\n            duration: Date.now() - startTime,\r\n            error: 'No results: Query not supported or no data found.'\r\n          },\r\n          ...prev.slice(0, 9)\r\n        ]);\r\n        setIsExecuting(false);\r\n        return;\r\n      }\r\n      \r\n      const duration = Date.now() - startTime;\r\n      const newResult: QueryResult = {\r\n        id: Date.now().toString(),\r\n        query: currentQuery,\r\n        results,\r\n        executedAt: new Date().toLocaleTimeString(),\r\n        duration\r\n      };\r\n      \r\n      setQueryResults(results);\r\n      setQueryHistory(prev => [newResult, ...prev.slice(0, 9)]);\r\n      \r\n    } catch (error) {\r\n      console.error('Query execution failed:', error);\r\n    } finally {\r\n      setIsExecuting(false);\r\n    }\r\n  };\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'connected': return 'bg-green-100 text-green-800 border-green-200';\r\n      case 'disconnected': return 'bg-gray-100 text-gray-800 border-gray-200';\r\n      case 'error': return 'bg-red-100 text-red-800 border-red-200';\r\n      default: return 'bg-gray-100 text-gray-800 border-gray-200';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <div className=\"flex items-center justify-between\">\r\n        <div>\r\n          <h2 className=\"text-3xl font-bold\">Real Database Integration</h2>\r\n          <p className=\"text-muted-foreground\">Live database connections and query interface</p>\r\n        </div>\r\n        <div className=\"flex items-center space-x-2\">\r\n          <Badge variant=\"outline\" className=\"bg-blue-50 text-blue-700 border-blue-200\">\r\n            <Database className=\"h-3 w-3 mr-1\" />\r\n            {connections.filter(c => c.status === 'connected').length} Connected\r\n          </Badge>\r\n          <Button variant=\"outline\" size=\"sm\">\r\n            <Plus className=\"h-4 w-4 mr-2\" />\r\n            Add Connection\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      <Tabs defaultValue=\"connections\" className=\"space-y-4\">\r\n        <TabsList>\r\n          <TabsTrigger value=\"connections\">Connections</TabsTrigger>\r\n          <TabsTrigger value=\"query\">Query Interface</TabsTrigger>\r\n          <TabsTrigger value=\"analytics\">Analytics</TabsTrigger>\r\n          <TabsTrigger value=\"settings\">Settings</TabsTrigger>\r\n        </TabsList>\r\n\r\n        <TabsContent value=\"connections\" className=\"space-y-4\">\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n            {connections.map((connection) => (\r\n              <Card key={connection.id}>\r\n                <CardHeader className=\"pb-3\">\r\n                  <div className=\"flex items-center justify-between\">\r\n                    <CardTitle className=\"text-lg\">{connection.name}</CardTitle>\r\n                    <Badge className={getStatusColor(connection.status)}>\r\n                      {connection.status}\r\n                    </Badge>\r\n                  </div>\r\n                  <p className=\"text-sm text-muted-foreground\">{connection.type}</p>\r\n                </CardHeader>\r\n                <CardContent className=\"space-y-3\">\r\n                  <div className=\"flex justify-between text-sm\">\r\n                    <span>Tables:</span>\r\n                    <span className=\"font-medium\">{connection.tables}</span>\r\n                  </div>\r\n                  <div className=\"flex justify-between text-sm\">\r\n                    <span>Records:</span>\r\n                    <span className=\"font-medium\">{connection.records.toLocaleString()}</span>\r\n                  </div>\r\n                  <div className=\"flex justify-between text-sm\">\r\n                    <span>Last Sync:</span>\r\n                    <span className=\"font-medium\">{connection.lastSync}</span>\r\n                  </div>\r\n                  <div className=\"flex space-x-2 pt-2\">\r\n                    <Button variant=\"outline\" size=\"sm\" className=\"flex-1\">\r\n                      <Activity className=\"h-3 w-3 mr-1\" />\r\n                      Monitor\r\n                    </Button>\r\n                    <Button variant=\"outline\" size=\"sm\" className=\"flex-1\">\r\n                      <Settings className=\"h-3 w-3 mr-1\" />\r\n                      Config\r\n                    </Button>\r\n                  </div>\r\n                </CardContent>\r\n              </Card>\r\n            ))}\r\n          </div>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"query\" className=\"space-y-4\">\r\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>Query Editor</CardTitle>\r\n              </CardHeader>\r\n              <CardContent className=\"space-y-4\">\r\n                <Textarea\r\n                  placeholder=\"SELECT * FROM conversations LIMIT 10;\"\r\n                  value={currentQuery}\r\n                  onChange={(e) => setCurrentQuery(e.target.value)}\r\n                  className=\"min-h-32\"\r\n                />\r\n                <div className=\"flex space-x-2\">\r\n                  <Button \r\n                    onClick={executeQuery}\r\n                    disabled={isExecuting || !currentQuery.trim()}\r\n                    className=\"flex-1\"\r\n                  >\r\n                    {isExecuting ? 'Executing...' : 'Execute Query'}\r\n                  </Button>\r\n                  <Button variant=\"outline\" size=\"sm\">\r\n                    <Download className=\"h-4 w-4\" />\r\n                  </Button>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>Query Results</CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                {queryResults.length > 0 ? (\r\n                  <div className=\"space-y-2 max-h-64 overflow-y-auto\">\r\n                    {queryResults.map((result, index) => (\r\n                      <div key={index} className=\"p-2 bg-gray-50 rounded text-sm\">\r\n                        <pre>{JSON.stringify(result, null, 2)}</pre>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"text-center text-muted-foreground py-8\">\r\n                    Execute a query to see results\r\n                  </div>\r\n                )}\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>Query History</CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"space-y-3\">\r\n                {queryHistory.map((query) => (\r\n                  <div key={query.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\r\n                    <div className=\"flex-1\">\r\n                      <div className=\"font-mono text-sm\">{query.query}</div>\r\n                      <div className=\"text-xs text-muted-foreground\">\r\n                        {query.executedAt} • {query.duration}ms • {query.results.length} rows\r\n                      </div>\r\n                    </div>\r\n                    <Button variant=\"ghost\" size=\"sm\" onClick={() => setCurrentQuery(query.query)}>\r\n                      Rerun\r\n                    </Button>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"analytics\" className=\"space-y-4\">\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n            <Card>\r\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n                <CardTitle className=\"text-sm font-medium\">Total Queries</CardTitle>\r\n                <Database className=\"h-4 w-4 text-muted-foreground\" />\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"text-2xl font-bold\">1,247</div>\r\n                <p className=\"text-xs text-muted-foreground\">+12% from last week</p>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            <Card>\r\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n                <CardTitle className=\"text-sm font-medium\">Avg Response Time</CardTitle>\r\n                <Activity className=\"h-4 w-4 text-muted-foreground\" />\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"text-2xl font-bold\">45ms</div>\r\n                <p className=\"text-xs text-muted-foreground\">-8% from last week</p>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            <Card>\r\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n                <CardTitle className=\"text-sm font-medium\">Active Connections</CardTitle>\r\n                <Server className=\"h-4 w-4 text-muted-foreground\" />\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"text-2xl font-bold\">8</div>\r\n                <p className=\"text-xs text-muted-foreground\">All systems operational</p>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            <Card>\r\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n                <CardTitle className=\"text-sm font-medium\">Data Volume</CardTitle>\r\n                <Database className=\"h-4 w-4 text-muted-foreground\" />\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"text-2xl font-bold\">2.4TB</div>\r\n                <p className=\"text-xs text-muted-foreground\">+5% from last month</p>\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"settings\" className=\"space-y-4\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>Database Configuration</CardTitle>\r\n            </CardHeader>\r\n            <CardContent className=\"space-y-4\">\r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                <div className=\"space-y-2\">\r\n                  <label className=\"text-sm font-medium\">Connection Pool Size</label>\r\n                  <Input type=\"number\" defaultValue=\"10\" />\r\n                </div>\r\n                <div className=\"space-y-2\">\r\n                  <label className=\"text-sm font-medium\">Query Timeout (ms)</label>\r\n                  <Input type=\"number\" defaultValue=\"30000\" />\r\n                </div>\r\n                <div className=\"space-y-2\">\r\n                  <label className=\"text-sm font-medium\">Max Retries</label>\r\n                  <Input type=\"number\" defaultValue=\"3\" />\r\n                </div>\r\n                <div className=\"space-y-2\">\r\n                  <label className=\"text-sm font-medium\">Backup Frequency</label>\r\n                  <Input defaultValue=\"Daily\" />\r\n                </div>\r\n              </div>\r\n              <Button className=\"w-full\">Save Configuration</Button>\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n      </Tabs>\r\n    </div>\r\n  );\r\n}"
}