{
  "originalPath": "src\\components\\BiddingCalculatorForm.tsx",
  "timestamp": "2025-10-15T16:14:06.204Z",
  "hash": "cdcf684cd279775beb3bc53d4400050b6a36a6db1d6f75b4d80adc3ef0ec57a9",
  "size": 22577,
  "content": "import React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from '@/components/ui/select';\r\nimport {\r\n  Calculator,\r\n  MapPin,\r\n  Camera,\r\n  FileText,\r\n  Building,\r\n  CheckCircle,\r\n} from 'lucide-react';\r\nimport CleaningServicesDropdown from './CleaningServicesDropdown';\r\nimport RoomScanner from './RoomScanner';\r\nimport AgreementGenerator from './AgreementGenerator';\r\nimport CameraMeasurementAI from './CameraMeasurementAI';\r\nimport AddressValidator from './AddressValidator';\r\nimport { supabase } from '@/lib/supabase';\r\n\r\ninterface BidData {\r\n  clientName: string;\r\n  clientEmail: string;\r\n  clientPhone: string;\r\n  propertyAddress: string;\r\n  zipCode: string;\r\n  squareFootage: number;\r\n  selectedServices: any[];\r\n  totalEstimate: number;\r\n  estimatedHours: number;\r\n}\r\n\r\nexport default function BiddingCalculatorForm() {\r\n  const [activeTab, setActiveTab] = useState('calculator');\r\n  const [formData, setFormData] = useState({\r\n    clientName: '',\r\n    clientEmail: '',\r\n    clientPhone: '',\r\n    propertyAddress: '',\r\n    zipCode: '',\r\n    manualSquareFootage: '',\r\n    propertyType: '',\r\n    serviceFrequency: '',\r\n    cleaningType: '',\r\n    buildingAge: '',\r\n    selectedServices: [] as any[],\r\n    specialRequirements: [] as string[],\r\n  });\r\n\r\n  const [publicRecordsData, setPublicRecordsData] = useState<any>(null);\r\n  const [isLoadingRecords, setIsLoadingRecords] = useState(false);\r\n  const [cameraData, setCameraData] = useState<any[]>([]);\r\n  const [bidResults, setBidResults] = useState<BidData | null>(null);\r\n  const [validatedAddress, setValidatedAddress] = useState<any>(null);\r\n\r\n  const handleAddressValidated = (addressData: any) => {\r\n    setValidatedAddress(addressData);\r\n    if (addressData.validated && addressData.standardized) {\r\n      setFormData(prev => ({\r\n        ...prev,\r\n        propertyAddress: addressData.standardized.street,\r\n        zipCode: addressData.standardized.zipCode,\r\n      }));\r\n    }\r\n  };\r\n\r\n  const fetchPublicRecords = async () => {\r\n    if (!formData.propertyAddress || !formData.zipCode) return;\r\n\r\n    setIsLoadingRecords(true);\r\n    try {\r\n      const { data, error } = await supabase.functions.invoke(\r\n        'public-records-api',\r\n        {\r\n          body: {\r\n            address: formData.propertyAddress,\r\n            zipCode: formData.zipCode,\r\n          },\r\n        }\r\n      );\r\n\r\n      if (error) throw error;\r\n      setPublicRecordsData(data.data);\r\n    } catch (error) {\r\n      console.error('Error fetching public records:', error);\r\n    } finally {\r\n      setIsLoadingRecords(false);\r\n    }\r\n  };\r\n  const calculateBid = () => {\r\n    const totalSquareFootage =\r\n      publicRecordsData?.squareFootage ||\r\n      parseInt(formData.manualSquareFootage) ||\r\n      cameraData.reduce((sum, room) => sum + (room?.area || 0), 0) ||\r\n      0;\r\n\r\n    const totalServices = (formData.selectedServices || []).length || 0;\r\n    const baseRate = 0.15; // $0.15 per sq ft base rate\r\n    const serviceMultiplier = 1 + totalServices * 0.1;\r\n\r\n    const estimate = (totalSquareFootage || 0) * baseRate * serviceMultiplier;\r\n    const hours = Math.ceil((totalSquareFootage || 0) / 500) + totalServices;\r\n\r\n    const bidData: BidData = {\r\n      clientName: formData.clientName || '',\r\n      clientEmail: formData.clientEmail || '',\r\n      clientPhone: formData.clientPhone || '',\r\n      propertyAddress: formData.propertyAddress || '',\r\n      zipCode: formData.zipCode || '',\r\n      squareFootage: totalSquareFootage || 0,\r\n      selectedServices: formData.selectedServices || [],\r\n      totalEstimate: Math.round(estimate || 0),\r\n      estimatedHours: hours || 0,\r\n    };\r\n\r\n    setBidResults(bidData);\r\n  };\r\n\r\n  const TabButton = ({\r\n    id,\r\n    label,\r\n    icon,\r\n  }: {\r\n    id: string;\r\n    label: string;\r\n    icon: React.ReactNode;\r\n  }) => (\r\n    <button\r\n      onClick={() => setActiveTab(id)}\r\n      className={`flex items-center gap-2 px-4 py-2 rounded-lg transition-colors ${\r\n        activeTab === id\r\n          ? 'bg-blue-600 text-white'\r\n          : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\r\n      }`}\r\n    >\r\n      {icon}\r\n      {label}\r\n    </button>\r\n  );\r\n\r\n  return (\r\n    <div className='w-full max-w-6xl mx-auto space-y-6'>\r\n      <div className='flex flex-wrap gap-2 justify-center'>\r\n        <TabButton\r\n          id='calculator'\r\n          label='Calculator'\r\n          icon={<Calculator className='h-4 w-4' />}\r\n        />\r\n        <TabButton\r\n          id='address'\r\n          label='Address Validation'\r\n          icon={<CheckCircle className='h-4 w-4' />}\r\n        />\r\n        <TabButton\r\n          id='camera'\r\n          label='Camera Scan'\r\n          icon={<Camera className='h-4 w-4' />}\r\n        />\r\n        <TabButton\r\n          id='records'\r\n          label='Property Data'\r\n          icon={<Building className='h-4 w-4' />}\r\n        />\r\n        <TabButton\r\n          id='agreement'\r\n          label='Agreement'\r\n          icon={<FileText className='h-4 w-4' />}\r\n        />\r\n      </div>\r\n\r\n      {activeTab === 'calculator' && (\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className='flex items-center gap-2'>\r\n              <Calculator className='h-5 w-5' />\r\n              Bidding Calculator\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent className='space-y-6'>\r\n            <div className='grid grid-cols-1 md:grid-cols-2 gap-4'>\r\n              <div>\r\n                <Label htmlFor='clientName'>Client Name</Label>\r\n                <Input\r\n                  id='clientName'\r\n                  value={formData.clientName}\r\n                  onChange={e =>\r\n                    setFormData(prev => ({\r\n                      ...prev,\r\n                      clientName: e.target.value,\r\n                    }))\r\n                  }\r\n                />\r\n              </div>\r\n              <div>\r\n                <Label htmlFor='clientEmail'>Client Email</Label>\r\n                <Input\r\n                  id='clientEmail'\r\n                  type='email'\r\n                  value={formData.clientEmail}\r\n                  onChange={e =>\r\n                    setFormData(prev => ({\r\n                      ...prev,\r\n                      clientEmail: e.target.value,\r\n                    }))\r\n                  }\r\n                />\r\n              </div>\r\n              <div>\r\n                <Label htmlFor='clientPhone'>Client Phone</Label>\r\n                <Input\r\n                  id='clientPhone'\r\n                  value={formData.clientPhone}\r\n                  onChange={e =>\r\n                    setFormData(prev => ({\r\n                      ...prev,\r\n                      clientPhone: e.target.value,\r\n                    }))\r\n                  }\r\n                />\r\n              </div>\r\n              <div>\r\n                <Label htmlFor='manualSquareFootage'>\r\n                  Manual Square Footage (optional)\r\n                </Label>\r\n                <Input\r\n                  id='manualSquareFootage'\r\n                  type='number'\r\n                  value={formData.manualSquareFootage}\r\n                  onChange={e =>\r\n                    setFormData(prev => ({\r\n                      ...prev,\r\n                      manualSquareFootage: e.target.value,\r\n                    }))\r\n                  }\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <div className='grid grid-cols-1 md:grid-cols-2 gap-4'>\r\n              <div>\r\n                <Label htmlFor='propertyAddress'>Property Address</Label>\r\n                <Input\r\n                  id='propertyAddress'\r\n                  value={formData.propertyAddress}\r\n                  onChange={e =>\r\n                    setFormData(prev => ({\r\n                      ...prev,\r\n                      propertyAddress: e.target.value,\r\n                    }))\r\n                  }\r\n                  placeholder='Street address for public records lookup'\r\n                />\r\n              </div>\r\n              <div className='flex gap-2'>\r\n                <div className='flex-1'>\r\n                  <Label htmlFor='zipCode'>ZIP Code</Label>\r\n                  <Input\r\n                    id='zipCode'\r\n                    value={formData.zipCode}\r\n                    onChange={e =>\r\n                      setFormData(prev => ({\r\n                        ...prev,\r\n                        zipCode: e.target.value,\r\n                      }))\r\n                    }\r\n                  />\r\n                </div>\r\n                <div className='flex items-end'>\r\n                  <Button\r\n                    onClick={fetchPublicRecords}\r\n                    disabled={\r\n                      isLoadingRecords ||\r\n                      !formData.propertyAddress ||\r\n                      !formData.zipCode\r\n                    }\r\n                    className='flex items-center gap-2'\r\n                  >\r\n                    <MapPin className='h-4 w-4' />\r\n                    {isLoadingRecords ? 'Loading...' : 'Lookup'}\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {publicRecordsData && (\r\n              <div className='p-4 bg-green-50 border border-green-200 rounded-lg'>\r\n                <h4 className='font-semibold text-green-800 mb-2'>\r\n                  Property Data Found\r\n                </h4>\r\n                <div className='grid grid-cols-2 md:grid-cols-4 gap-4 text-sm'>\r\n                  <div>\r\n                    <span className='text-green-600'>Square Footage:</span>\r\n                    <div className='font-semibold'>\r\n                      {publicRecordsData.squareFootage} sq ft\r\n                    </div>\r\n                  </div>\r\n                  <div>\r\n                    <span className='text-green-600'>Property Type:</span>\r\n                    <div className='font-semibold'>\r\n                      {publicRecordsData.propertyType}\r\n                    </div>\r\n                  </div>\r\n                  <div>\r\n                    <span className='text-green-600'>Year Built:</span>\r\n                    <div className='font-semibold'>\r\n                      {publicRecordsData.yearBuilt}\r\n                    </div>\r\n                  </div>\r\n                  <div>\r\n                    <span className='text-green-600'>Cleaning Complexity:</span>\r\n                    <Badge className='text-xs'>\r\n                      {publicRecordsData.cleaningComplexity}\r\n                    </Badge>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            {/* Dropdown Selection Section */}\r\n            <div className='p-4 bg-gray-50 border border-gray-200 rounded-lg'>\r\n              <div className='grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4'>\r\n                <div>\r\n                  <Label>Property Type</Label>\r\n                  <Select\r\n                    value={formData.propertyType}\r\n                    onValueChange={value =>\r\n                      setFormData(prev => ({ ...prev, propertyType: value }))\r\n                    }\r\n                  >\r\n                    <SelectTrigger>\r\n                      <SelectValue placeholder='Select property type' />\r\n                    </SelectTrigger>\r\n                    <SelectContent>\r\n                      <SelectItem value='office'>Office Building</SelectItem>\r\n                      <SelectItem value='retail'>Retail Space</SelectItem>\r\n                      <SelectItem value='warehouse'>Warehouse</SelectItem>\r\n                      <SelectItem value='medical'>Medical Facility</SelectItem>\r\n                      <SelectItem value='restaurant'>Restaurant</SelectItem>\r\n                      <SelectItem value='school'>School/Educational</SelectItem>\r\n                      <SelectItem value='residential'>Residential</SelectItem>\r\n                      <SelectItem value='industrial'>Industrial</SelectItem>\r\n                    </SelectContent>\r\n                  </Select>\r\n                </div>\r\n\r\n                <div>\r\n                  <Label>Service Frequency</Label>\r\n                  <Select\r\n                    value={formData.serviceFrequency}\r\n                    onValueChange={value =>\r\n                      setFormData(prev => ({\r\n                        ...prev,\r\n                        serviceFrequency: value,\r\n                      }))\r\n                    }\r\n                  >\r\n                    <SelectTrigger>\r\n                      <SelectValue placeholder='Select frequency' />\r\n                    </SelectTrigger>\r\n                    <SelectContent>\r\n                      <SelectItem value='daily'>Daily</SelectItem>\r\n                      <SelectItem value='weekly'>Weekly</SelectItem>\r\n                      <SelectItem value='bi-weekly'>Bi-Weekly</SelectItem>\r\n                      <SelectItem value='monthly'>Monthly</SelectItem>\r\n                      <SelectItem value='one-time'>One-Time</SelectItem>\r\n                      <SelectItem value='as-needed'>As Needed</SelectItem>\r\n                    </SelectContent>\r\n                  </Select>\r\n                </div>\r\n\r\n                <div>\r\n                  <Label>Cleaning Type</Label>\r\n                  <Select\r\n                    value={formData.cleaningType}\r\n                    onValueChange={value =>\r\n                      setFormData(prev => ({ ...prev, cleaningType: value }))\r\n                    }\r\n                  >\r\n                    <SelectTrigger>\r\n                      <SelectValue placeholder='Select cleaning type' />\r\n                    </SelectTrigger>\r\n                    <SelectContent>\r\n                      <SelectItem value='standard'>\r\n                        Standard Cleaning\r\n                      </SelectItem>\r\n                      <SelectItem value='deep'>Deep Cleaning</SelectItem>\r\n                      <SelectItem value='post-construction'>\r\n                        Post-Construction\r\n                      </SelectItem>\r\n                      <SelectItem value='move-out'>\r\n                        Move-Out Cleaning\r\n                      </SelectItem>\r\n                      <SelectItem value='carpet'>Carpet Cleaning</SelectItem>\r\n                      <SelectItem value='window'>Window Cleaning</SelectItem>\r\n                      <SelectItem value='pressure-wash'>\r\n                        Pressure Washing\r\n                      </SelectItem>\r\n                    </SelectContent>\r\n                  </Select>\r\n                </div>\r\n\r\n                <div>\r\n                  <Label>Building Age</Label>\r\n                  <Select\r\n                    value={formData.buildingAge}\r\n                    onValueChange={value =>\r\n                      setFormData(prev => ({ ...prev, buildingAge: value }))\r\n                    }\r\n                  >\r\n                    <SelectTrigger>\r\n                      <SelectValue placeholder='Select building age' />\r\n                    </SelectTrigger>\r\n                    <SelectContent>\r\n                      <SelectItem value='new'>0-5 Years</SelectItem>\r\n                      <SelectItem value='recent'>6-15 Years</SelectItem>\r\n                      <SelectItem value='established'>16-30 Years</SelectItem>\r\n                      <SelectItem value='older'>31-50 Years</SelectItem>\r\n                      <SelectItem value='historic'>50+ Years</SelectItem>\r\n                    </SelectContent>\r\n                  </Select>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div className='space-y-4'>\r\n              <label className='block text-sm font-medium text-gray-700'>\r\n                Select Cleaning Services\r\n              </label>\r\n              <CleaningServicesDropdown\r\n                selectedServices={formData.selectedServices}\r\n                onServicesChange={services =>\r\n                  setFormData(prev => ({ ...prev, selectedServices: services }))\r\n                }\r\n              />\r\n            </div>\r\n\r\n            <div className='flex gap-4'>\r\n              <Button onClick={calculateBid} className='flex-1'>\r\n                Calculate Bid\r\n              </Button>\r\n              <Button onClick={() => setActiveTab('camera')} variant='outline'>\r\n                Use Camera Scan\r\n              </Button>\r\n            </div>\r\n\r\n            {bidResults && (\r\n              <div className='p-4 bg-blue-50 border border-blue-200 rounded-lg'>\r\n                <h4 className='font-semibold text-blue-800 mb-2'>\r\n                  Bid Results\r\n                </h4>\r\n                <div className='grid grid-cols-2 md:grid-cols-4 gap-4'>\r\n                  <div>\r\n                    <span className='text-blue-600'>Total Area:</span>\r\n                    <div className='font-semibold'>\r\n                      {bidResults.squareFootage} sq ft\r\n                    </div>\r\n                  </div>\r\n                  <div>\r\n                    <span className='text-blue-600'>Services:</span>\r\n                    <div className='font-semibold'>\r\n                      {bidResults.selectedServices.length}\r\n                    </div>\r\n                  </div>\r\n                  <div>\r\n                    <span className='text-blue-600'>Est. Hours:</span>\r\n                    <div className='font-semibold'>\r\n                      {bidResults.estimatedHours} hrs\r\n                    </div>\r\n                  </div>\r\n                  <div>\r\n                    <span className='text-blue-600'>Total Estimate:</span>\r\n                    <div className='font-semibold text-lg'>\r\n                      ${bidResults.totalEstimate}\r\n                    </div>\r\n                    <div className='font-semibold text-lg'>\r\n                      $\r\n                      {(typeof bidResults.totalEstimate === 'number' &&\r\n                      !isNaN(bidResults.totalEstimate)\r\n                        ? bidResults.totalEstimate\r\n                        : 0\r\n                      ).toFixed(2)}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n\r\n      {activeTab === 'address' && (\r\n        <AddressValidator\r\n          onAddressValidated={handleAddressValidated}\r\n          initialAddress={{\r\n            street: formData.propertyAddress,\r\n            zipCode: formData.zipCode,\r\n          }}\r\n        />\r\n      )}\r\n\r\n      {activeTab === 'camera' && (\r\n        <CameraMeasurementAI onMeasurementComplete={setCameraData} />\r\n      )}\r\n      {activeTab === 'records' && (\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className='flex items-center gap-2'>\r\n              <Building className='h-5 w-5' />\r\n              Public Records Data\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            {publicRecordsData ? (\r\n              <div className='space-y-4'>\r\n                <div className='grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4'>\r\n                  <div className='p-4 border rounded-lg'>\r\n                    <h4 className='font-semibold mb-2'>Property Details</h4>\r\n                    <div className='space-y-2 text-sm'>\r\n                      <div>\r\n                        Square Footage: {publicRecordsData.squareFootage} sq ft\r\n                      </div>\r\n                      <div>Property Type: {publicRecordsData.propertyType}</div>\r\n                      <div>Year Built: {publicRecordsData.yearBuilt}</div>\r\n                      <div>Lot Size: {publicRecordsData.lotSize} sq ft</div>\r\n                    </div>\r\n                  </div>\r\n                  <div className='p-4 border rounded-lg'>\r\n                    <h4 className='font-semibold mb-2'>Cleaning Assessment</h4>\r\n                    <div className='space-y-2 text-sm'>\r\n                      <div>\r\n                        Complexity:{' '}\r\n                        <Badge>{publicRecordsData.cleaningComplexity}</Badge>\r\n                      </div>\r\n                      <div>\r\n                        Est. Time: {publicRecordsData.estimatedCleaningTime}{' '}\r\n                        hours\r\n                      </div>\r\n                      <div>\r\n                        Total Rooms: {publicRecordsData.floorPlan?.totalRooms}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div className='p-4 border rounded-lg'>\r\n                    <h4 className='font-semibold mb-2'>Special Requirements</h4>\r\n                    <div className='space-y-1 text-sm'>\r\n                      {publicRecordsData.specialRequirements?.map(\r\n                        (req: string, i: number) => (\r\n                          <div key={i}>• {req}</div>\r\n                        )\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ) : (\r\n              <div className='text-center py-8 text-gray-500'>\r\n                Enter property address and ZIP code in the calculator tab to\r\n                fetch public records data\r\n              </div>\r\n            )}\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n\r\n      {activeTab === 'agreement' && (\r\n        <AgreementGenerator\r\n          agreementData={\r\n            bidResults\r\n              ? {\r\n                  clientName: bidResults.clientName,\r\n                  clientEmail: bidResults.clientEmail,\r\n                  clientPhone: bidResults.clientPhone,\r\n                  propertyAddress: bidResults.propertyAddress,\r\n                  squareFootage: bidResults.squareFootage,\r\n                  services: bidResults.selectedServices.map(service => ({\r\n                    name: service,\r\n                    frequency: 'Weekly',\r\n                    rate: Math.round(\r\n                      bidResults.totalEstimate /\r\n                        bidResults.selectedServices.length\r\n                    ),\r\n                    difficulty: 'Medium',\r\n                  })),\r\n                  totalMonthlyRate: bidResults.totalEstimate,\r\n                  startDate: '',\r\n                  contractLength: '12 months',\r\n                }\r\n              : undefined\r\n          }\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"
}