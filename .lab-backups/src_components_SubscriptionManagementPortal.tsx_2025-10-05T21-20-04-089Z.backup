{
  "originalPath": "src\\components\\SubscriptionManagementPortal.tsx",
  "timestamp": "2025-10-05T21:20:04.089Z",
  "hash": "8216309cdb0f89dbe4e3ffd52fce71551d665a51b73e5bf813994a06d59cd6df",
  "size": 7606,
  "content": "import React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { supabase } from '@/lib/supabase';\r\nimport {\r\n  CreditCard,\r\n  Calendar,\r\n  TrendingUp,\r\n  AlertCircle,\r\n  CheckCircle,\r\n  Crown,\r\n  Star,\r\n  Zap,\r\n} from 'lucide-react';\r\n\r\ninterface Subscription {\r\n  id: string;\r\n  tier: string;\r\n  status: string;\r\n  current_period_start: string;\r\n  current_period_end: string;\r\n  stripe_subscription_id?: string;\r\n  cancel_at_period_end: boolean;\r\n}\r\n\r\nconst TIER_CONFIG = {\r\n  free: { name: 'Free', icon: Zap, color: 'bg-gray-500', price: '$0' },\r\n  basic: { name: 'Basic', icon: Star, color: 'bg-blue-500', price: '$29' },\r\n  pro: { name: 'Pro', icon: TrendingUp, color: 'bg-purple-500', price: '$99' },\r\n  ultimate: {\r\n    name: 'Ultimate',\r\n    icon: Crown,\r\n    color: 'bg-gold-500',\r\n    price: '$299',\r\n  },\r\n};\r\n\r\nexport default function SubscriptionManagementPortal() {\r\n  const [subscription, setSubscription] = useState<Subscription | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [user, setUser] = useState<any>(null);\r\n\r\n  useEffect(() => {\r\n    loadSubscription();\r\n  }, []);\r\n\r\n  const loadSubscription = async () => {\r\n    try {\r\n      const {\r\n        data: { user },\r\n      } = await supabase.auth.getUser();\r\n      if (!user) return;\r\n\r\n      setUser(user);\r\n\r\n      const { data } = await supabase\r\n        .from('subscriptions')\r\n        .select('*')\r\n        .eq('user_id', user.id)\r\n        .single();\r\n\r\n      setSubscription(data);\r\n    } catch (error) {\r\n      console.error('Error loading subscription:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleUpgrade = async (tier: string) => {\r\n    try {\r\n      const { data } = await supabase.functions.invoke(\r\n        'ai-research-payment-processor',\r\n        {\r\n          body: { type: 'subscription', tier, action: 'upgrade' },\r\n        }\r\n      );\r\n\r\n      if (data?.url) {\r\n        window.location.href = data.url;\r\n      }\r\n    } catch (error) {\r\n      console.error('Upgrade error:', error);\r\n    }\r\n  };\r\n\r\n  const handleCancelSubscription = async () => {\r\n    if (!subscription?.stripe_subscription_id) return;\r\n\r\n    try {\r\n      await supabase.functions.invoke('ai-research-payment-processor', {\r\n        body: {\r\n          type: 'subscription',\r\n          action: 'cancel',\r\n          subscription_id: subscription.stripe_subscription_id,\r\n        },\r\n      });\r\n\r\n      await loadSubscription();\r\n    } catch (error) {\r\n      console.error('Cancel error:', error);\r\n    }\r\n  };\r\n\r\n  if (loading) return <div className='animate-pulse'>Loading...</div>;\r\n\r\n  const currentTier = subscription?.tier || 'free';\r\n  const tierConfig = TIER_CONFIG[currentTier as keyof typeof TIER_CONFIG];\r\n  const Icon = tierConfig?.icon || Zap;\r\n\r\n  return (\r\n    <div className='space-y-6'>\r\n      <div className='text-center'>\r\n        <h2 className='text-3xl font-bold mb-2'>Subscription Management</h2>\r\n        <p className='text-gray-600'>\r\n          Manage your AI research subscription and billing\r\n        </p>\r\n      </div>\r\n\r\n      {/* Current Plan */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className='flex items-center gap-2'>\r\n            <Icon className='h-5 w-5' />\r\n            Current Plan: {tierConfig?.name}\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent className='space-y-4'>\r\n          <div className='flex items-center justify-between'>\r\n            <div>\r\n              <Badge className={`${tierConfig?.color} text-white`}>\r\n                {subscription?.status || 'Active'}\r\n              </Badge>\r\n              <p className='text-2xl font-bold mt-2'>\r\n                {tierConfig?.price}/month\r\n              </p>\r\n            </div>\r\n            {subscription?.status === 'active' && (\r\n              <div className='text-right'>\r\n                <p className='text-sm text-gray-600'>Next billing</p>\r\n                <p className='font-semibold'>\r\n                  {subscription?.current_period_end\r\n                    ? new Date(\r\n                        subscription.current_period_end\r\n                      ).toLocaleDateString()\r\n                    : 'N/A'}\r\n                </p>\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          {subscription?.cancel_at_period_end && (\r\n            <div className='bg-orange-50 border border-orange-200 rounded-lg p-4'>\r\n              <div className='flex items-center gap-2'>\r\n                <AlertCircle className='h-4 w-4 text-orange-600' />\r\n                <p className='text-orange-800'>\r\n                  Your subscription will cancel at the end of the current period\r\n                </p>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Upgrade Options */}\r\n      <div className='grid gap-4 md:grid-cols-2 lg:grid-cols-4'>\r\n        {Object.entries(TIER_CONFIG).map(([tier, config]) => {\r\n          const TierIcon = config.icon;\r\n          const isCurrent = tier === currentTier;\r\n\r\n          return (\r\n            <Card\r\n              key={tier}\r\n              className={isCurrent ? 'ring-2 ring-purple-500' : ''}\r\n            >\r\n              <CardContent className='p-6 text-center'>\r\n                <TierIcon className='h-8 w-8 mx-auto mb-2 text-gray-600' />\r\n                <h3 className='font-semibold'>{config.name}</h3>\r\n                <p className='text-2xl font-bold text-purple-600'>\r\n                  {config.price}\r\n                </p>\r\n                <p className='text-sm text-gray-600 mb-4'>per month</p>\r\n\r\n                {isCurrent ? (\r\n                  <Badge className='bg-green-500 text-white'>\r\n                    <CheckCircle className='h-3 w-3 mr-1' />\r\n                    Current Plan\r\n                  </Badge>\r\n                ) : (\r\n                  <Button\r\n                    onClick={() => handleUpgrade(tier)}\r\n                    className='w-full'\r\n                    variant={tier === 'ultimate' ? 'default' : 'outline'}\r\n                  >\r\n                    {tier === 'free' ? 'Downgrade' : 'Upgrade'}\r\n                  </Button>\r\n                )}\r\n              </CardContent>\r\n            </Card>\r\n          );\r\n        })}\r\n      </div>\r\n\r\n      {/* Billing Actions */}\r\n      {subscription?.status === 'active' && currentTier !== 'free' && (\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className='flex items-center gap-2'>\r\n              <CreditCard className='h-5 w-5' />\r\n              Billing Actions\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent className='space-y-4'>\r\n            <div className='flex gap-4'>\r\n              <Button variant='outline'>\r\n                <Calendar className='mr-2 h-4 w-4' />\r\n                View Billing History\r\n              </Button>\r\n              <Button variant='outline'>\r\n                <CreditCard className='mr-2 h-4 w-4' />\r\n                Update Payment Method\r\n              </Button>\r\n              <Button\r\n                variant='destructive'\r\n                onClick={handleCancelSubscription}\r\n                disabled={subscription?.cancel_at_period_end}\r\n              >\r\n                <span className='md:hidden'>Cancel</span>\r\n                <span className='hidden md:inline'>Cancel Subscription</span>\r\n              </Button>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"
}