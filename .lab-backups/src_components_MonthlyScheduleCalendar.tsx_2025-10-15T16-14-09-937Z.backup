{
  "originalPath": "src\\components\\MonthlyScheduleCalendar.tsx",
  "timestamp": "2025-10-15T16:14:09.937Z",
  "hash": "9082dfd7099a2fbfa7b37d11509d749409e1852536721e8526378216291c271e",
  "size": 21272,
  "content": "import React, { useState, useEffect } from 'react';\r\nimport { Dialog } from './ui/dialog';\r\nimport { Input } from './ui/input';\r\nimport { Label } from './ui/label';\r\nimport {\r\n  getCalendars,\r\n  createCalendar,\r\n  getCalendarEvents,\r\n} from '@/services/calendarService';\r\nimport { CalendarEvent, Calendar as CustomCalendar } from '@/types/calendar';\r\nimport {\r\n  Calendar,\r\n  ChevronLeft,\r\n  ChevronRight,\r\n  Clock,\r\n  User,\r\n  Plus,\r\n  UserPlus,\r\n} from 'lucide-react';\r\nimport { Button } from './ui/button';\r\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card';\r\nimport { supabase } from '@/lib/supabase';\r\nimport SchedulePopup from './SchedulePopup';\r\nimport AddEmployeePopup from './AddEmployeePopup';\r\n\r\ninterface Employee {\r\n  id: string;\r\n  name: string;\r\n  department: string;\r\n  position: string;\r\n}\r\n\r\ninterface Shift {\r\n  id: string;\r\n  employeeId: string;\r\n  employeeName: string;\r\n  date: string;\r\n  startTime: string;\r\n  endTime: string;\r\n  department: string;\r\n  position: string;\r\n  location?: string;\r\n  notes?: string;\r\n}\r\n\r\nexport default function MonthlyScheduleCalendar() {\r\n  // All state declarations at the top, before any usage\r\n  const [calendarEvents, setCalendarEvents] = useState<CalendarEvent[]>([]);\r\n  const [eventsLoading, setEventsLoading] = useState(false);\r\n  const [showAddCalendar, setShowAddCalendar] = useState(false);\r\n  const [newCalendarName, setNewCalendarName] = useState('');\r\n  const [newCalendarColor, setNewCalendarColor] = useState('#3b82f6');\r\n  const [addingCalendar, setAddingCalendar] = useState(false);\r\n  const [calendars, setCalendars] = useState<CustomCalendar[]>([]);\r\n  const [selectedCalendars, setSelectedCalendars] = useState<string[]>([]);\r\n  const [calendarLoading, setCalendarLoading] = useState(false);\r\n  const [currentDate, setCurrentDate] = useState(new Date());\r\n\r\n  // Load events for selected calendars\r\n  useEffect(() => {\r\n    if (selectedCalendars.length === 0) {\r\n      setCalendarEvents([]);\r\n      return;\r\n    }\r\n    setEventsLoading(true);\r\n    Promise.all(selectedCalendars.map(id => getCalendarEvents(id)))\r\n      .then(results => {\r\n        // Flatten and merge all events\r\n        setCalendarEvents(results.flat());\r\n      })\r\n      .catch(e => {\r\n        setCalendarEvents([]);\r\n        console.error('Error loading calendar events', e);\r\n      })\r\n      .finally(() => setEventsLoading(false));\r\n  }, [selectedCalendars]);\r\n\r\n  const handleAddCalendar = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    if (!newCalendarName.trim()) return;\r\n    setAddingCalendar(true);\r\n    try {\r\n      const cal = await createCalendar({\r\n        name: newCalendarName,\r\n        color: newCalendarColor,\r\n        type: 'custom',\r\n      });\r\n      setCalendars([...calendars, cal]);\r\n      setSelectedCalendars([...selectedCalendars, cal.id]);\r\n      setShowAddCalendar(false);\r\n      setNewCalendarName('');\r\n      setNewCalendarColor('#3b82f6');\r\n    } catch (e) {\r\n      alert('Failed to add calendar');\r\n    } finally {\r\n      setAddingCalendar(false);\r\n    }\r\n  };\r\n\r\n  const [employees, setEmployees] = useState<Employee[]>([]);\r\n  const [shifts, setShifts] = useState<Shift[]>([]);\r\n  const [selectedEmployee, setSelectedEmployee] = useState<Employee | null>(\r\n    null\r\n  );\r\n  const [showPopup, setShowPopup] = useState(false);\r\n  const [selectedDateForPopup, setSelectedDateForPopup] = useState<string>('');\r\n  const [selectedShift, setSelectedShift] = useState<Shift | null>(null);\r\n  const [showAddEmployee, setShowAddEmployee] = useState(false);\r\n\r\n  // Place loadAllCalendars above useEffect to avoid dependency warning\r\n  useEffect(() => {\r\n    loadEmployees();\r\n    loadShifts();\r\n    loadAllCalendars();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const loadAllCalendars = async () => {\r\n    setCalendarLoading(true);\r\n    try {\r\n      const cals = await getCalendars();\r\n      setCalendars(cals);\r\n      // Auto-select first calendar if none selected\r\n      if (cals.length && selectedCalendars.length === 0) {\r\n        setSelectedCalendars([cals[0].id]);\r\n      }\r\n    } catch (e) {\r\n      console.error('Error loading calendars', e);\r\n    } finally {\r\n      setCalendarLoading(false);\r\n    }\r\n  };\r\n\r\n  const loadEmployees = async () => {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('employees')\r\n        .select('*')\r\n        .order('name');\r\n\r\n      if (!error && data) {\r\n        setEmployees(data);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading employees:', error);\r\n    }\r\n  };\r\n\r\n  const loadShifts = async () => {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('employee_shifts')\r\n        .select('*')\r\n        .order('date');\r\n\r\n      if (!error && data) {\r\n        setShifts(data);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading shifts:', error);\r\n    }\r\n  };\r\n\r\n  const getDaysInMonth = (date: Date) => {\r\n    const year = date.getFullYear();\r\n    const month = date.getMonth();\r\n    const firstDay = new Date(year, month, 1);\r\n    const lastDay = new Date(year, month + 1, 0);\r\n    const daysInMonth = lastDay.getDate();\r\n    const startingDayOfWeek = firstDay.getDay();\r\n\r\n    const days = [];\r\n\r\n    // Add empty cells for days before the first day of the month\r\n    for (let i = 0; i < startingDayOfWeek; i++) {\r\n      days.push(null);\r\n    }\r\n\r\n    // Add all days of the month\r\n    for (let day = 1; day <= daysInMonth; day++) {\r\n      days.push(new Date(year, month, day));\r\n    }\r\n\r\n    return days;\r\n  };\r\n\r\n  const assignShift = async (date: Date, timeSlot: string) => {\r\n    if (!selectedEmployee) return;\r\n\r\n    const dateStr = date.toISOString().split('T')[0];\r\n    const [startTime, endTime] = timeSlot.split('-');\r\n\r\n    try {\r\n      const shiftData = {\r\n        employeeId: selectedEmployee.id,\r\n        employeeName: selectedEmployee.name,\r\n        date: dateStr,\r\n        startTime: startTime.trim(),\r\n        endTime: endTime.trim(),\r\n        department: selectedEmployee.department,\r\n        position: selectedEmployee.position,\r\n        status: 'scheduled',\r\n      };\r\n\r\n      const { data, error } = await supabase\r\n        .from('employee_shifts')\r\n        .insert([shiftData])\r\n        .select()\r\n        .single();\r\n\r\n      if (!error && data) {\r\n        setShifts([...shifts, data]);\r\n        setSelectedEmployee(null);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error assigning shift:', error);\r\n    }\r\n  };\r\n\r\n  // Combine legacy shifts and new calendar events for now, tagging type\r\n  const getEventsForDate = (date: Date) => {\r\n    const dateStr = date.toISOString().split('T')[0];\r\n    // Calendar events (from selected calendars)\r\n    const events = calendarEvents\r\n      .filter(ev => ev.start.split('T')[0] === dateStr)\r\n      .map(ev => ({ ...ev, _type: 'calendar' as const }));\r\n    // Legacy shifts (for backward compatibility)\r\n    const legacy = shifts\r\n      .filter(shift => shift.date === dateStr)\r\n      .map(shift => ({ ...shift, _type: 'shift' as const }));\r\n    return [...events, ...legacy];\r\n  };\r\n\r\n  const monthNames = [\r\n    'January',\r\n    'February',\r\n    'March',\r\n    'April',\r\n    'May',\r\n    'June',\r\n    'July',\r\n    'August',\r\n    'September',\r\n    'October',\r\n    'November',\r\n    'December',\r\n  ];\r\n\r\n  const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n  // Remove automatic time slots - user will assign manually\r\n\r\n  const days = getDaysInMonth(currentDate);\r\n\r\n  const navigateMonth = (direction: number) => {\r\n    const newDate = new Date(currentDate);\r\n    newDate.setMonth(currentDate.getMonth() + direction);\r\n    setCurrentDate(newDate);\r\n  };\r\n\r\n  // Calendar selection UI (simple dropdown for now)\r\n  return (\r\n    <div className='flex flex-col md:flex-row h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-indigo-900'>\r\n      {/* Calendar Selection */}\r\n      <div className='w-full md:w-80 bg-black/30 border-b md:border-b-0 md:border-r border-white/10 p-4'>\r\n        <div className='mb-4'>\r\n          <div className='flex items-center justify-between mb-2'>\r\n            <label className='block text-white font-semibold'>\r\n              Select Calendars\r\n            </label>\r\n            <button\r\n              className='text-xs px-2 py-1 rounded bg-blue-600 text-white hover:bg-blue-700'\r\n              onClick={() => setShowAddCalendar(true)}\r\n              type='button'\r\n            >\r\n              + Add New\r\n            </button>\r\n          </div>\r\n          <select\r\n            multiple\r\n            className='w-full rounded p-2 bg-slate-800 text-white border border-white/20'\r\n            value={selectedCalendars}\r\n            onChange={e => {\r\n              const options = Array.from(e.target.selectedOptions).map(\r\n                o => o.value\r\n              );\r\n              setSelectedCalendars(options);\r\n            }}\r\n            disabled={calendarLoading}\r\n          >\r\n            {calendars.map(cal => (\r\n              <option\r\n                key={cal.id}\r\n                value={cal.id}\r\n                style={{ color: cal.color || undefined }}\r\n              >\r\n                {cal.name}\r\n              </option>\r\n            ))}\r\n          </select>\r\n          {calendarLoading && (\r\n            <div className='text-xs text-gray-300 mt-1'>\r\n              Loading calendars...\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {/* Add Calendar Modal */}\r\n        <Dialog open={showAddCalendar} onOpenChange={setShowAddCalendar}>\r\n          <form\r\n            onSubmit={handleAddCalendar}\r\n            className='bg-white p-6 rounded shadow max-w-xs mx-auto'\r\n          >\r\n            <h2 className='font-bold mb-4'>Add New Calendar</h2>\r\n            <div className='mb-3'>\r\n              <Label htmlFor='calendar-name'>Name</Label>\r\n              <Input\r\n                id='calendar-name'\r\n                value={newCalendarName}\r\n                onChange={e => setNewCalendarName(e.target.value)}\r\n                required\r\n                className='w-full'\r\n              />\r\n            </div>\r\n            <div className='mb-3'>\r\n              <Label htmlFor='calendar-color'>Color</Label>\r\n              <Input\r\n                id='calendar-color'\r\n                type='color'\r\n                value={newCalendarColor}\r\n                onChange={e => setNewCalendarColor(e.target.value)}\r\n                className='w-12 h-8 p-0 border-none bg-transparent'\r\n              />\r\n            </div>\r\n            <div className='flex gap-2 mt-4'>\r\n              <button\r\n                type='button'\r\n                className='flex-1 py-2 rounded bg-gray-200 hover:bg-gray-300'\r\n                onClick={() => setShowAddCalendar(false)}\r\n                disabled={addingCalendar}\r\n              >\r\n                Cancel\r\n              </button>\r\n              <button\r\n                type='submit'\r\n                className='flex-1 py-2 rounded bg-blue-600 text-white hover:bg-blue-700'\r\n                disabled={addingCalendar}\r\n              >\r\n                {addingCalendar ? 'Adding...' : 'Add'}\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </Dialog>\r\n      </div>\r\n      {/* Employee Sidebar */}\r\n      <div className='w-full md:w-80 bg-black/20 backdrop-blur-sm border-b md:border-b-0 md:border-r border-white/10 p-4'>\r\n        <Card className='bg-transparent backdrop-blur-sm border-white/10 h-full'>\r\n          <CardHeader>\r\n            <CardTitle className='text-white flex items-center justify-between'>\r\n              <div className='flex items-center gap-2'>\r\n                <User className='h-5 w-5' />\r\n                Employees\r\n              </div>\r\n              <Button\r\n                variant='outline'\r\n                size='sm'\r\n                onClick={() => setShowAddEmployee(true)}\r\n                className='bg-green-500/20 border-green-400/30 text-green-200 hover:bg-green-500/30'\r\n              >\r\n                <UserPlus className='h-4 w-4' />\r\n              </Button>\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent className='space-y-2 overflow-y-auto'>\r\n            {employees.map(employee => (\r\n              <div key={employee.id} className='space-y-2'>\r\n                <div className='p-3 rounded-lg bg-white/5'>\r\n                  <div className='text-white font-medium'>{employee.name}</div>\r\n                  <div className='text-sm text-gray-300'>\r\n                    {employee.position}\r\n                  </div>\r\n                  <div className='text-xs text-gray-400'>\r\n                    {employee.department}\r\n                  </div>\r\n                  <Button\r\n                    onClick={() => {\r\n                      setSelectedEmployee(employee);\r\n                      setShowPopup(true);\r\n                    }}\r\n                    size='sm'\r\n                    className='mt-2 w-full bg-blue-500/20 border-blue-400/30 text-blue-200 hover:bg-blue-500/30'\r\n                  >\r\n                    <Plus className='h-3 w-3 mr-1' />\r\n                    Add to Schedule\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n\r\n      {/* Calendar Main Area */}\r\n      <div className='flex-1 p-6'>\r\n        <Card className='bg-black/20 backdrop-blur-sm border-white/10 h-full'>\r\n          <CardHeader>\r\n            <div className='flex items-center justify-between'>\r\n              <CardTitle className='text-white flex items-center gap-2'>\r\n                <Calendar className='h-6 w-6' />\r\n                30-Day Schedule Calendar\r\n              </CardTitle>\r\n              <div className='flex items-center gap-4'>\r\n                <Button\r\n                  variant='outline'\r\n                  size='sm'\r\n                  onClick={() => navigateMonth(-1)}\r\n                  className='bg-black/20 border-white/20 text-white hover:bg-white/10'\r\n                >\r\n                  <ChevronLeft className='h-4 w-4' />\r\n                </Button>\r\n                <h2 className='text-xl font-semibold text-white'>\r\n                  {monthNames[currentDate.getMonth()]}{' '}\r\n                  {currentDate.getFullYear()}\r\n                </h2>\r\n                <Button\r\n                  variant='outline'\r\n                  size='sm'\r\n                  onClick={() => navigateMonth(1)}\r\n                  className='bg-black/20 border-white/20 text-white hover:bg-white/10'\r\n                >\r\n                  <ChevronRight className='h-4 w-4' />\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </CardHeader>\r\n          <CardContent className='p-0'>\r\n            <div className='grid grid-cols-4 sm:grid-cols-7 gap-1 p-2 sm:p-4 bg-gradient-to-br from-slate-900 via-blue-900 to-indigo-900 rounded-lg'>\r\n              {/* Day headers */}\r\n              {dayNames.map(day => (\r\n                <div\r\n                  key={day}\r\n                  className='text-center text-white font-medium p-2'\r\n                >\r\n                  {day}\r\n                </div>\r\n              ))}\r\n\r\n              {/* Calendar days */}\r\n              {days.map((day, index) => (\r\n                <div\r\n                  key={index}\r\n                  className={`aspect-square border border-white/10 rounded-lg p-1 flex flex-col ${\r\n                    day ? 'bg-white/5' : ''\r\n                  }`}\r\n                >\r\n                  {day && (\r\n                    <>\r\n                      <div className='text-white text-sm font-medium mb-1'>\r\n                        {day.getDate()}\r\n                      </div>\r\n                      <div className='space-y-1'>\r\n                        {eventsLoading ? (\r\n                          <div className='text-xs text-gray-400'>\r\n                            Loading...\r\n                          </div>\r\n                        ) : getEventsForDate(day).length === 0 ? null : (\r\n                          getEventsForDate(day).map(ev => {\r\n                            if (ev._type === 'calendar') {\r\n                              return (\r\n                                <div\r\n                                  key={ev.id}\r\n                                  className='text-xs p-1 rounded bg-blue-500/30 text-blue-100 cursor-pointer hover:bg-blue-500/40'\r\n                                >\r\n                                  <div className='font-medium'>{ev.title}</div>\r\n                                  <div>\r\n                                    {new Date(ev.start).toLocaleTimeString([], {\r\n                                      hour: '2-digit',\r\n                                      minute: '2-digit',\r\n                                    })}{' '}\r\n                                    -{' '}\r\n                                    {new Date(ev.end).toLocaleTimeString([], {\r\n                                      hour: '2-digit',\r\n                                      minute: '2-digit',\r\n                                    })}\r\n                                  </div>\r\n                                </div>\r\n                              );\r\n                            } else {\r\n                              // shift\r\n                              return (\r\n                                <div\r\n                                  key={ev.id}\r\n                                  className='text-xs p-1 rounded bg-green-500/30 text-green-200 cursor-pointer hover:bg-green-500/40'\r\n                                >\r\n                                  <div className='font-medium'>\r\n                                    {ev.employeeName}\r\n                                  </div>\r\n                                  <div>\r\n                                    {ev.startTime} - {ev.endTime}\r\n                                  </div>\r\n                                </div>\r\n                              );\r\n                            }\r\n                          })\r\n                        )}\r\n                      </div>\r\n                    </>\r\n                  )}\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n\r\n      {/* Schedule Popup */}\r\n      {showPopup && (\r\n        <SchedulePopup\r\n          isOpen={showPopup}\r\n          onClose={() => {\r\n            setShowPopup(false);\r\n            setSelectedShift(null);\r\n          }}\r\n          date={selectedDateForPopup}\r\n          employee={selectedEmployee}\r\n          existingShift={selectedShift}\r\n          onSave={data => {\r\n            if (selectedEmployee) {\r\n              if (selectedShift) {\r\n                // Update existing shift\r\n                const updatedShiftData = {\r\n                  startTime: data.startTime,\r\n                  endTime: data.endTime,\r\n                  location: data.location,\r\n                  notes: data.notes,\r\n                };\r\n\r\n                supabase\r\n                  .from('employee_shifts')\r\n                  .update(updatedShiftData)\r\n                  .eq('id', selectedShift.id)\r\n                  .select()\r\n                  .single()\r\n                  .then(({ data: updatedShift, error }) => {\r\n                    if (!error && updatedShift) {\r\n                      setShifts(\r\n                        shifts.map(s =>\r\n                          s.id === selectedShift.id ? updatedShift : s\r\n                        )\r\n                      );\r\n                    }\r\n                  });\r\n              } else {\r\n                // Create new shift\r\n                const shiftData = {\r\n                  employeeId: selectedEmployee.id,\r\n                  employeeName: selectedEmployee.name,\r\n                  date: selectedDateForPopup,\r\n                  startTime: data.startTime,\r\n                  endTime: data.endTime,\r\n                  department: selectedEmployee.department,\r\n                  position: selectedEmployee.position,\r\n                  location: data.location,\r\n                  notes: data.notes,\r\n                  status: 'scheduled',\r\n                };\r\n\r\n                supabase\r\n                  .from('employee_shifts')\r\n                  .insert([shiftData])\r\n                  .select()\r\n                  .single()\r\n                  .then(({ data: newShift, error }) => {\r\n                    if (!error && newShift) {\r\n                      setShifts([...shifts, newShift]);\r\n                    }\r\n                  });\r\n              }\r\n            }\r\n          }}\r\n        />\r\n      )}\r\n\r\n      {/* Add Employee Popup */}\r\n      {showAddEmployee && (\r\n        <AddEmployeePopup\r\n          isOpen={showAddEmployee}\r\n          onClose={() => setShowAddEmployee(false)}\r\n          onSave={async data => {\r\n            try {\r\n              const { data: newEmployee, error } = await supabase\r\n                .from('employees')\r\n                .insert([data])\r\n                .select()\r\n                .single();\r\n\r\n              if (!error && newEmployee) {\r\n                setEmployees([...employees, newEmployee]);\r\n              }\r\n            } catch (error) {\r\n              console.error('Error adding employee:', error);\r\n            }\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"
}