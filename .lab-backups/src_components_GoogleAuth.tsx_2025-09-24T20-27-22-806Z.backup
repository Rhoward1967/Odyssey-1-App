{
  "originalPath": "src\\components\\GoogleAuth.tsx",
  "timestamp": "2025-09-24T20:27:22.806Z",
  "hash": "9cc58310593ec10106e19dc18c8d713d0ab81b7dfd5379b6af5123c7952a676e",
  "size": 10058,
  "content": "import React, { useState, useEffect } from 'react';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Calendar, User, CheckCircle, AlertCircle, Shield } from 'lucide-react';\r\nimport { supabase } from '@/lib/supabase';\r\n\r\ninterface GoogleAuthProps {\r\n  onAuthSuccess?: (tokens: any, user: any) => void;\r\n}\r\n\r\nconst ENABLE_TEST_AUTH = import.meta.env.VITE_ENABLE_TEST_AUTH === 'true';\r\n\r\nexport function GoogleAuth({ onAuthSuccess }: GoogleAuthProps) {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [authStatus, setAuthStatus] = useState<'idle' | 'success' | 'error'>('idle');\r\n  const [user, setUser] = useState<any>(null);\r\n  const [adminEmail, setAdminEmail] = useState('');\r\n  const [adminPassword, setAdminPassword] = useState('');\r\n  const [error, setError] = useState('');\r\n\r\n  useEffect(() => {\r\n    // Listen for OAuth callback messages from popup\r\n    const handleMessage = async (event: MessageEvent) => {\r\n      if (event.data.type === 'GOOGLE_OAUTH_RESULT') {\r\n        setIsLoading(true);\r\n        \r\n        if (event.data.success && event.data.code) {\r\n          try {\r\n            const { data } = await supabase.functions.invoke('google-oauth-handler', {\r\n              body: { action: 'exchange_code', code: event.data.code }\r\n            });\r\n            \r\n            if (data.success) {\r\n              setUser(data.user);\r\n              setAuthStatus('success');\r\n              onAuthSuccess?.(data.tokens, data.user);\r\n            } else {\r\n              setError(`Token exchange failed: ${data.error || 'Unknown error'}`);\r\n              setAuthStatus('error');\r\n            }\r\n          } catch (err) {\r\n            setError('OAuth exchange failed: ' + err.message);\r\n            setAuthStatus('error');\r\n          }\r\n        } else {\r\n          setError(`OAuth failed: ${event.data.error} - ${event.data.errorDescription}`);\r\n          setAuthStatus('error');\r\n        }\r\n        \r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    window.addEventListener('message', handleMessage);\r\n    return () => window.removeEventListener('message', handleMessage);\r\n  }, [onAuthSuccess]);\r\n\r\n  const handleGoogleAuth = async () => {\r\n    setIsLoading(true);\r\n    setAuthStatus('idle');\r\n    setError('');\r\n    \r\n    try {\r\n      const { data } = await supabase.functions.invoke('google-oauth-handler', {\r\n        body: { action: 'get_auth_url' }\r\n      });\r\n      \r\n      if (data.success) {\r\n        // Open OAuth URL in popup window\r\n        const popup = window.open(\r\n          data.auth_url,\r\n          'google-oauth',\r\n          'width=500,height=600,scrollbars=yes,resizable=yes'\r\n        );\r\n        \r\n        if (!popup) {\r\n          setError('Popup blocked. Please allow popups for this site.');\r\n          setAuthStatus('error');\r\n          setIsLoading(false);\r\n        }\r\n      } else {\r\n        setError('Failed to get authorization URL');\r\n        setAuthStatus('error');\r\n        setIsLoading(false);\r\n      }\r\n    } catch (err) {\r\n      setError('Failed to initiate Google OAuth');\r\n      setAuthStatus('error');\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleAdminOverride = async () => {\r\n    setIsLoading(true);\r\n    setError('');\r\n    \r\n    try {\r\n      const { data } = await supabase.functions.invoke('google-oauth-handler', {\r\n        body: { \r\n          action: 'admin_override', \r\n          email: adminEmail, \r\n          password: adminPassword \r\n        }\r\n      });\r\n      \r\n      if (data.success) {\r\n        const adminUser = { email: adminEmail, name: 'Admin User', admin: true };\r\n        setUser(adminUser);\r\n        setAuthStatus('success');\r\n        onAuthSuccess?.({ admin_session: data.session_key }, adminUser);\r\n      } else {\r\n        setError('Invalid admin credentials');\r\n        setAuthStatus('error');\r\n      }\r\n    } catch (err) {\r\n      setError('Admin authentication failed');\r\n      setAuthStatus('error');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleTestAuth = async () => {\r\n    setIsLoading(true);\r\n    setError('');\r\n    \r\n    try {\r\n      const { data } = await supabase.functions.invoke('google-oauth-handler', {\r\n        body: { action: 'test_auth' }\r\n      });\r\n      \r\n      if (data.success) {\r\n        setUser(data.user);\r\n        setAuthStatus('success');\r\n        onAuthSuccess?.({ test_session: true }, data.user);\r\n      }\r\n    } catch (err) {\r\n      setError('Test authentication failed');\r\n      setAuthStatus('error');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleDebugInfo = async () => {\r\n    try {\r\n      const { data } = await supabase.functions.invoke('google-oauth-handler', {\r\n        body: { action: 'debug' }\r\n      });\r\n      \r\n      if (data.success) {\r\n        alert(JSON.stringify(data.debug, null, 2));\r\n      }\r\n    } catch (err) {\r\n      alert('Debug failed: ' + err.message);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      <Card className=\"w-full max-w-md mx-auto\">\r\n        <CardHeader className=\"text-center\">\r\n          <CardTitle className=\"flex items-center justify-center gap-2\">\r\n            <Calendar className=\"h-5 w-5\" />\r\n            Google Calendar Access\r\n          </CardTitle>\r\n          <CardDescription>\r\n            Connect your Google account to access all your calendars\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent className=\"space-y-4\">\r\n          {authStatus === 'idle' && (\r\n            <div className=\"space-y-2\">\r\n              <Button \r\n                onClick={handleGoogleAuth} \r\n                disabled={isLoading}\r\n                className=\"w-full\"\r\n                size=\"lg\"\r\n              >\r\n                {isLoading ? 'Connecting...' : 'Connect Google Calendar'}\r\n              </Button>\r\n              \r\n              {ENABLE_TEST_AUTH && (\r\n                <div className=\"flex gap-2\">\r\n                  <Button \r\n                    onClick={handleTestAuth}\r\n                    variant=\"outline\"\r\n                    size=\"sm\"\r\n                    className=\"flex-1\"\r\n                  >\r\n                    Test Auth\r\n                  </Button>\r\n                  <Button \r\n                    onClick={handleDebugInfo}\r\n                    variant=\"outline\"\r\n                    size=\"sm\"\r\n                    className=\"flex-1\"\r\n                  >\r\n                    Debug Info\r\n                  </Button>\r\n                </div>\r\n              )}\r\n            </div>\r\n          )}\r\n\r\n          {authStatus === 'success' && user && (\r\n            <div className=\"space-y-3\">\r\n              <div className=\"flex items-center gap-2 text-green-600\">\r\n                <CheckCircle className=\"h-5 w-5\" />\r\n                <span className=\"font-medium\">Connected Successfully!</span>\r\n              </div>\r\n              <div className=\"flex items-center gap-3 p-3 bg-gray-50 rounded-lg\">\r\n                <User className=\"h-8 w-8\" />\r\n                <div>\r\n                  <p className=\"font-medium\">{user.name}</p>\r\n                  <p className=\"text-sm text-gray-600\">{user.email}</p>\r\n                </div>\r\n              </div>\r\n              <Badge variant=\"secondary\" className=\"w-full justify-center\">\r\n                Calendar Access Granted\r\n              </Badge>\r\n            </div>\r\n          )}\r\n\r\n          {authStatus === 'error' && (\r\n            <div className=\"space-y-3\">\r\n              <div className=\"flex items-center gap-2 text-red-600\">\r\n                <AlertCircle className=\"h-5 w-5\" />\r\n                <span className=\"font-medium\">Connection Failed</span>\r\n              </div>\r\n              {error && (\r\n                <p className=\"text-sm text-red-600 bg-red-50 p-2 rounded\">{error}</p>\r\n              )}\r\n              <div className=\"flex gap-2\">\r\n                <Button \r\n                  onClick={handleGoogleAuth} \r\n                  variant=\"outline\"\r\n                  className=\"flex-1\"\r\n                >\r\n                  Try Again\r\n                </Button>\r\n                {ENABLE_TEST_AUTH && (\r\n                  <Button \r\n                    onClick={handleTestAuth}\r\n                    variant=\"outline\"\r\n                    className=\"flex-1\"\r\n                  >\r\n                    Test Mode\r\n                  </Button>\r\n                )}\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          <div className=\"text-xs text-gray-500 text-center\">\r\n            This will allow access to view and manage your Google Calendar events\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      <Card className=\"w-full max-w-md mx-auto\">\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2 text-sm\">\r\n            <Shield className=\"h-4 w-4\" />\r\n            Alternative Login\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent className=\"space-y-4\">\r\n          <div>\r\n            <Label htmlFor=\"admin-email\">Email</Label>\r\n            <Input\r\n              id=\"admin-email\"\r\n              type=\"email\"\r\n              value={adminEmail}\r\n              onChange={(e) => setAdminEmail(e.target.value)}\r\n              placeholder=\"your-email@example.com\"\r\n            />\r\n          </div>\r\n          <div>\r\n            <Label htmlFor=\"admin-password\">Password</Label>\r\n            <Input\r\n              id=\"admin-password\"\r\n              type=\"password\"\r\n              value={adminPassword}\r\n              onChange={(e) => setAdminPassword(e.target.value)}\r\n            />\r\n          </div>\r\n          <Button \r\n            onClick={handleAdminOverride}\r\n            disabled={isLoading || !adminEmail || !adminPassword}\r\n            variant=\"outline\"\r\n            className=\"w-full\"\r\n          >\r\n            Login\r\n          </Button>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}"
}