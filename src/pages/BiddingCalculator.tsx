import React, { useState } from 'react';
import VerticalNavigation from '@/components/VerticalNavigation';
import SimpleBidderForm from '@/components/SimpleBidderForm';
import OdysseyPricingEngine from '@/components/OdysseyPricingEngine';
import DocumentViewer from '@/components/DocumentViewer';
import PDFExporter from '@/components/PDFExporter';
import AppointmentWidget from '@/components/AppointmentWidget';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Calculator, Shield, Users } from 'lucide-react';

interface BidderInfo {
  name: string;
  address: string;
  email: string;
  phone: string;
  city: string;
  state: string;
  zipcode: string;
}

interface ServiceSpecs {
  selectedSpecs: any[];
  services: string[];
  frequency: string;
  contractType: 'one-time' | 'monthly';
  totalEstimate: number;
}

const BiddingCalculator: React.FC = () => {
  const [bidderInfo, setBidderInfo] = useState<BidderInfo | null>(null);
  const [serviceSpecs, setServiceSpecs] = useState<ServiceSpecs | null>(null);
  const [documents, setDocuments] = useState([
    {
      id: '1',
      title: 'ODYSSEY-1 Service Agreement Template',
      type: 'agreement' as const,
      content: 'PROFESSIONAL SERVICES AGREEMENT\n\nThis agreement outlines the terms and conditions for services provided through the ODYSSEY-1 platform.',
      status: 'approved' as const,
      createdAt: '2024-01-15'
    }
  ]);

  const handleFormSubmit = (bidder: BidderInfo, specs: ServiceSpecs) => {
    setBidderInfo(bidder);
    setServiceSpecs(specs);
    
    // Generate agreement document
    const agreement = generateAgreementDocument(bidder, specs);
    const newDoc = {
      id: Date.now().toString(),
      title: `Service Agreement - ${bidder.name}`,
      type: 'agreement' as const,
      content: agreement,
      status: 'pending' as const,
      createdAt: new Date().toISOString().split('T')[0]
    };
    setDocuments(prev => [...prev, newDoc]);
  };

  const generateAgreementDocument = (bidder: BidderInfo, specs: ServiceSpecs) => {
    const specsDetails = specs.selectedSpecs.map(spec => 
      `${spec.name}: ${spec.description} (${spec.squareFootage} sq ft @ $${spec.pricePerSqft}/sq ft = $${(spec.squareFootage * spec.pricePerSqft).toFixed(2)})`
    ).join('\n');

    return `ODYSSEY-1 SERVICE AGREEMENT

CLIENT INFORMATION:
Name: ${bidder.name}
Email: ${bidder.email}
Address: ${bidder.address}
Location: ${bidder.city}, ${bidder.state} ${bidder.zipcode}
Phone: ${bidder.phone}

SELECTED SPECIFICATIONS:
${specsDetails}

ADDITIONAL SERVICES:
${specs.services.join(', ')}

CONTRACT DETAILS:
Contract Type: ${specs.contractType}
Frequency: ${specs.frequency}
Total Estimate: $${specs.totalEstimate.toFixed(2)}

TERMS AND CONDITIONS:
1. Payment terms: Net 30 days
2. Service guarantee: 100% satisfaction
3. Fully bonded and insured
4. Quality assurance included
5. Professional service standards maintained

Generated by ODYSSEY-1 on ${new Date().toLocaleDateString()}`;
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900">
      <VerticalNavigation />
      
      <div className="md:ml-64 container mx-auto px-4 py-8">
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold text-white mb-4">
            ODYSSEY-1 Bidding Calculator
          </h1>
          <p className="text-slate-300 text-lg">
            Automated pricing and agreement generation system
          </p>
        </div>

        {/* Privacy Notice */}
        <Card className="mb-8 bg-gradient-to-r from-red-800/30 to-orange-800/30 border-red-500">
          <CardHeader>
            <CardTitle className="text-white flex items-center">
              <Shield className="w-5 h-5 mr-2" />
              Privacy & Commission Structure
              <Badge variant="destructive" className="ml-2">CONFIDENTIAL</Badge>
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid md:grid-cols-3 gap-4 text-sm">
              <div className="bg-slate-800/50 p-3 rounded-lg">
                <h4 className="text-green-300 font-semibold mb-2 flex items-center">
                  <Users className="w-4 h-4 mr-1" />
                  Bidder View
                </h4>
                <p className="text-slate-300">Sees only: 10% commission amount and customer daily rate</p>
              </div>
              <div className="bg-slate-800/50 p-3 rounded-lg">
                <h4 className="text-blue-300 font-semibold mb-2 flex items-center">
                  <Calculator className="w-4 h-4 mr-1" />
                  Customer View
                </h4>
                <p className="text-slate-300">Sees only: Service estimate, agreement, and daily rate</p>
              </div>
              <div className="bg-slate-800/50 p-3 rounded-lg">
                <h4 className="text-orange-300 font-semibold mb-2 flex items-center">
                  <Shield className="w-4 h-4 mr-1" />
                  HJS Admin View
                </h4>
                <p className="text-slate-300">Sees: Full breakdown, expenses, ROI, profit margins</p>
              </div>
            </div>
          </CardContent>
        </Card>
        <div className="grid lg:grid-cols-4 gap-6">
          <div className="lg:col-span-3">
            {!bidderInfo ? (
              <SimpleBidderForm onSubmit={handleFormSubmit} />
            ) : (
              <div className="space-y-8">
                <OdysseyPricingEngine
                  specs={serviceSpecs!.selectedSpecs.map(s => s.description).join('; ')}
                  services={serviceSpecs!.services}
                  frequency={serviceSpecs!.frequency}
                  contractType={serviceSpecs!.contractType}
                />

                {/* Document Management */}
                <Card className="bg-slate-800/30 border-slate-700">
                  <CardHeader>
                    <CardTitle className="text-white text-2xl">
                      Generated Documents
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="grid lg:grid-cols-2 gap-6">
                      <DocumentViewer
                        documents={documents}
                        onDocumentUpdate={(id, content) => {
                          setDocuments(prev => prev.map(doc => 
                            doc.id === id ? { ...doc, content } : doc
                          ));
                        }}
                        onDocumentApprove={(id) => {
                          setDocuments(prev => prev.map(doc => 
                            doc.id === id ? { ...doc, status: 'approved' as const } : doc
                          ));
                        }}
                      />
                      
                      {documents.length > 0 && (
                        <PDFExporter 
                          document={documents[documents.length - 1]} 
                          bidderInfo={bidderInfo}
                        />
                      )}
                    </div>
                  </CardContent>
                </Card>
              </div>
            )}
          </div>
          
          <div className="space-y-6">
            <AppointmentWidget context="bidding-calculator" />
          </div>
        </div>
      </div>
    </div>
  );
};

export default BiddingCalculator;