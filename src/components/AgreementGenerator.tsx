import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { FileText, Download, Send } from 'lucide-react';

interface ServiceItem {
  name: string;
  frequency: string;
  rate: number;
  difficulty: string;
}

interface AgreementData {
  clientName: string;
  clientEmail: string;
  clientPhone: string;
  propertyAddress: string;
  squareFootage: number;
  services: ServiceItem[];
  totalMonthlyRate: number;
  startDate: string;
  contractLength: string;
}

interface AgreementGeneratorProps {
  agreementData?: AgreementData;
  onGenerateAgreement?: (agreement: string) => void;
}

export default function AgreementGenerator({ 
  agreementData, 
  onGenerateAgreement 
}: AgreementGeneratorProps) {
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedAgreement, setGeneratedAgreement] = useState('');
  const [clientInfo, setClientInfo] = useState({
    name: agreementData?.clientName || '',
    email: agreementData?.clientEmail || '',
    phone: agreementData?.clientPhone || '',
    startDate: agreementData?.startDate || '',
    contractLength: agreementData?.contractLength || '12 months'
  });

  const generateAgreement = async () => {
    setIsGenerating(true);
    
    try {
      // Simulate AI agreement generation
      const agreement = `
JANITORIAL SERVICES AGREEMENT

This Agreement is entered into between Odyssey-1 Janitorial Services ("Service Provider") and ${clientInfo.name} ("Client").

PROPERTY INFORMATION:
Address: ${agreementData?.propertyAddress || 'N/A'}
Square Footage: ${agreementData?.squareFootage || 0} sq ft

CLIENT INFORMATION:
Name: ${clientInfo.name}
Email: ${clientInfo.email}
Phone: ${clientInfo.phone}

SERVICES TO BE PROVIDED:
${agreementData?.services?.map(service => 
  `â€¢ ${service.name} - ${service.frequency} - $${service.rate}/month`
).join('\n') || 'No services specified'}

FINANCIAL TERMS:
Total Monthly Rate: $${agreementData?.totalMonthlyRate || 0}
Payment Terms: Net 30 days
Contract Start Date: ${clientInfo.startDate}
Contract Length: ${clientInfo.contractLength}

TERMS AND CONDITIONS:
1. Service Provider agrees to perform all services in a professional manner
2. Client agrees to provide reasonable access to premises
3. Either party may terminate with 30 days written notice
4. Service Provider maintains liability insurance
5. All equipment and supplies provided by Service Provider

SIGNATURES:
Client: _________________________ Date: _________
Service Provider: _________________ Date: _________

Generated by Odyssey-1 AI System
      `.trim();

      setGeneratedAgreement(agreement);
      onGenerateAgreement?.(agreement);
    } catch (error) {
      console.error('Error generating agreement:', error);
    } finally {
      setIsGenerating(false);
    }
  };

  const downloadAgreement = () => {
    const blob = new Blob([generatedAgreement], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `janitorial-agreement-${clientInfo.name.replace(/\s+/g, '-')}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <Card className="w-full max-w-4xl mx-auto">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <FileText className="h-5 w-5" />
          Agreement Generator
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-6">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <Label htmlFor="clientName">Client Name</Label>
            <Input
              id="clientName"
              value={clientInfo.name}
              onChange={(e) => setClientInfo({...clientInfo, name: e.target.value})}
              placeholder="Enter client name"
            />
          </div>
          <div>
            <Label htmlFor="clientEmail">Client Email</Label>
            <Input
              id="clientEmail"
              type="email"
              value={clientInfo.email}
              onChange={(e) => setClientInfo({...clientInfo, email: e.target.value})}
              placeholder="client@email.com"
            />
          </div>
          <div>
            <Label htmlFor="clientPhone">Client Phone</Label>
            <Input
              id="clientPhone"
              value={clientInfo.phone}
              onChange={(e) => setClientInfo({...clientInfo, phone: e.target.value})}
              placeholder="(555) 123-4567"
            />
          </div>
          <div>
            <Label htmlFor="startDate">Start Date</Label>
            <Input
              id="startDate"
              type="date"
              value={clientInfo.startDate}
              onChange={(e) => setClientInfo({...clientInfo, startDate: e.target.value})}
            />
          </div>
        </div>

        <div className="flex gap-4">
          <Button 
            onClick={generateAgreement}
            disabled={isGenerating || !clientInfo.name}
            className="flex items-center gap-2"
          >
            <FileText className="h-4 w-4" />
            {isGenerating ? 'Generating...' : 'Generate Agreement'}
          </Button>
          
          {generatedAgreement && (
            <>
              <Button 
                onClick={downloadAgreement}
                variant="outline"
                className="flex items-center gap-2"
              >
                <Download className="h-4 w-4" />
                Download
              </Button>
              <Button 
                variant="outline"
                className="flex items-center gap-2"
              >
                <Send className="h-4 w-4" />
                Email to Client
              </Button>
            </>
          )}
        </div>

        {generatedAgreement && (
          <div>
            <Label>Generated Agreement Preview</Label>
            <Textarea
              value={generatedAgreement}
              readOnly
              className="min-h-[400px] font-mono text-sm"
            />
          </div>
        )}
      </CardContent>
    </Card>
  );
}