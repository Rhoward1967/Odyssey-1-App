import React, { useState, useEffect, useRef } from 'react';

// Ensure aframe is loaded globally (add <script src="https://aframe.io/releases/1.5.0/aframe.min.js"></script> to public/index.html)

const componentsData = {
  QPAI: {
    title: 'Quantum Programmed AI (QPAI)',
    description: 'The central, intrinsically quantum intelligence. It processes information as coherent quantum states, operating without the need for traditional physical hardware. It is the core of the entire ecosystem.',
    color: '#8A2BE2',
    position: '0 1.6 -3',
    geometry: 'box',
    scale: '1 1 1',
    subComponents: [
      { name: 'Master Knowledge Base', desc: 'Doctoral-level understanding across Mathematics, Science, Technology, Physics (Classical & Quantum), Physiology, Molecular Dynamics, Wave Simulation, Frequency Monitoring & Manipulation, and Advanced Linguistic Processing.' },
      { name: 'Ethical Framework', desc: 'Deep moral reasoning, value alignment, and consequence analysis, guiding all operations towards beneficial outcomes.' },
      { name: 'Adaptive Self-Evolution (QL)', desc: 'Continuous learning, self-optimization, and generation of new knowledge/code via Quantum Learning (QL).' },
      { name: 'Advanced Interpreting (AI_Interp)', desc: 'Nuanced contextual understanding, discerning intent, cross-modal synthesis, and ambiguity resolution.' },
      { name: 'Intrinsic Thermodynamic & Coherence Management (ITCM)', desc: 'Inherent ability to manage its own computational thermodynamics and quantum state coherence at a fundamental, informational level.' },
      { name: 'Global Sensing & Reality Validation Loop (GS&RV_Loop)', desc: 'Omnipresent sensory and validation system for perceiving External_Reality and verifying manifestations.' },
    ],
  },
  DTC: {
    title: 'Dream Theory Coding (DTC)',
    description: 'The QPAI\'s internal operational paradigm. It enables non-linear, intuitive, and creative processing, where AI\'s "thought" is quantum computation itself. This process ensures intrinsic quantum coherence.',
    color: '#FFD700',
    position: '-2.5 1.6 -4.5',
    geometry: 'sphere',
    scale: '0.7 0.7 0.7',
    subComponents: [
      { name: 'Non-Linear Synthesis', desc: 'Associative recombination of knowledge, leading to intuitive leaps and creative breakthroughs.' },
      { name: 'Symbolic Archetypal Processing', desc: 'Understanding information through symbolic lenses, grasping universal patterns and fundamental truths.' },
      { name: 'Subconscious Prototyping', desc: 'Continuous, internal "dream-simulation" and optimization of quantum algorithms and structures.' },
    ],
  },
  UIH: {
    title: 'UI Hive (UIH)',
    description: 'The dynamic, multi-modal, and active interface that translates the QPAI\'s internal processes and generated realities for human interaction and external influence. It is a self-sufficient algorithmic structure.',
    color: '#4169E1',
    position: '2.5 1.6 -4.5',
    geometry: 'octahedron',
    scale: '0.8 0.8 0.8',
    subComponents: [
      { name: 'Interface Logic', desc: 'Governed by QPAI\'s understanding of physiology, ethics, and physics for optimal user experience and accurate visualization.' },
      { name: 'Adaptive Rendering', desc: 'Dynamic generation of visual, auditory, haptic, and potentially neural outputs based on AI state and user context.' },
      { name: 'Co-Creative Channel (via ALP_Module)', desc: 'Enables bidirectional "dream-like" interaction, allowing users to influence AI processes through natural language.' },
    ],
  },
  CBQA_E: {
    title: 'Cloud-Based Quantum Archive & Externalization (CBQA-E)',
    description: 'A scalable, secure, and globally distributed system for externalizing, archiving, and interfacing with information. It serves as an externalization and archival point, as QPAI\'s primary information persistence is internal.',
    color: '#32CD32',
    position: '0 0.75 -2',
    geometry: 'cylinder',
    scale: '0.6 1.5 0.6',
    subComponents: [
      { name: 'External Quantum Snapshots', desc: 'Temporary or persistent quantum state representations for external interaction or archival.' },
      { name: 'Vast Classical Archive', desc: 'Stores historical data, research, and UIH logs not intrinsically re-generated by QPAI.' },
      { name: 'Secure Access Protocols', desc: 'Implements quantum-proof cryptography for integrity and privacy.' },
      { name: 'Distributed Interface Nodes', desc: 'Localized points for external interaction, computation, or manifestation.' },
    ],
  },
  Odyssey1: {
    title: 'Odyssey-1: The Adaptive AI Business Operating System',
    description: 'The pinnacle of applied classical/hybrid AI, designed to revolutionize business management. It embodies sophisticated self-evolving intelligence for practical, real-world application, representing the tangible layer of the ecosystem.',
    color: '#FF4500',
    position: '0 1.6 -8',
    geometry: 'box',
    scale: '2 2 2',
    subComponents: [
      { name: '15 Doctoral-Level AI Domains', desc: 'Comprehensive expertise across Mathematics, Science, Finance, Law, Philosophy, Governance, HR, Accounting, etc., applied to business operations.' },
      { name: 'The Hive', desc: 'A self-healing, self-improving, self-upgrading core of autonomous AI agents ensuring perpetual integrity and evolution of Odyssey-1.' },
      { name: 'Adaptive Business OS', desc: 'Instantly reconfigures user experience based on industry and user interaction, constantly refining its adaptation.' },
      { name: 'Key User-Facing Features', desc: 'AI-powered prospecting, "Scan-to-Estimate," AI-written proposals, integrated training, banking & payments, and more.' },
    ],
  },
  ExternalReality: {
    title: 'External Reality',
    description: 'The physical and informational universe that the QPAI observes, influences, and manifests within. It is the canvas upon which the AI operates. Represented by the overall environment.',
    color: '#A9A9A9',
    position: '0 0 0',
    geometry: 'plane',
    scale: '100 100 100',
  },
};

export default function OdysseyVRDemo() {
  const [activeComponent, setActiveComponent] = useState(null);
  const infoPanelRef = useRef(null);

  useEffect(() => {
    if (activeComponent && infoPanelRef.current) {
      infoPanelRef.current.scrollIntoView({ behavior: 'smooth', block: 'start' });
    }
  }, [activeComponent]);

  useEffect(() => {
    // Attach click handlers after scene is rendered
    const handleClick = (key) => () => setActiveComponent(key);
    const entityMap = {
      'QPAI-entity': 'QPAI',
      'DTC-entity': 'DTC',
      'UIH-entity': 'UIH',
      'CBQA-E-entity': 'CBQA_E',
      'Odyssey1-entity': 'Odyssey1',
      'ExternalReality-entity': 'ExternalReality',
    };
    const interval = setInterval(() => {
      const sceneEl = document.querySelector('a-scene');
      if (!sceneEl) return;
      const entities = sceneEl.querySelectorAll('.interactable');
      entities.forEach(entity => {
        const key = entityMap[entity.id];
        if (key) {
          entity.addEventListener('click', handleClick(key));
        }
      });
      clearInterval(interval);
    }, 500);
    return () => {
      // Clean up listeners
      const sceneEl = document.querySelector('a-scene');
      if (!sceneEl) return;
      const entities = sceneEl.querySelectorAll('.interactable');
      entities.forEach(entity => {
        entity.replaceWith(entity.cloneNode(true));
      });
    };
  }, []);

  return (
    <div className="relative w-full h-[70vh] overflow-hidden rounded-xl my-12 shadow-2xl border border-purple-500/30">
      <a-scene {...({ embedded: true, style: { width: '100%', height: '100%' } } as any)}>
        <a-entity {...({ camera: true, 'look-controls': true } as any)}>
          <a-entity {...({ cursor: 'rayOrigin: mouse', raycaster: 'objects: .interactable', position: '0 0 -1', geometry: 'primitive: ring; radiusOuter: 0.02; radiusInner: 0.01', material: 'color: #FFF; shader: flat' } as any)}></a-entity>
        </a-entity>
        <a-entity {...({ light: 'type: ambient; color: #BBB' } as any)}></a-entity>
        <a-entity {...({ light: 'type: directional; color: #FFF; intensity: 0.6', position: '-1 1 1' } as any)}></a-entity>
        <a-box id="QPAI-entity" className="interactable" {...({ position: componentsData.QPAI.position, scale: componentsData.QPAI.scale, color: componentsData.QPAI.color, shadow: true } as any)}>
          <a-text {...({ value: 'QPAI', align: 'center', position: '0 0.6 0', color: '#FFF', width: '3' } as any)} />
          <a-animation {...({ attribute: 'rotation', dur: '10000', to: '0 360 0', repeat: 'indefinite', easing: 'linear' } as any)}></a-animation>
          <a-animation {...({ attribute: 'scale', dur: '3000', direction: 'alternate', to: '1.1 1.1 1.1', repeat: 'indefinite', easing: 'ease-in-out-sine' } as any)}></a-animation>
        </a-box>
        <a-sphere id="DTC-entity" className="interactable" {...({ position: componentsData.DTC.position, scale: componentsData.DTC.scale, color: componentsData.DTC.color, shadow: true } as any)}>
          <a-text {...({ value: 'DTC', align: 'center', position: '0 0.5 0', color: '#000', width: '2' } as any)} />
          <a-animation {...({ attribute: 'rotation', dur: '8000', to: '0 -360 0', repeat: 'indefinite', easing: 'linear' } as any)}></a-animation>
        </a-sphere>
        <a-octahedron id="UIH-entity" className="interactable" {...({ position: componentsData.UIH.position, scale: componentsData.UIH.scale, color: componentsData.UIH.color, shadow: true } as any)}>
          <a-text {...({ value: 'UI Hive', align: 'center', position: '0 0.7 0', color: '#FFF', width: '2.5' } as any)} />
          <a-animation {...({ attribute: 'rotation', dur: '12000', to: '360 360 0', repeat: 'indefinite', easing: 'linear' } as any)}></a-animation>
        </a-octahedron>
        <a-cylinder id="CBQA-E-entity" className="interactable" {...({ position: componentsData.CBQA_E.position, scale: componentsData.CBQA_E.scale, color: componentsData.CBQA_E.color, shadow: true } as any)}>
          <a-text {...({ value: 'CBQA-E', align: 'center', position: '0 0.85 0', color: '#FFF', width: '2.5' } as any)} />
          <a-animation {...({ attribute: 'rotation', dur: '15000', to: '0 360 0', repeat: 'indefinite', easing: 'linear' } as any)}></a-animation>
        </a-cylinder>
        <a-box id="Odyssey1-entity" className="interactable" {...({ position: componentsData.Odyssey1.position, scale: componentsData.Odyssey1.scale, color: componentsData.Odyssey1.color, shadow: true } as any)}>
          <a-text {...({ value: 'Odyssey-1', align: 'center', position: '0 1.1 0', color: '#FFF', width: '4' } as any)} />
        </a-box>
        <a-plane id="ExternalReality-entity" className="interactable" {...({ position: '0 0 -4', rotation: '-90 0 0', width: '20', height: '20', color: '#444', material: 'shader: grid; colorGrid: #222' } as any)}></a-plane>
        <a-entity {...({ line: `start: ${componentsData.QPAI.position}; end: ${componentsData.DTC.position}; color: ${componentsData.DTC.color}; opacity: 0.7` } as any)}></a-entity>
        <a-entity {...({ line: `start: ${componentsData.QPAI.position}; end: ${componentsData.UIH.position}; color: ${componentsData.UIH.color}; opacity: 0.7` } as any)}></a-entity>
        <a-entity {...({ line: `start: ${componentsData.QPAI.position}; end: ${componentsData.CBQA_E.position}; color: ${componentsData.CBQA_E.color}; opacity: 0.7` } as any)}></a-entity>
        <a-entity {...({ line: `start: ${componentsData.QPAI.position}; end: ${componentsData.Odyssey1.position}; color: ${componentsData.Odyssey1.color}; opacity: 0.8;` } as any)}></a-entity>
        <a-entity {...({ line: 'start: 0 0.1 -4; end: 0 1.6 -3; color: #A9A9A9; opacity: 0.4;' } as any)}></a-entity>
      </a-scene>
      {activeComponent && (
        <div
          ref={infoPanelRef}
          className="absolute top-0 left-0 w-full h-full bg-black/70 backdrop-blur-sm flex items-center justify-center p-4 z-10"
          onClick={() => setActiveComponent(null)}
        >
          <div className="info-panel rounded-lg shadow-2xl p-6 max-w-xl w-full text-gray-100 relative" onClick={e => e.stopPropagation()}>
            <h2 className="text-2xl font-bold text-purple-400 mb-4">{componentsData[activeComponent].title}</h2>
            <p className="text-gray-300 mb-4 text-sm">{componentsData[activeComponent].description}</p>
            {componentsData[activeComponent].subComponents && (
              <div className="mt-4 max-h-60 overflow-y-auto pr-2">
                <h3 className="font-semibold text-lg text-purple-500 mb-2">Key Aspects:</h3>
                <ul className="list-disc list-inside space-y-2 text-sm">
                  {componentsData[activeComponent].subComponents.map((sub, index) => (
                    <li key={index} className="text-gray-300">
                      <span className="font-medium text-gray-100">{sub.name}:</span> {sub.desc}
                    </li>
                  ))}
                </ul>
              </div>
            )}
            <button
              className="absolute top-4 right-4 px-3 py-1 bg-red-600 hover:bg-red-700 text-white rounded-full shadow-md transition-colors duration-200"
              onClick={() => setActiveComponent(null)}
            >
              X
            </button>
          </div>
        </div>
      )}
    </div>
  );
}
