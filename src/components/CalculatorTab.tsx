import React, { useState } from 'react';
import SimpleBidderForm from '@/components/SimpleBidderForm';
import OdysseyPricingEngine from '@/components/OdysseyPricingEngine';
import DocumentViewer from '@/components/DocumentViewer';
import PDFExporter from '@/components/PDFExporter';
import PrivacyViewer from '@/components/PrivacyViewer';
import EnhancedVideoConference from '@/components/EnhancedVideoConference';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Calculator, Shield, Users, Video } from 'lucide-react';

interface BidderInfo {
  name: string;
  address: string;
  email: string;
  phone: string;
  city: string;
  state: string;
  zipcode: string;
}

interface ServiceSpecs {
  selectedSpecs: any[];
  services: string[];
  frequency: string;
  contractType: 'one-time' | 'monthly';
  totalEstimate: number;
}

const CalculatorTab: React.FC = () => {
  const [bidderInfo, setBidderInfo] = useState<BidderInfo | null>(null);
  const [serviceSpecs, setServiceSpecs] = useState<ServiceSpecs | null>(null);
  const [isVideoCallActive, setIsVideoCallActive] = useState(false);
  const [documents, setDocuments] = useState([
    {
      id: '1',
      title: 'ODYSSEY-1 Service Agreement Template',
      type: 'agreement' as const,
      content: 'PROFESSIONAL SERVICES AGREEMENT\n\nThis agreement outlines the terms and conditions for services provided through the ODYSSEY-1 platform.',
      status: 'approved' as const,
      createdAt: '2024-01-15'
    }
  ]);

  const handleFormSubmit = (bidder: BidderInfo, specs: ServiceSpecs) => {
    setBidderInfo(bidder);
    setServiceSpecs(specs);
    
    // Generate agreement document
    const agreement = generateAgreementDocument(bidder, specs);
    const newDoc = {
      id: Date.now().toString(),
      title: `Service Agreement - ${bidder.name}`,
      type: 'agreement' as const,
      content: agreement,
      status: 'pending' as const,
      createdAt: new Date().toISOString().split('T')[0]
    };
    setDocuments(prev => [...prev, newDoc]);
  };

  const generateAgreementDocument = (bidder: BidderInfo, specs: ServiceSpecs) => {
    const specsDetails = specs.selectedSpecs.map(spec => 
      `${spec.name}: ${spec.description} (${spec.squareFootage} sq ft @ $${spec.pricePerSqft}/sq ft = $${(spec.squareFootage * spec.pricePerSqft).toFixed(2)})`
    ).join('\n');

    return `ODYSSEY-1 SERVICE AGREEMENT

CLIENT INFORMATION:
Name: ${bidder.name}
Email: ${bidder.email}
Address: ${bidder.address}
Location: ${bidder.city}, ${bidder.state} ${bidder.zipcode}
Phone: ${bidder.phone}

SELECTED SPECIFICATIONS:
${specsDetails}

ADDITIONAL SERVICES:
${specs.services.join(', ')}

CONTRACT DETAILS:
Contract Type: ${specs.contractType}
Frequency: ${specs.frequency}
Total Estimate: $${specs.totalEstimate.toFixed(2)}

TERMS AND CONDITIONS:
1. Payment terms: Net 30 days
2. Service guarantee: 100% satisfaction
3. Fully bonded and insured
4. Quality assurance included
5. Professional service standards maintained

Generated by ODYSSEY-1 on ${new Date().toLocaleDateString()}`;
  };

  return (
    <div className="space-y-6">
      {/* Header with Video Conference Button */}
      <div className="flex justify-between items-center">
        <div className="text-center flex-1">
          <h2 className="text-xl md:text-2xl font-bold text-white mb-1">
            ODYSSEY-1 Calculator
          </h2>
          <p className="text-slate-300 text-sm">
            Automated pricing & agreements
          </p>
        </div>
        <Button
          onClick={() => setIsVideoCallActive(true)}
          className="bg-purple-600 hover:bg-purple-700 ml-4"
          size="sm"
        >
          <Video className="w-4 h-4 mr-2" />
          Video Call
        </Button>
      </div>

      {/* Video Conference Component */}
      {isVideoCallActive && (
        <EnhancedVideoConference
          isActive={isVideoCallActive}
          onClose={() => setIsVideoCallActive(false)}
        />
      )}



      {!bidderInfo ? (
        <SimpleBidderForm onSubmit={handleFormSubmit} />
      ) : (
        <div className="space-y-6">
          <OdysseyPricingEngine
            specs={serviceSpecs!.selectedSpecs.map(s => s.description).join('; ')}
            services={serviceSpecs!.services}
            frequency={serviceSpecs!.frequency}
            contractType={serviceSpecs!.contractType}
          />

          {/* Document Management */}
          <Card className="bg-slate-800/30 border-slate-700">
            <CardHeader>
              <CardTitle className="text-white text-xl">
                Generated Documents
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid lg:grid-cols-2 gap-6">
                <DocumentViewer
                  documents={documents}
                  onDocumentUpdate={(id, content) => {
                    setDocuments(prev => prev.map(doc => 
                      doc.id === id ? { ...doc, content } : doc
                    ));
                  }}
                  onDocumentApprove={(id) => {
                    setDocuments(prev => prev.map(doc => 
                      doc.id === id ? { ...doc, status: 'approved' as const } : doc
                    ));
                  }}
                />
                
                {documents.length > 0 && (
                  <PDFExporter 
                    document={documents[documents.length - 1]} 
                    bidderInfo={bidderInfo}
                  />
                )}
              </div>
            </CardContent>
          </Card>

          {/* Privacy & Commission Structure Viewer - Final Step */}
          <Card className="bg-gradient-to-r from-red-800/30 to-orange-800/30 border-red-500">
            <CardHeader className="pb-3">
              <CardTitle className="text-white flex items-center text-lg">
                <Shield className="w-5 h-5 mr-2" />
                Privacy & Commission Structure Viewer
                <Badge variant="destructive" className="ml-2 text-xs">CONFIDENTIAL</Badge>
              </CardTitle>
            </CardHeader>
            <CardContent>
              <PrivacyViewer bidderInfo={bidderInfo} serviceSpecs={serviceSpecs} />
            </CardContent>
          </Card>
        </div>
      )}
    </div>
  );
};

export default CalculatorTab;